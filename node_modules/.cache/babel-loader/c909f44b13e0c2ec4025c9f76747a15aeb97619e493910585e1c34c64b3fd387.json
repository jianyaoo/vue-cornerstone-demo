{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtk from '../../vtk.js';\nimport vtkDataSetAttributes from './DataSetAttributes.js';\nimport Constants from './DataSet/Constants.js';\n\n// import vtkBoundingBox from '../BoundingBox';\n// import * as vtkMath from '../../Core/Math';\n//\n// function getBounds(dataset) {\n//   if (dataset.bounds) {\n//     return dataset.bounds;\n//   }\n//   if (dataset.type && dataset[dataset.type]) {\n//     const ds = dataset[dataset.type];\n//     if (ds.bounds) {\n//       return ds.bounds;\n//     }\n//     if (ds.Points && ds.Points.bounds) {\n//       return ds.Points.bounds;\n//     }\n\n//     if (ds.Points && ds.Points.values) {\n//       const array = ds.Points.values;\n//       const bbox = [...vtkBoundingBox.INIT_BOUNDS];\n//       const size = array.length;\n//       const delta = ds.Points.numberOfComponents ? ds.Points.numberOfComponents : 3;\n//       for (let idx = 0; idx < size; idx += delta) {\n//         vtkBoundingBox.addPoint(bbox, array[idx * delta], array[(idx * delta) + 1], array[(idx * delta) + 2]);\n//       }\n//       ds.Points.bounds = bbox;\n//       return ds.Points.bounds;\n//     }\n//   }\n//   return vtkMath.createUninitializedBounds();\n// }\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nconst DATASET_FIELDS = ['pointData', 'cellData', 'fieldData'];\n\n// ----------------------------------------------------------------------------\n// vtkDataSet methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataSet(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataSet');\n\n  // Add dataset attributes\n  DATASET_FIELDS.forEach(fieldName => {\n    if (!model[fieldName]) {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n    } else {\n      model[fieldName] = vtk(model[fieldName]);\n    }\n  });\n  const superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = function (other) {\n    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    DATASET_FIELDS.forEach(fieldName => {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n      model[fieldName].shallowCopy(other.getReferenceByName(fieldName));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // pointData: null,\n  // cellData: null,\n  // fieldData: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, DATASET_FIELDS);\n\n  // Object specific methods\n  vtkDataSet(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkDataSet');\n\n// ----------------------------------------------------------------------------\n\nvar vtkDataSet$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\nexport { vtkDataSet$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtk","vtkDataSetAttributes","Constants","DATASET_FIELDS","vtkDataSet","publicAPI","model","classHierarchy","push","forEach","fieldName","newInstance","superShallowCopy","shallowCopy","other","debug","arguments","length","undefined","getReferenceByName","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","setGet","vtkDataSet$1","default"],"sources":["/Users/yzy/Documents/Playground/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Common/DataModel/DataSet.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtk from '../../vtk.js';\nimport vtkDataSetAttributes from './DataSetAttributes.js';\nimport Constants from './DataSet/Constants.js';\n\n// import vtkBoundingBox from '../BoundingBox';\n// import * as vtkMath from '../../Core/Math';\n//\n// function getBounds(dataset) {\n//   if (dataset.bounds) {\n//     return dataset.bounds;\n//   }\n//   if (dataset.type && dataset[dataset.type]) {\n//     const ds = dataset[dataset.type];\n//     if (ds.bounds) {\n//       return ds.bounds;\n//     }\n//     if (ds.Points && ds.Points.bounds) {\n//       return ds.Points.bounds;\n//     }\n\n//     if (ds.Points && ds.Points.values) {\n//       const array = ds.Points.values;\n//       const bbox = [...vtkBoundingBox.INIT_BOUNDS];\n//       const size = array.length;\n//       const delta = ds.Points.numberOfComponents ? ds.Points.numberOfComponents : 3;\n//       for (let idx = 0; idx < size; idx += delta) {\n//         vtkBoundingBox.addPoint(bbox, array[idx * delta], array[(idx * delta) + 1], array[(idx * delta) + 2]);\n//       }\n//       ds.Points.bounds = bbox;\n//       return ds.Points.bounds;\n//     }\n//   }\n//   return vtkMath.createUninitializedBounds();\n// }\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nconst DATASET_FIELDS = ['pointData', 'cellData', 'fieldData'];\n\n// ----------------------------------------------------------------------------\n// vtkDataSet methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataSet(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataSet');\n\n  // Add dataset attributes\n  DATASET_FIELDS.forEach(fieldName => {\n    if (!model[fieldName]) {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n    } else {\n      model[fieldName] = vtk(model[fieldName]);\n    }\n  });\n  const superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = function (other) {\n    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    DATASET_FIELDS.forEach(fieldName => {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n      model[fieldName].shallowCopy(other.getReferenceByName(fieldName));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // pointData: null,\n  // cellData: null,\n  // fieldData: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, DATASET_FIELDS);\n\n  // Object specific methods\n  vtkDataSet(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkDataSet');\n\n// ----------------------------------------------------------------------------\n\nvar vtkDataSet$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkDataSet$1 as default, extend, newInstance };\n"],"mappings":";AAAA,SAASA,CAAC,IAAIC,KAAK,QAAQ,kBAAkB;AAC7C,OAAOC,GAAG,MAAM,cAAc;AAC9B,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,SAAS,MAAM,wBAAwB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC;;AAE7D;AACA;AACA;;AAEA,SAASC,UAAUA,CAACC,SAAS,EAAEC,KAAK,EAAE;EACpC;EACAA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,YAAY,CAAC;;EAEvC;EACAL,cAAc,CAACM,OAAO,CAACC,SAAS,IAAI;IAClC,IAAI,CAACJ,KAAK,CAACI,SAAS,CAAC,EAAE;MACrBJ,KAAK,CAACI,SAAS,CAAC,GAAGT,oBAAoB,CAACU,WAAW,CAAC,CAAC;IACvD,CAAC,MAAM;MACLL,KAAK,CAACI,SAAS,CAAC,GAAGV,GAAG,CAACM,KAAK,CAACI,SAAS,CAAC,CAAC;IAC1C;EACF,CAAC,CAAC;EACF,MAAME,gBAAgB,GAAGP,SAAS,CAACQ,WAAW;EAC9CR,SAAS,CAACQ,WAAW,GAAG,UAAUC,KAAK,EAAE;IACvC,IAAIC,KAAK,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;IACrFJ,gBAAgB,CAACE,KAAK,EAAEC,KAAK,CAAC;IAC9BZ,cAAc,CAACM,OAAO,CAACC,SAAS,IAAI;MAClCJ,KAAK,CAACI,SAAS,CAAC,GAAGT,oBAAoB,CAACU,WAAW,CAAC,CAAC;MACrDL,KAAK,CAACI,SAAS,CAAC,CAACG,WAAW,CAACC,KAAK,CAACK,kBAAkB,CAACT,SAAS,CAAC,CAAC;IACnE,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;;AAEA,MAAMU,cAAc,GAAG;EACrB;EACA;EACA;AAAA,CACD;;AAED;;AAEA,SAASC,MAAMA,CAAChB,SAAS,EAAEC,KAAK,EAAE;EAChC,IAAIgB,aAAa,GAAGN,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FO,MAAM,CAACC,MAAM,CAAClB,KAAK,EAAEc,cAAc,EAAEE,aAAa,CAAC;;EAEnD;EACAvB,KAAK,CAAC0B,GAAG,CAACpB,SAAS,EAAEC,KAAK,CAAC;EAC3BP,KAAK,CAAC2B,MAAM,CAACrB,SAAS,EAAEC,KAAK,EAAEH,cAAc,CAAC;;EAE9C;EACAC,UAAU,CAACC,SAAS,EAAEC,KAAK,CAAC;AAC9B;;AAEA;;AAEA,MAAMK,WAAW,GAAGZ,KAAK,CAACY,WAAW,CAACU,MAAM,EAAE,YAAY,CAAC;;AAE3D;;AAEA,IAAIM,YAAY,GAAG;EACjBhB,WAAW;EACXU,MAAM;EACN,GAAGnB;AACL,CAAC;AAED,SAASyB,YAAY,IAAIC,OAAO,EAAEP,MAAM,EAAEV,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}