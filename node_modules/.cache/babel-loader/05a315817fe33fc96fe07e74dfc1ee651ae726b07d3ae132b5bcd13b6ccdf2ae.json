{"ast":null,"code":"import singleRetrieveStages from './configuration/singleRetrieve';\nimport sequentialRetrieveStages from './configuration/sequentialRetrieve';\nimport interleavedRetrieveStages from './configuration/interleavedRetrieve';\nimport { loadAndCacheImage } from './imageLoader';\nimport { triggerEvent, ProgressiveIterator, decimate } from '../utilities';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport { ImageQualityStatus, RequestType, Events } from '../enums';\nimport cache from '../cache';\nimport eventTarget from '../eventTarget';\nimport { fillNearbyFrames } from './fillNearbyFrames';\nexport { sequentialRetrieveStages, interleavedRetrieveStages, singleRetrieveStages };\nexport class ProgressiveRetrieveImages {\n  constructor(imageRetrieveConfiguration) {\n    this.stages = imageRetrieveConfiguration.stages || singleRetrieveStages;\n    this.retrieveOptions = imageRetrieveConfiguration.retrieveOptions || {};\n  }\n  static {\n    this.createProgressive = createProgressive;\n  }\n  static {\n    this.interleavedRetrieveStages = {\n      stages: interleavedRetrieveStages\n    };\n  }\n  static {\n    this.singleRetrieveStages = {\n      stages: singleRetrieveStages\n    };\n  }\n  static {\n    this.sequentialRetrieveStages = {\n      stages: sequentialRetrieveStages\n    };\n  }\n  loadImages(imageIds, listener) {\n    const instance = new ProgressiveRetrieveImagesInstance(this, imageIds, listener);\n    return instance.loadImages();\n  }\n}\nclass ProgressiveRetrieveImagesInstance {\n  constructor(configuration, imageIds, listener) {\n    this.outstandingRequests = 0;\n    this.stageStatusMap = new Map();\n    this.imageQualityStatusMap = new Map();\n    this.displayedIterator = new ProgressiveIterator('displayed');\n    this.stages = configuration.stages;\n    this.retrieveOptions = configuration.retrieveOptions;\n    this.imageIds = imageIds;\n    this.listener = listener;\n  }\n  async loadImages() {\n    const interleaved = this.createStageRequests();\n    this.outstandingRequests = interleaved.length;\n    for (const request of interleaved) {\n      this.addRequest(request);\n    }\n    if (this.outstandingRequests === 0) {\n      return Promise.resolve(null);\n    }\n    return this.displayedIterator.getDonePromise();\n  }\n  sendRequest(request, options) {\n    const {\n      imageId,\n      next\n    } = request;\n    const errorCallback = (reason, done) => {\n      this.listener.errorCallback(imageId, complete || !next, reason);\n      if (done) {\n        this.updateStageStatus(request.stage, reason);\n      }\n    };\n    const loadedPromise = (options.loader || loadAndCacheImage)(imageId, options);\n    const uncompressedIterator = ProgressiveIterator.as(loadedPromise);\n    let complete = false;\n    uncompressedIterator.forEach(async (image, done) => {\n      const oldStatus = this.imageQualityStatusMap.get(imageId);\n      if (!image) {\n        console.warn('No image retrieved', imageId);\n        return;\n      }\n      const {\n        imageQualityStatus\n      } = image;\n      complete ||= imageQualityStatus === ImageQualityStatus.FULL_RESOLUTION;\n      if (oldStatus !== undefined && oldStatus > imageQualityStatus) {\n        this.updateStageStatus(request.stage, null, true);\n        return;\n      }\n      this.listener.successCallback(imageId, image);\n      this.imageQualityStatusMap.set(imageId, imageQualityStatus);\n      this.displayedIterator.add(image);\n      if (done) {\n        this.updateStageStatus(request.stage);\n      }\n      fillNearbyFrames(this.listener, this.imageQualityStatusMap, request, image, options);\n    }, errorCallback).finally(() => {\n      if (!complete && next) {\n        if (cache.getImageLoadObject(imageId)) {\n          cache.removeImageLoadObject(imageId);\n        }\n        this.addRequest(next, options.streamingData);\n      } else {\n        if (!complete) {\n          this.listener.errorCallback(imageId, true, \"Couldn't decode\");\n        }\n        this.outstandingRequests--;\n        for (let skip = next; skip; skip = skip.next) {\n          this.updateStageStatus(skip.stage, null, true);\n        }\n      }\n      if (this.outstandingRequests <= 0) {\n        this.displayedIterator.resolve();\n      }\n    });\n    const doneLoad = uncompressedIterator.getDonePromise();\n    return doneLoad.catch(e => null);\n  }\n  addRequest(request, streamingData = {}) {\n    const {\n      imageId,\n      stage\n    } = request;\n    const baseOptions = this.listener.getLoaderImageOptions(imageId);\n    if (!baseOptions) {\n      return;\n    }\n    const {\n      retrieveType = 'default'\n    } = stage;\n    const {\n      retrieveOptions: keyedRetrieveOptions\n    } = this;\n    const retrieveOptions = keyedRetrieveOptions[retrieveType] || keyedRetrieveOptions.default;\n    const options = {\n      ...baseOptions,\n      retrieveType,\n      retrieveOptions,\n      streamingData\n    };\n    const priority = stage.priority ?? -5;\n    const requestType = stage.requestType || RequestType.Interaction;\n    const additionalDetails = {\n      imageId\n    };\n    imageLoadPoolManager.addRequest(this.sendRequest.bind(this, request, options), requestType, additionalDetails, priority);\n  }\n  updateStageStatus(stage, failure, skipped = false) {\n    const {\n      id\n    } = stage;\n    const stageStatus = this.stageStatusMap.get(id);\n    if (!stageStatus) {\n      return;\n    }\n    stageStatus.imageLoadPendingCount--;\n    if (failure) {\n      stageStatus.imageLoadFailedCount++;\n    } else if (!skipped) {\n      stageStatus.totalImageCount++;\n    }\n    if (!skipped && !stageStatus.stageStartTime) {\n      stageStatus.stageStartTime = Date.now();\n    }\n    if (!stageStatus.imageLoadPendingCount) {\n      const {\n        imageLoadFailedCount: numberOfFailures,\n        totalImageCount: numberOfImages,\n        stageStartTime = Date.now(),\n        startTime\n      } = stageStatus;\n      const detail = {\n        stageId: id,\n        numberOfFailures,\n        numberOfImages,\n        stageDurationInMS: stageStartTime ? Date.now() - stageStartTime : null,\n        startDurationInMS: Date.now() - startTime\n      };\n      triggerEvent(eventTarget, Events.IMAGE_RETRIEVAL_STAGE, detail);\n      this.stageStatusMap.delete(id);\n    }\n  }\n  createStageRequests() {\n    const interleaved = new Array();\n    const imageRequests = new Map();\n    const addStageInstance = (stage, position) => {\n      const index = position < 0 ? this.imageIds.length + position : position < 1 ? Math.floor((this.imageIds.length - 1) * position) : position;\n      const imageId = this.imageIds[index];\n      if (!imageId) {\n        throw new Error(`No value found to add to requests at ${position}`);\n      }\n      const request = {\n        imageId,\n        stage,\n        nearbyRequests: this.findNearbyRequests(index, stage)\n      };\n      this.addStageStatus(stage);\n      const existingRequest = imageRequests.get(imageId);\n      if (existingRequest) {\n        existingRequest.next = request;\n      } else {\n        interleaved.push(request);\n      }\n      imageRequests.set(imageId, request);\n    };\n    for (const stage of this.stages) {\n      const indices = stage.positions || decimate(this.imageIds, stage.decimate || 1, stage.offset ?? 0);\n      indices.forEach(index => addStageInstance(stage, index));\n    }\n    return interleaved;\n  }\n  findNearbyRequests(index, stage) {\n    const nearby = new Array();\n    if (!stage.nearbyFrames) {\n      return nearby;\n    }\n    for (const nearbyItem of stage.nearbyFrames) {\n      const nearbyIndex = index + nearbyItem.offset;\n      if (nearbyIndex < 0 || nearbyIndex >= this.imageIds.length) {\n        continue;\n      }\n      nearby.push({\n        itemId: this.imageIds[nearbyIndex],\n        imageQualityStatus: nearbyItem.imageQualityStatus\n      });\n    }\n    return nearby;\n  }\n  addStageStatus(stage) {\n    const {\n      id\n    } = stage;\n    const stageStatus = this.stageStatusMap.get(id) || {\n      stageId: id,\n      startTime: Date.now(),\n      stageStartTime: null,\n      totalImageCount: 0,\n      imageLoadFailedCount: 0,\n      imageLoadPendingCount: 0\n    };\n    stageStatus.imageLoadPendingCount++;\n    this.stageStatusMap.set(id, stageStatus);\n    return stageStatus;\n  }\n}\nexport function createProgressive(configuration) {\n  return new ProgressiveRetrieveImages(configuration);\n}\nexport default ProgressiveRetrieveImages;","map":{"version":3,"names":["singleRetrieveStages","sequentialRetrieveStages","interleavedRetrieveStages","loadAndCacheImage","triggerEvent","ProgressiveIterator","decimate","imageLoadPoolManager","ImageQualityStatus","RequestType","Events","cache","eventTarget","fillNearbyFrames","ProgressiveRetrieveImages","constructor","imageRetrieveConfiguration","stages","retrieveOptions","createProgressive","loadImages","imageIds","listener","instance","ProgressiveRetrieveImagesInstance","configuration","outstandingRequests","stageStatusMap","Map","imageQualityStatusMap","displayedIterator","interleaved","createStageRequests","length","request","addRequest","Promise","resolve","getDonePromise","sendRequest","options","imageId","next","errorCallback","reason","done","complete","updateStageStatus","stage","loadedPromise","loader","uncompressedIterator","as","forEach","image","oldStatus","get","console","warn","imageQualityStatus","FULL_RESOLUTION","undefined","successCallback","set","add","finally","getImageLoadObject","removeImageLoadObject","streamingData","skip","doneLoad","catch","e","baseOptions","getLoaderImageOptions","retrieveType","keyedRetrieveOptions","default","priority","requestType","Interaction","additionalDetails","bind","failure","skipped","id","stageStatus","imageLoadPendingCount","imageLoadFailedCount","totalImageCount","stageStartTime","Date","now","numberOfFailures","numberOfImages","startTime","detail","stageId","stageDurationInMS","startDurationInMS","IMAGE_RETRIEVAL_STAGE","delete","Array","imageRequests","addStageInstance","position","index","Math","floor","Error","nearbyRequests","findNearbyRequests","addStageStatus","existingRequest","push","indices","positions","offset","nearby","nearbyFrames","nearbyItem","nearbyIndex","itemId"],"sources":["../../../src/loaders/ProgressiveRetrieveImages.ts"],"sourcesContent":[null],"mappings":"AASA,OAAOA,oBAAoB,MAAM,gCAAgC;AACjE,OAAOC,wBAAwB,MAAM,oCAAoC;AACzE,OAAOC,yBAAyB,MAAM,qCAAqC;AAC3E,SAASC,iBAAiB,QAAQ,eAAe;AACjD,SAASC,YAAY,EAAEC,mBAAmB,EAAEC,QAAQ,QAAQ,cAAc;AAC1E,OAAOC,oBAAoB,MAAM,qCAAqC;AACtE,SAASC,kBAAkB,EAAEC,WAAW,EAAEC,MAAM,QAAQ,UAAU;AAClE,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,WAAW,MAAM,gBAAgB;AACxC,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SACEZ,wBAAwB,EACxBC,yBAAyB,EACzBF,oBAAoB;AAqEtB,OAAM,MAAOc,yBAAyB;EAoBpCC,YAAYC,0BAAkD;IAC5D,IAAI,CAACC,MAAM,GAAGD,0BAA0B,CAACC,MAAM,IAAIjB,oBAAoB;IACvE,IAAI,CAACkB,eAAe,GAAGF,0BAA0B,CAACE,eAAe,IAAI,EAAE;EACzE;EApBA;IAAc,KAAAC,iBAAiB,GAAGA,iBAAiB;EAAC;EAEpD;IAAc,KAAAjB,yBAAyB,GAAG;MACxCe,MAAM,EAAEf;KACT;EAAC;EAEF;IAAc,KAAAF,oBAAoB,GAAG;MACnCiB,MAAM,EAAEjB;KACT;EAAC;EAEF;IAAc,KAAAC,wBAAwB,GAAG;MACvCgB,MAAM,EAAEhB;KACT;EAAC;EAUKmB,UAAUA,CAACC,QAAkB,EAAEC,QAA2B;IAC/D,MAAMC,QAAQ,GAAG,IAAIC,iCAAiC,CACpD,IAAI,EACJH,QAAQ,EACRC,QAAQ,CACT;IACD,OAAOC,QAAQ,CAACH,UAAU,EAAE;EAC9B;;AAGF,MAAMI,iCAAiC;EAWrCT,YAAYU,aAAqC,EAAEJ,QAAQ,EAAEC,QAAQ;IANrE,KAAAI,mBAAmB,GAAG,CAAC;IAEvB,KAAAC,cAAc,GAAG,IAAIC,GAAG,EAAuB;IAC/C,KAAAC,qBAAqB,GAAG,IAAID,GAAG,EAA8B;IAC7D,KAAAE,iBAAiB,GAAG,IAAIzB,mBAAmB,CAAgB,WAAW,CAAC;IAGrE,IAAI,CAACY,MAAM,GAAGQ,aAAa,CAACR,MAAM;IAClC,IAAI,CAACC,eAAe,GAAGO,aAAa,CAACP,eAAe;IACpD,IAAI,CAACG,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EAEO,MAAMF,UAAUA,CAAA;IAGrB,MAAMW,WAAW,GAAG,IAAI,CAACC,mBAAmB,EAAE;IAC9C,IAAI,CAACN,mBAAmB,GAAGK,WAAW,CAACE,MAAM;IAC7C,KAAK,MAAMC,OAAO,IAAIH,WAAW,EAAE;MACjC,IAAI,CAACI,UAAU,CAACD,OAAO,CAAC;;IAE1B,IAAI,IAAI,CAACR,mBAAmB,KAAK,CAAC,EAAE;MAClC,OAAOU,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;;IAG9B,OAAO,IAAI,CAACP,iBAAiB,CAACQ,cAAc,EAAE;EAChD;EAEUC,WAAWA,CAACL,OAAO,EAAEM,OAAO;IACpC,MAAM;MAAEC,OAAO;MAAEC;IAAI,CAAE,GAAGR,OAAO;IACjC,MAAMS,aAAa,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAI;MACrC,IAAI,CAACvB,QAAQ,CAACqB,aAAa,CAACF,OAAO,EAAEK,QAAQ,IAAI,CAACJ,IAAI,EAAEE,MAAM,CAAC;MAC/D,IAAIC,IAAI,EAAE;QACR,IAAI,CAACE,iBAAiB,CAACb,OAAO,CAACc,KAAK,EAAEJ,MAAM,CAAC;;IAEjD,CAAC;IACD,MAAMK,aAAa,GAAG,CAACT,OAAO,CAACU,MAAM,IAAI/C,iBAAiB,EACxDsC,OAAO,EACPD,OAAO,CACR;IACD,MAAMW,oBAAoB,GAAG9C,mBAAmB,CAAC+C,EAAE,CAACH,aAAa,CAAC;IAClE,IAAIH,QAAQ,GAAG,KAAK;IAEpBK,oBAAoB,CACjBE,OAAO,CAAC,OAAOC,KAAK,EAAET,IAAI,KAAI;MAC7B,MAAMU,SAAS,GAAG,IAAI,CAAC1B,qBAAqB,CAAC2B,GAAG,CAACf,OAAO,CAAC;MACzD,IAAI,CAACa,KAAK,EAAE;QACVG,OAAO,CAACC,IAAI,CAAC,oBAAoB,EAAEjB,OAAO,CAAC;QAC3C;;MAEF,MAAM;QAAEkB;MAAkB,CAAE,GAAGL,KAAK;MACpCR,QAAQ,KAAKa,kBAAkB,KAAKnD,kBAAkB,CAACoD,eAAe;MACtE,IAAIL,SAAS,KAAKM,SAAS,IAAIN,SAAS,GAAGI,kBAAkB,EAAE;QAE7D,IAAI,CAACZ,iBAAiB,CAACb,OAAO,CAACc,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;QACjD;;MAGF,IAAI,CAAC1B,QAAQ,CAACwC,eAAe,CAACrB,OAAO,EAAEa,KAAK,CAAC;MAC7C,IAAI,CAACzB,qBAAqB,CAACkC,GAAG,CAACtB,OAAO,EAAEkB,kBAAkB,CAAC;MAC3D,IAAI,CAAC7B,iBAAiB,CAACkC,GAAG,CAACV,KAAK,CAAC;MACjC,IAAIT,IAAI,EAAE;QACR,IAAI,CAACE,iBAAiB,CAACb,OAAO,CAACc,KAAK,CAAC;;MAEvCnC,gBAAgB,CACd,IAAI,CAACS,QAAQ,EACb,IAAI,CAACO,qBAAqB,EAC1BK,OAAO,EACPoB,KAAK,EACLd,OAAO,CACR;IACH,CAAC,EAAEG,aAAa,CAAC,CAChBsB,OAAO,CAAC,MAAK;MACZ,IAAI,CAACnB,QAAQ,IAAIJ,IAAI,EAAE;QACrB,IAAI/B,KAAK,CAACuD,kBAAkB,CAACzB,OAAO,CAAC,EAAE;UACrC9B,KAAK,CAACwD,qBAAqB,CAAC1B,OAAO,CAAC;;QAEtC,IAAI,CAACN,UAAU,CAACO,IAAI,EAAEF,OAAO,CAAC4B,aAAa,CAAC;OAC7C,MAAM;QACL,IAAI,CAACtB,QAAQ,EAAE;UACb,IAAI,CAACxB,QAAQ,CAACqB,aAAa,CAACF,OAAO,EAAE,IAAI,EAAE,iBAAiB,CAAC;;QAE/D,IAAI,CAACf,mBAAmB,EAAE;QAC1B,KAAK,IAAI2C,IAAI,GAAG3B,IAAI,EAAE2B,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAAC3B,IAAI,EAAE;UAC5C,IAAI,CAACK,iBAAiB,CAACsB,IAAI,CAACrB,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;;;MAGlD,IAAI,IAAI,CAACtB,mBAAmB,IAAI,CAAC,EAAE;QACjC,IAAI,CAACI,iBAAiB,CAACO,OAAO,EAAE;;IAEpC,CAAC,CAAC;IACJ,MAAMiC,QAAQ,GAAGnB,oBAAoB,CAACb,cAAc,EAAE;IAEtD,OAAOgC,QAAQ,CAACC,KAAK,CAAEC,CAAC,IAAK,IAAI,CAAC;EACpC;EAGUrC,UAAUA,CAACD,OAAO,EAAEkC,aAAa,GAAG,EAAE;IAC9C,MAAM;MAAE3B,OAAO;MAAEO;IAAK,CAAE,GAAGd,OAAO;IAClC,MAAMuC,WAAW,GAAG,IAAI,CAACnD,QAAQ,CAACoD,qBAAqB,CAACjC,OAAO,CAAC;IAChE,IAAI,CAACgC,WAAW,EAAE;MAEhB;;IAEF,MAAM;MAAEE,YAAY,GAAG;IAAS,CAAE,GAAG3B,KAAK;IAC1C,MAAM;MAAE9B,eAAe,EAAE0D;IAAoB,CAAE,GAAG,IAAI;IACtD,MAAM1D,eAAe,GACnB0D,oBAAoB,CAACD,YAAY,CAAC,IAAIC,oBAAoB,CAACC,OAAO;IACpE,MAAMrC,OAAO,GAAG;MACd,GAAGiC,WAAW;MACdE,YAAY;MACZzD,eAAe;MACfkD;KACD;IACD,MAAMU,QAAQ,GAAG9B,KAAK,CAAC8B,QAAQ,IAAI,CAAC,CAAC;IACrC,MAAMC,WAAW,GAAG/B,KAAK,CAAC+B,WAAW,IAAItE,WAAW,CAACuE,WAAW;IAChE,MAAMC,iBAAiB,GAAG;MAAExC;IAAO,CAAE;IAErClC,oBAAoB,CAAC4B,UAAU,CAC7B,IAAI,CAACI,WAAW,CAAC2C,IAAI,CAAC,IAAI,EAAEhD,OAAO,EAAEM,OAAO,CAAC,EAC7CuC,WAAW,EACXE,iBAAiB,EACjBH,QAAQ,CACT;EACH;EAEU/B,iBAAiBA,CAACC,KAAK,EAAEmC,OAAQ,EAAEC,OAAO,GAAG,KAAK;IAC1D,MAAM;MAAEC;IAAE,CAAE,GAAGrC,KAAK;IACpB,MAAMsC,WAAW,GAAG,IAAI,CAAC3D,cAAc,CAAC6B,GAAG,CAAC6B,EAAE,CAAC;IAC/C,IAAI,CAACC,WAAW,EAAE;MAChB;;IAEFA,WAAW,CAACC,qBAAqB,EAAE;IACnC,IAAIJ,OAAO,EAAE;MACXG,WAAW,CAACE,oBAAoB,EAAE;KACnC,MAAM,IAAI,CAACJ,OAAO,EAAE;MACnBE,WAAW,CAACG,eAAe,EAAE;;IAE/B,IAAI,CAACL,OAAO,IAAI,CAACE,WAAW,CAACI,cAAc,EAAE;MAC3CJ,WAAW,CAACI,cAAc,GAAGC,IAAI,CAACC,GAAG,EAAE;;IAEzC,IAAI,CAACN,WAAW,CAACC,qBAAqB,EAAE;MACtC,MAAM;QACJC,oBAAoB,EAAEK,gBAAgB;QACtCJ,eAAe,EAAEK,cAAc;QAC/BJ,cAAc,GAAGC,IAAI,CAACC,GAAG,EAAE;QAC3BG;MAAS,CACV,GAAGT,WAAW;MACf,MAAMU,MAAM,GAAyC;QACnDC,OAAO,EAAEZ,EAAE;QACXQ,gBAAgB;QAChBC,cAAc;QACdI,iBAAiB,EAAER,cAAc,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAGF,cAAc,GAAG,IAAI;QACtES,iBAAiB,EAAER,IAAI,CAACC,GAAG,EAAE,GAAGG;OACjC;MACD3F,YAAY,CAACQ,WAAW,EAAEF,MAAM,CAAC0F,qBAAqB,EAAEJ,MAAM,CAAC;MAC/D,IAAI,CAACrE,cAAc,CAAC0E,MAAM,CAAChB,EAAE,CAAC;;EAElC;EAGUrD,mBAAmBA,CAAA;IAC3B,MAAMD,WAAW,GAAG,IAAIuE,KAAK,EAAsB;IAEnD,MAAMC,aAAa,GAAG,IAAI3E,GAAG,EAA8B;IAE3D,MAAM4E,gBAAgB,GAAGA,CAACxD,KAAK,EAAEyD,QAAQ,KAAI;MAC3C,MAAMC,KAAK,GACTD,QAAQ,GAAG,CAAC,GACR,IAAI,CAACpF,QAAQ,CAACY,MAAM,GAAGwE,QAAQ,GAC/BA,QAAQ,GAAG,CAAC,GACZE,IAAI,CAACC,KAAK,CAAC,CAAC,IAAI,CAACvF,QAAQ,CAACY,MAAM,GAAG,CAAC,IAAIwE,QAAQ,CAAC,GACjDA,QAAQ;MACd,MAAMhE,OAAO,GAAG,IAAI,CAACpB,QAAQ,CAACqF,KAAK,CAAC;MACpC,IAAI,CAACjE,OAAO,EAAE;QACZ,MAAM,IAAIoE,KAAK,CAAC,wCAAwCJ,QAAQ,EAAE,CAAC;;MAErE,MAAMvE,OAAO,GAAuB;QAClCO,OAAO;QACPO,KAAK;QACL8D,cAAc,EAAE,IAAI,CAACC,kBAAkB,CAACL,KAAK,EAAE1D,KAAK;OACrD;MACD,IAAI,CAACgE,cAAc,CAAChE,KAAK,CAAC;MAC1B,MAAMiE,eAAe,GAAGV,aAAa,CAAC/C,GAAG,CAACf,OAAO,CAAC;MAClD,IAAIwE,eAAe,EAAE;QACnBA,eAAe,CAACvE,IAAI,GAAGR,OAAO;OAC/B,MAAM;QACLH,WAAW,CAACmF,IAAI,CAAChF,OAAO,CAAC;;MAE3BqE,aAAa,CAACxC,GAAG,CAACtB,OAAO,EAAEP,OAAO,CAAC;IACrC,CAAC;IAED,KAAK,MAAMc,KAAK,IAAI,IAAI,CAAC/B,MAAM,EAAE;MAC/B,MAAMkG,OAAO,GACXnE,KAAK,CAACoE,SAAS,IACf9G,QAAQ,CAAC,IAAI,CAACe,QAAQ,EAAE2B,KAAK,CAAC1C,QAAQ,IAAI,CAAC,EAAE0C,KAAK,CAACqE,MAAM,IAAI,CAAC,CAAC;MACjEF,OAAO,CAAC9D,OAAO,CAAEqD,KAAK,IAAKF,gBAAgB,CAACxD,KAAK,EAAE0D,KAAK,CAAC,CAAC;;IAE5D,OAAO3E,WAAW;EACpB;EASUgF,kBAAkBA,CAACL,KAAa,EAAE1D,KAAK;IAC/C,MAAMsE,MAAM,GAAG,IAAIhB,KAAK,EAAiB;IACzC,IAAI,CAACtD,KAAK,CAACuE,YAAY,EAAE;MACvB,OAAOD,MAAM;;IAEf,KAAK,MAAME,UAAU,IAAIxE,KAAK,CAACuE,YAAY,EAAE;MAC3C,MAAME,WAAW,GAAGf,KAAK,GAAGc,UAAU,CAACH,MAAM;MAC7C,IAAII,WAAW,GAAG,CAAC,IAAIA,WAAW,IAAI,IAAI,CAACpG,QAAQ,CAACY,MAAM,EAAE;QAC1D;;MAEFqF,MAAM,CAACJ,IAAI,CAAC;QACVQ,MAAM,EAAE,IAAI,CAACrG,QAAQ,CAACoG,WAAW,CAAC;QAClC9D,kBAAkB,EAAE6D,UAAU,CAAC7D;OAChC,CAAC;;IAGJ,OAAO2D,MAAM;EACf;EAEUN,cAAcA,CAAChE,KAAK;IAC5B,MAAM;MAAEqC;IAAE,CAAE,GAAGrC,KAAK;IACpB,MAAMsC,WAAW,GAAG,IAAI,CAAC3D,cAAc,CAAC6B,GAAG,CAAC6B,EAAE,CAAC,IAAI;MACjDY,OAAO,EAAEZ,EAAE;MACXU,SAAS,EAAEJ,IAAI,CAACC,GAAG,EAAE;MACrBF,cAAc,EAAE,IAAI;MACpBD,eAAe,EAAE,CAAC;MAClBD,oBAAoB,EAAE,CAAC;MACvBD,qBAAqB,EAAE;KACxB;IACDD,WAAW,CAACC,qBAAqB,EAAE;IACnC,IAAI,CAAC5D,cAAc,CAACoC,GAAG,CAACsB,EAAE,EAAEC,WAAW,CAAC;IACxC,OAAOA,WAAW;EACpB;;AAGF,OAAM,SAAUnE,iBAAiBA,CAACM,aAAqC;EACrE,OAAO,IAAIX,yBAAyB,CAACW,aAAa,CAAC;AACrD;AAEA,eAAeX,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}