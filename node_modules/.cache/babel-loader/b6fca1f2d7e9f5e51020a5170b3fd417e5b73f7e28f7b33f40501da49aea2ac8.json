{"ast":null,"code":"import { utilities } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n  if (!colorLUT) {\n    throw new Error('addColorLUT: colorLUT is required');\n  }\n  if (!utilities.isEqual(colorLUT[0], [0, 0, 0, 0])) {\n    console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n    colorLUT.unshift([0, 0, 0, 0]);\n  }\n  SegmentationState.addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(toolGroupId, segmentationRepresentationUID, colorLUTIndex) {\n  const segRepresentation = SegmentationState.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n  if (!segRepresentation) {\n    throw new Error(`setColorLUT: could not find segmentation representation with UID ${segmentationRepresentationUID}`);\n  }\n  if (!SegmentationState.getColorLUT(colorLUTIndex)) {\n    throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTIndex}`);\n  }\n  segRepresentation.colorLUTIndex = colorLUTIndex;\n  triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n}\nfunction getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex) {\n  const segmentationRepresentation = SegmentationState.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n  if (!segmentationRepresentation) {\n    throw new Error(`segmentation representation with UID ${segmentationRepresentationUID} does not exist for tool group ${toolGroupId}`);\n  }\n  const {\n    colorLUTIndex\n  } = segmentationRepresentation;\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  let colorValue = colorLUT[segmentIndex];\n  if (!colorValue) {\n    if (typeof segmentIndex !== 'number') {\n      throw new Error(`Can't create colour for LUT index ${segmentIndex}`);\n    }\n    colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n  }\n  return colorValue;\n}\nfunction setColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex, color) {\n  const colorReference = getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);\n  for (let i = 0; i < color.length; i++) {\n    colorReference[i] = color[i];\n  }\n  triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n}\nexport { getColorForSegmentIndex, addColorLUT, setColorLUT, setColorForSegmentIndex };","map":{"version":3,"names":["utilities","SegmentationState","triggerSegmentationRepresentationModified","addColorLUT","colorLUT","colorLUTIndex","Error","isEqual","console","warn","unshift","setColorLUT","toolGroupId","segmentationRepresentationUID","segRepresentation","getSegmentationRepresentationByUID","getColorLUT","getColorForSegmentIndex","segmentIndex","segmentationRepresentation","colorValue","setColorForSegmentIndex","color","colorReference","i","length"],"sources":["../../../../../src/stateManagement/segmentation/config/segmentationColor.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAE/C,OAAO,KAAKC,iBAAiB,MAAM,yDAAyD;AAC5F,SAASC,yCAAyC,QAAQ,8BAA8B;AAUxF,SAASC,WAAWA,CAACC,QAAwB,EAAEC,aAAqB;EAClE,IAAI,CAACD,QAAQ,EAAE;IACb,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;;EAItD,IAAI,CAACN,SAAS,CAACO,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACjDI,OAAO,CAACC,IAAI,CACV,qHAAqH,CACtH;IACDL,QAAQ,CAACM,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;EAGhCT,iBAAiB,CAACE,WAAW,CAACC,QAAQ,EAAEC,aAAa,CAAC;AACxD;AASA,SAASM,WAAWA,CAClBC,WAAmB,EACnBC,6BAAqC,EACrCR,aAAqB;EAErB,MAAMS,iBAAiB,GACrBb,iBAAiB,CAACc,kCAAkC,CAClDH,WAAW,EACXC,6BAA6B,CAC9B;EAEH,IAAI,CAACC,iBAAiB,EAAE;IACtB,MAAM,IAAIR,KAAK,CACb,oEAAoEO,6BAA6B,EAAE,CACpG;;EAGH,IAAI,CAACZ,iBAAiB,CAACe,WAAW,CAACX,aAAa,CAAC,EAAE;IACjD,MAAM,IAAIC,KAAK,CACb,mDAAmDD,aAAa,EAAE,CACnE;;EAGHS,iBAAiB,CAACT,aAAa,GAAGA,aAAa;EAE/CH,yCAAyC,CACvCU,WAAW,EACXC,6BAA6B,CAC9B;AACH;AAYA,SAASI,uBAAuBA,CAC9BL,WAAmB,EACnBC,6BAAqC,EACrCK,YAAoB;EAEpB,MAAMC,0BAA0B,GAC9BlB,iBAAiB,CAACc,kCAAkC,CAClDH,WAAW,EACXC,6BAA6B,CAC9B;EAEH,IAAI,CAACM,0BAA0B,EAAE;IAC/B,MAAM,IAAIb,KAAK,CACb,wCAAwCO,6BAA6B,kCAAkCD,WAAW,EAAE,CACrH;;EAGH,MAAM;IAAEP;EAAa,CAAE,GAAGc,0BAA0B;EAGpD,MAAMf,QAAQ,GAAGH,iBAAiB,CAACe,WAAW,CAACX,aAAa,CAAC;EAC7D,IAAIe,UAAU,GAAGhB,QAAQ,CAACc,YAAY,CAAC;EACvC,IAAI,CAACE,UAAU,EAAE;IACf,IAAI,OAAOF,YAAY,KAAK,QAAQ,EAAE;MACpC,MAAM,IAAIZ,KAAK,CAAC,qCAAqCY,YAAY,EAAE,CAAC;;IAEtEE,UAAU,GAAGhB,QAAQ,CAACc,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;EAEpD,OAAOE,UAAU;AACnB;AAEA,SAASC,uBAAuBA,CAC9BT,WAAmB,EACnBC,6BAAqC,EACrCK,YAAoB,EACpBI,KAAkB;EAGlB,MAAMC,cAAc,GAAGN,uBAAuB,CAC5CL,WAAW,EACXC,6BAA6B,EAC7BK,YAAY,CACb;EAGD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,cAAc,CAACC,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC,CAAC;;EAG9BtB,yCAAyC,CACvCU,WAAW,EACXC,6BAA6B,CAC9B;AACH;AAEA,SACEI,uBAAuB,EACvBd,WAAW,EACXQ,WAAW,EACXU,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}