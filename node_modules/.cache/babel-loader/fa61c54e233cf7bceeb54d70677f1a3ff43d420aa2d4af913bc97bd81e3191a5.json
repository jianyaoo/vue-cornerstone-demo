{"ast":null,"code":"import { OrientationAxis } from '../enums';\nimport BaseVolumeViewport from './BaseVolumeViewport';\nclass VolumeViewport3D extends BaseVolumeViewport {\n  constructor(props) {\n    super(props);\n    this.getRotation = () => 0;\n    this.getCurrentImageIdIndex = () => {\n      return undefined;\n    };\n    this.getCurrentImageId = () => {\n      return null;\n    };\n    const {\n      parallelProjection,\n      orientation\n    } = this.options;\n    const activeCamera = this.getVtkActiveCamera();\n    if (parallelProjection != null) {\n      activeCamera.setParallelProjection(parallelProjection);\n    }\n    if (orientation && orientation !== OrientationAxis.ACQUISITION) {\n      this.applyViewOrientation(orientation);\n    }\n  }\n  resetCamera(resetPan = true, resetZoom = true, resetToCenter = true) {\n    super.resetCamera(resetPan, resetZoom, resetToCenter);\n    this.resetVolumeViewportClippingRange();\n    return;\n  }\n  posProcessNewActors() {\n    if (this.newActorAdded) {\n      const renderer = this.getRenderer();\n      renderer.resetCameraClippingRange();\n    }\n    super.posProcessNewActors();\n  }\n  setSlabThickness(slabThickness, filterActorUIDs) {\n    return null;\n  }\n  setBlendMode(blendMode, filterActorUIDs, immediate) {\n    return null;\n  }\n  resetProperties(volumeId) {\n    return null;\n  }\n}\nexport default VolumeViewport3D;","map":{"version":3,"names":["OrientationAxis","BaseVolumeViewport","VolumeViewport3D","constructor","props","getRotation","getCurrentImageIdIndex","undefined","getCurrentImageId","parallelProjection","orientation","options","activeCamera","getVtkActiveCamera","setParallelProjection","ACQUISITION","applyViewOrientation","resetCamera","resetPan","resetZoom","resetToCenter","resetVolumeViewportClippingRange","posProcessNewActors","newActorAdded","renderer","getRenderer","resetCameraClippingRange","setSlabThickness","slabThickness","filterActorUIDs","setBlendMode","blendMode","immediate","resetProperties","volumeId"],"sources":["../../../src/RenderingEngine/VolumeViewport3D.ts"],"sourcesContent":[null],"mappings":"AAAA,SAAqBA,eAAe,QAAQ,UAAU;AAEtD,OAAOC,kBAAkB,MAAM,sBAAsB;AASrD,MAAMC,gBAAiB,SAAQD,kBAAkB;EAC/CE,YAAYC,KAAoB;IAC9B,KAAK,CAACA,KAAK,CAAC;IAyBd,KAAAC,WAAW,GAAG,MAAc,CAAC;IAE7B,KAAAC,sBAAsB,GAAG,MAAyB;MAChD,OAAOC,SAAS;IAClB,CAAC;IAED,KAAAC,iBAAiB,GAAG,MAAa;MAC/B,OAAO,IAAI;IACb,CAAC;IA/BC,MAAM;MAAEC,kBAAkB;MAAEC;IAAW,CAAE,GAAG,IAAI,CAACC,OAAO;IAExD,MAAMC,YAAY,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAE9C,IAAIJ,kBAAkB,IAAI,IAAI,EAAE;MAC9BG,YAAY,CAACE,qBAAqB,CAACL,kBAAkB,CAAC;;IAGxD,IAAIC,WAAW,IAAIA,WAAW,KAAKV,eAAe,CAACe,WAAW,EAAE;MAC9D,IAAI,CAACC,oBAAoB,CAACN,WAAW,CAAC;;EAE1C;EAEOO,WAAWA,CAChBC,QAAQ,GAAG,IAAI,EACfC,SAAS,GAAG,IAAI,EAChBC,aAAa,GAAG,IAAI;IAEpB,KAAK,CAACH,WAAW,CAACC,QAAQ,EAAEC,SAAS,EAAEC,aAAa,CAAC;IACrD,IAAI,CAACC,gCAAgC,EAAE;IACvC;EACF;EAYAC,mBAAmBA,CAAA;IACjB,IAAI,IAAI,CAACC,aAAa,EAAE;MACtB,MAAMC,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;MACnCD,QAAQ,CAACE,wBAAwB,EAAE;;IAErC,KAAK,CAACJ,mBAAmB,EAAE;EAC7B;EAEAK,gBAAgBA,CACdC,aAAqB,EACrBC,eAA+B;IAE/B,OAAO,IAAI;EACb;EAEAC,YAAYA,CACVC,SAAqB,EACrBF,eAA0B,EAC1BG,SAAmB;IAEnB,OAAO,IAAI;EACb;EAEAC,eAAeA,CAACC,QAAiB;IAC/B,OAAO,IAAI;EACb;;AAGF,eAAehC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}