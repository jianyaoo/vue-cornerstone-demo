{"ast":null,"code":"import { cache, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\nclass RectangleScissorsTool extends BaseTool {\n  constructor(toolProps = {}, defaultToolProps = {\n    supportedInteractionTypes: ['Mouse', 'Touch'],\n    configuration: {\n      strategies: {\n        FILL_INSIDE: fillInsideRectangle,\n        ERASE_INSIDE: eraseInsideRectangle\n      },\n      defaultStrategy: 'FILL_INSIDE',\n      activeStrategy: 'FILL_INSIDE'\n    }\n  }) {\n    super(toolProps, defaultToolProps);\n    this.preMouseDownCallback = evt => {\n      if (this.isDrawing === true) {\n        return;\n      }\n      const eventDetail = evt.detail;\n      const {\n        currentPoints,\n        element\n      } = eventDetail;\n      const worldPos = currentPoints.world;\n      const enabledElement = getEnabledElement(element);\n      const {\n        viewport,\n        renderingEngine\n      } = enabledElement;\n      this.isDrawing = true;\n      const camera = viewport.getCamera();\n      const {\n        viewPlaneNormal,\n        viewUp\n      } = camera;\n      const toolGroupId = this.toolGroupId;\n      const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n      if (!activeSegmentationRepresentation) {\n        throw new Error('No active segmentation detected, create one before using scissors tool');\n      }\n      const {\n        segmentationRepresentationUID,\n        segmentationId,\n        type\n      } = activeSegmentationRepresentation;\n      const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n      const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n      const segmentColor = segmentationConfig.color.getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);\n      const {\n        representationData\n      } = getSegmentation(segmentationId);\n      const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n      const annotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          viewPlaneNormal: [...viewPlaneNormal],\n          viewUp: [...viewUp],\n          FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n          referencedImageId: '',\n          toolName: this.getToolName(),\n          segmentColor\n        },\n        data: {\n          handles: {\n            points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n            activeHandleIndex: null\n          }\n        }\n      };\n      const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n      this.editData = {\n        annotation,\n        segmentIndex,\n        segmentationId,\n        segmentsLocked,\n        segmentColor,\n        viewportIdsToRender,\n        handleIndex: 3,\n        movingTextBox: false,\n        newAnnotation: true,\n        hasMoved: false,\n        segmentationRepresentationUID\n      };\n      if (isVolumeSegmentation(labelmapData)) {\n        const {\n          volumeId\n        } = labelmapData;\n        const segmentation = cache.getVolume(volumeId);\n        this.editData = {\n          ...this.editData,\n          volumeId,\n          referencedVolumeId: segmentation.referencedVolumeId\n        };\n      } else {\n        const {\n          imageIdReferenceMap\n        } = labelmapData;\n        this.editData = {\n          ...this.editData,\n          imageIdReferenceMap\n        };\n      }\n      this._activateDraw(element);\n      hideElementCursor(element);\n      evt.preventDefault();\n      triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n      return true;\n    };\n    this._dragCallback = evt => {\n      this.isDrawing = true;\n      const eventDetail = evt.detail;\n      const {\n        element\n      } = eventDetail;\n      const {\n        annotation,\n        viewportIdsToRender,\n        handleIndex\n      } = this.editData;\n      const {\n        data\n      } = annotation;\n      const {\n        currentPoints\n      } = eventDetail;\n      const enabledElement = getEnabledElement(element);\n      const {\n        worldToCanvas,\n        canvasToWorld\n      } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n      const {\n        points\n      } = data.handles;\n      points[handleIndex] = [...worldPos];\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n          break;\n        case 1:\n        case 2:\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n          bottomLeftCanvas = [topLeftCanvas[0], bottomRightCanvas[1]];\n          topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n          break;\n      }\n      annotation.invalidated = true;\n      this.editData.hasMoved = true;\n      const {\n        renderingEngine\n      } = enabledElement;\n      triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    };\n    this._endCallback = evt => {\n      const eventDetail = evt.detail;\n      const {\n        element\n      } = eventDetail;\n      const {\n        annotation,\n        newAnnotation,\n        hasMoved\n      } = this.editData;\n      const {\n        data\n      } = annotation;\n      if (newAnnotation && !hasMoved) {\n        return;\n      }\n      data.handles.activeHandleIndex = null;\n      this._deactivateDraw(element);\n      resetElementCursor(element);\n      const enabledElement = getEnabledElement(element);\n      const operationData = {\n        ...this.editData,\n        points: data.handles.points\n      };\n      this.editData = null;\n      this.isDrawing = false;\n      this.applyActiveStrategy(enabledElement, operationData);\n    };\n    this._activateDraw = element => {\n      element.addEventListener(Events.MOUSE_UP, this._endCallback);\n      element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n      element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n      element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n      element.addEventListener(Events.TOUCH_END, this._endCallback);\n      element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n      element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    };\n    this._deactivateDraw = element => {\n      element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n      element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n      element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n      element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n      element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n      element.removeEventListener(Events.TOUCH_END, this._endCallback);\n      element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    };\n    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n      let renderStatus = false;\n      if (!this.editData) {\n        return renderStatus;\n      }\n      const {\n        viewport\n      } = enabledElement;\n      const {\n        annotation\n      } = this.editData;\n      const toolMetadata = annotation.metadata;\n      const annotationUID = annotation.annotationUID;\n      const data = annotation.data;\n      const {\n        points\n      } = data.handles;\n      const canvasCoordinates = points.map(p => viewport.worldToCanvas(p));\n      const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n      const rectangleUID = '0';\n      drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n        color\n      });\n      renderStatus = true;\n      return renderStatus;\n    };\n  }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;","map":{"version":3,"names":["cache","getEnabledElement","BaseTool","fillInsideRectangle","eraseInsideRectangle","getViewportIdsWithToolToRender","Events","SegmentationRepresentations","drawRect","drawRectSvg","resetElementCursor","hideElementCursor","triggerAnnotationRenderForViewportIds","config","segmentationConfig","segmentLocking","segmentIndex","segmentIndexController","activeSegmentation","getSegmentation","isVolumeSegmentation","RectangleScissorsTool","constructor","toolProps","defaultToolProps","supportedInteractionTypes","configuration","strategies","FILL_INSIDE","ERASE_INSIDE","defaultStrategy","activeStrategy","preMouseDownCallback","evt","isDrawing","eventDetail","detail","currentPoints","element","worldPos","world","enabledElement","viewport","renderingEngine","camera","getCamera","viewPlaneNormal","viewUp","toolGroupId","activeSegmentationRepresentation","getActiveSegmentationRepresentation","Error","segmentationRepresentationUID","segmentationId","type","getActiveSegmentIndex","segmentsLocked","getLockedSegments","segmentColor","color","getColorForSegmentIndex","representationData","labelmapData","Labelmap","annotation","highlighted","invalidated","metadata","FrameOfReferenceUID","getFrameOfReferenceUID","referencedImageId","toolName","getToolName","data","handles","points","activeHandleIndex","viewportIdsToRender","editData","handleIndex","movingTextBox","newAnnotation","hasMoved","volumeId","segmentation","getVolume","referencedVolumeId","imageIdReferenceMap","_activateDraw","preventDefault","_dragCallback","worldToCanvas","canvasToWorld","bottomLeftCanvas","bottomRightCanvas","topLeftCanvas","topRightCanvas","bottomLeftWorld","bottomRightWorld","topLeftWorld","topRightWorld","_endCallback","_deactivateDraw","operationData","applyActiveStrategy","addEventListener","MOUSE_UP","MOUSE_DRAG","MOUSE_MOVE","MOUSE_CLICK","TOUCH_END","TOUCH_DRAG","TOUCH_TAP","removeEventListener","renderAnnotation","svgDrawingHelper","renderStatus","toolMetadata","annotationUID","canvasCoordinates","map","p","slice","getRenderingEngine","console","warn","rectangleUID"],"sources":["../../../../src/tools/segmentation/RectangleScissorsTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}