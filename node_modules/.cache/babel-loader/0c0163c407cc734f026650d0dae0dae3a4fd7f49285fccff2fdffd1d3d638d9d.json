{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkCellArray from '../../Common/Core/CellArray.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// prettier-ignore\nconst LINE_ARRAY = [2, 0, 1, 2, 2, 3, 2, 4, 5, 2, 6, 7, 2, 0, 2, 2, 1, 3, 2, 4, 6, 2, 5, 7, 2, 0, 4, 2, 1, 5, 2, 2, 6, 2, 3, 7];\n\n// prettier-ignore\nconst POLY_ARRAY = [4, 0, 1, 3, 2, 4, 4, 6, 7, 5, 4, 8, 10, 11, 9, 4, 12, 13, 15, 14, 4, 16, 18, 19, 17, 4, 20, 21, 23, 22];\n\n// ----------------------------------------------------------------------------\n// vtkCubeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCubeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeSource');\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    const polyData = vtkPolyData.newInstance();\n    outData[0] = polyData;\n    const numberOfPoints = 24;\n\n    // Define points\n    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    polyData.getPoints().setData(points, 3);\n    const normals = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    const normalArray = vtkDataArray.newInstance({\n      name: 'Normals',\n      values: normals,\n      numberOfComponents: 3\n    });\n    polyData.getPointData().setNormals(normalArray);\n    let tcdim = 2;\n    if (model.generate3DTextureCoordinates === true) {\n      tcdim = 3;\n    }\n    const textureCoords = macro.newTypedArray(model.pointType, numberOfPoints * tcdim);\n    const tcoords = vtkDataArray.newInstance({\n      name: 'TextureCoordinates',\n      values: textureCoords,\n      numberOfComponents: tcdim\n    });\n    polyData.getPointData().setTCoords(tcoords);\n    const x = [0.0, 0.0, 0.0];\n    const n = [0.0, 0.0, 0.0];\n    const tc = [0.0, 0.0];\n    let pointIndex = 0;\n    x[0] = -model.xLength / 2.0;\n    n[0] = -1.0;\n    n[1] = 0.0;\n    n[2] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[1] = -model.yLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[1] = x[1] + 0.5;\n        x[2] = -model.zLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[0] = (x[2] + 0.5) * (1 - 2 * i);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * i - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;\n          }\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n        x[1] += model.yLength;\n      }\n      x[0] += model.xLength;\n      n[0] += 2.0;\n    }\n    x[1] = -model.yLength / 2.0;\n    n[1] = -1.0;\n    n[0] = 0.0;\n    n[2] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[0] = -model.xLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[0] = (x[0] + 0.5) * (2 * i - 1);\n        x[2] = -model.zLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[1] = (x[2] + 0.5) * -1;\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * i - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;\n          }\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n        x[0] += model.xLength;\n      }\n      x[1] += model.yLength;\n      n[1] += 2.0;\n    }\n    x[2] = -model.zLength / 2.0;\n    n[2] = -1.0;\n    n[0] = 0.0;\n    n[1] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[1] = -model.yLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[1] = x[1] + 0.5;\n        x[0] = -model.xLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[0] = (x[0] + 0.5) * (2 * i - 1);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * k - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * i - 1;\n          }\n          pointIndex++;\n          x[0] += model.xLength;\n        }\n        x[1] += model.yLength;\n      }\n      x[2] += model.zLength;\n      n[2] += 2.0;\n    }\n\n    // Apply rotation to the points coordinates and normals\n    if (model.rotations) {\n      vtkMatrixBuilder.buildFromDegree().rotateX(model.rotations[0]).rotateY(model.rotations[1]).rotateZ(model.rotations[2]).apply(points).apply(normals);\n    }\n\n    // Apply transformation to the points coordinates\n    if (model.center) {\n      vtkMatrixBuilder.buildFromRadian().translate(...model.center).apply(points);\n    }\n\n    // Apply optional additionally specified matrix transformation\n    if (model.matrix) {\n      vtkMatrixBuilder.buildFromRadian().setMatrix(model.matrix).apply(points);\n\n      // prettier-ignore\n      const rotMatrix = [model.matrix[0], model.matrix[1], model.matrix[2], 0, model.matrix[4], model.matrix[5], model.matrix[6], 0, model.matrix[8], model.matrix[9], model.matrix[10], 0, 0, 0, 0, 1];\n      vtkMatrixBuilder.buildFromRadian().setMatrix(rotMatrix).apply(normals);\n    }\n\n    // Lastly, generate the necessary cell arrays.\n    if (model.generateFaces) {\n      polyData.getPolys().deepCopy(model._polys);\n    } else {\n      polyData.getPolys().initialize();\n    }\n    if (model.generateLines) {\n      polyData.getLines().deepCopy(model._lineCells);\n      // only set normals for faces, not for lines.\n      polyData.getPointData().setNormals(null);\n    } else {\n      polyData.getLines().initialize();\n    }\n    polyData.modified();\n  }\n  publicAPI.setBounds = function () {\n    let boundsArray = [];\n    if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {\n      boundsArray = arguments.length <= 0 ? undefined : arguments[0];\n    } else {\n      for (let i = 0; i < arguments.length; i++) {\n        boundsArray.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n    }\n    if (boundsArray.length !== 6) {\n      return;\n    }\n    publicAPI.setXLength(boundsArray[1] - boundsArray[0]);\n    publicAPI.setYLength(boundsArray[3] - boundsArray[2]);\n    publicAPI.setZLength(boundsArray[5] - boundsArray[4]);\n    publicAPI.setCenter([(boundsArray[0] + boundsArray[1]) / 2.0, (boundsArray[2] + boundsArray[3]) / 2.0, (boundsArray[4] + boundsArray[5]) / 2.0]);\n  };\n\n  // Expose methods\n  publicAPI.requestData = requestData;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  xLength: 1.0,\n  yLength: 1.0,\n  zLength: 1.0,\n  pointType: 'Float64Array',\n  generate3DTextureCoordinates: false,\n  generateFaces: true,\n  generateLines: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['xLength', 'yLength', 'zLength', 'generate3DTextureCoordinates', 'generateFaces', 'generateLines']);\n  macro.setGetArray(publicAPI, model, ['center', 'rotations'], 3);\n  macro.setGetArray(publicAPI, model, ['matrix'], 16);\n\n  // Internal persistent/static objects\n  model._polys = vtkCellArray.newInstance({\n    values: Uint16Array.from(POLY_ARRAY)\n  });\n  model._lineCells = vtkCellArray.newInstance({\n    values: Uint16Array.from(LINE_ARRAY)\n  });\n  macro.moveToProtected(publicAPI, model, ['polys', 'lineCells']);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCubeSource(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCubeSource');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCubeSource$1 = {\n  newInstance,\n  extend\n};\nexport { vtkCubeSource$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkCellArray","vtkDataArray","vtkPolyData","vtkMatrixBuilder","LINE_ARRAY","POLY_ARRAY","vtkCubeSource","publicAPI","model","classHierarchy","push","requestData","inData","outData","deleted","polyData","newInstance","numberOfPoints","points","newTypedArray","pointType","getPoints","setData","normals","normalArray","name","values","numberOfComponents","getPointData","setNormals","tcdim","generate3DTextureCoordinates","textureCoords","tcoords","setTCoords","x","n","tc","pointIndex","xLength","i","yLength","j","zLength","k","rotations","buildFromDegree","rotateX","rotateY","rotateZ","apply","center","buildFromRadian","translate","matrix","setMatrix","rotMatrix","generateFaces","getPolys","deepCopy","_polys","initialize","generateLines","getLines","_lineCells","modified","setBounds","boundsArray","Array","isArray","arguments","length","undefined","setXLength","setYLength","setZLength","setCenter","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","setGet","setGetArray","Uint16Array","from","moveToProtected","algo","vtkCubeSource$1","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Filters/Sources/CubeSource.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkCellArray from '../../Common/Core/CellArray.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// prettier-ignore\nconst LINE_ARRAY = [2, 0, 1, 2, 2, 3, 2, 4, 5, 2, 6, 7, 2, 0, 2, 2, 1, 3, 2, 4, 6, 2, 5, 7, 2, 0, 4, 2, 1, 5, 2, 2, 6, 2, 3, 7];\n\n// prettier-ignore\nconst POLY_ARRAY = [4, 0, 1, 3, 2, 4, 4, 6, 7, 5, 4, 8, 10, 11, 9, 4, 12, 13, 15, 14, 4, 16, 18, 19, 17, 4, 20, 21, 23, 22];\n\n// ----------------------------------------------------------------------------\n// vtkCubeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCubeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeSource');\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    const polyData = vtkPolyData.newInstance();\n    outData[0] = polyData;\n    const numberOfPoints = 24;\n\n    // Define points\n    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    polyData.getPoints().setData(points, 3);\n    const normals = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    const normalArray = vtkDataArray.newInstance({\n      name: 'Normals',\n      values: normals,\n      numberOfComponents: 3\n    });\n    polyData.getPointData().setNormals(normalArray);\n    let tcdim = 2;\n    if (model.generate3DTextureCoordinates === true) {\n      tcdim = 3;\n    }\n    const textureCoords = macro.newTypedArray(model.pointType, numberOfPoints * tcdim);\n    const tcoords = vtkDataArray.newInstance({\n      name: 'TextureCoordinates',\n      values: textureCoords,\n      numberOfComponents: tcdim\n    });\n    polyData.getPointData().setTCoords(tcoords);\n    const x = [0.0, 0.0, 0.0];\n    const n = [0.0, 0.0, 0.0];\n    const tc = [0.0, 0.0];\n    let pointIndex = 0;\n    x[0] = -model.xLength / 2.0;\n    n[0] = -1.0;\n    n[1] = 0.0;\n    n[2] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[1] = -model.yLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[1] = x[1] + 0.5;\n        x[2] = -model.zLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[0] = (x[2] + 0.5) * (1 - 2 * i);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * i - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;\n          }\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n        x[1] += model.yLength;\n      }\n      x[0] += model.xLength;\n      n[0] += 2.0;\n    }\n    x[1] = -model.yLength / 2.0;\n    n[1] = -1.0;\n    n[0] = 0.0;\n    n[2] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[0] = -model.xLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[0] = (x[0] + 0.5) * (2 * i - 1);\n        x[2] = -model.zLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[1] = (x[2] + 0.5) * -1;\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * i - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;\n          }\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n        x[0] += model.xLength;\n      }\n      x[1] += model.yLength;\n      n[1] += 2.0;\n    }\n    x[2] = -model.zLength / 2.0;\n    n[2] = -1.0;\n    n[0] = 0.0;\n    n[1] = 0.0;\n    for (let i = 0; i < 2; i++) {\n      x[1] = -model.yLength / 2.0;\n      for (let j = 0; j < 2; j++) {\n        tc[1] = x[1] + 0.5;\n        x[0] = -model.xLength / 2.0;\n        for (let k = 0; k < 2; k++) {\n          tc[0] = (x[0] + 0.5) * (2 * i - 1);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * k - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * i - 1;\n          }\n          pointIndex++;\n          x[0] += model.xLength;\n        }\n        x[1] += model.yLength;\n      }\n      x[2] += model.zLength;\n      n[2] += 2.0;\n    }\n\n    // Apply rotation to the points coordinates and normals\n    if (model.rotations) {\n      vtkMatrixBuilder.buildFromDegree().rotateX(model.rotations[0]).rotateY(model.rotations[1]).rotateZ(model.rotations[2]).apply(points).apply(normals);\n    }\n\n    // Apply transformation to the points coordinates\n    if (model.center) {\n      vtkMatrixBuilder.buildFromRadian().translate(...model.center).apply(points);\n    }\n\n    // Apply optional additionally specified matrix transformation\n    if (model.matrix) {\n      vtkMatrixBuilder.buildFromRadian().setMatrix(model.matrix).apply(points);\n\n      // prettier-ignore\n      const rotMatrix = [model.matrix[0], model.matrix[1], model.matrix[2], 0, model.matrix[4], model.matrix[5], model.matrix[6], 0, model.matrix[8], model.matrix[9], model.matrix[10], 0, 0, 0, 0, 1];\n      vtkMatrixBuilder.buildFromRadian().setMatrix(rotMatrix).apply(normals);\n    }\n\n    // Lastly, generate the necessary cell arrays.\n    if (model.generateFaces) {\n      polyData.getPolys().deepCopy(model._polys);\n    } else {\n      polyData.getPolys().initialize();\n    }\n    if (model.generateLines) {\n      polyData.getLines().deepCopy(model._lineCells);\n      // only set normals for faces, not for lines.\n      polyData.getPointData().setNormals(null);\n    } else {\n      polyData.getLines().initialize();\n    }\n    polyData.modified();\n  }\n  publicAPI.setBounds = function () {\n    let boundsArray = [];\n    if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {\n      boundsArray = arguments.length <= 0 ? undefined : arguments[0];\n    } else {\n      for (let i = 0; i < arguments.length; i++) {\n        boundsArray.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n    }\n    if (boundsArray.length !== 6) {\n      return;\n    }\n    publicAPI.setXLength(boundsArray[1] - boundsArray[0]);\n    publicAPI.setYLength(boundsArray[3] - boundsArray[2]);\n    publicAPI.setZLength(boundsArray[5] - boundsArray[4]);\n    publicAPI.setCenter([(boundsArray[0] + boundsArray[1]) / 2.0, (boundsArray[2] + boundsArray[3]) / 2.0, (boundsArray[4] + boundsArray[5]) / 2.0]);\n  };\n\n  // Expose methods\n  publicAPI.requestData = requestData;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  xLength: 1.0,\n  yLength: 1.0,\n  zLength: 1.0,\n  pointType: 'Float64Array',\n  generate3DTextureCoordinates: false,\n  generateFaces: true,\n  generateLines: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['xLength', 'yLength', 'zLength', 'generate3DTextureCoordinates', 'generateFaces', 'generateLines']);\n  macro.setGetArray(publicAPI, model, ['center', 'rotations'], 3);\n  macro.setGetArray(publicAPI, model, ['matrix'], 16);\n\n  // Internal persistent/static objects\n  model._polys = vtkCellArray.newInstance({\n    values: Uint16Array.from(POLY_ARRAY)\n  });\n  model._lineCells = vtkCellArray.newInstance({\n    values: Uint16Array.from(LINE_ARRAY)\n  });\n  macro.moveToProtected(publicAPI, model, ['polys', 'lineCells']);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCubeSource(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCubeSource');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCubeSource$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkCubeSource$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}