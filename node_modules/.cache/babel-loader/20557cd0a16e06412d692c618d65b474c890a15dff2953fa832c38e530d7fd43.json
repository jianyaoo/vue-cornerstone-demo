{"ast":null,"code":"import { vec3 } from 'gl-matrix';\nimport { planar } from '.';\nimport { metaData } from '..';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n  const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n  return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n  const imageIds = viewport.getImageIds();\n  const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n  if (imageIds.length === 0) {\n    return null;\n  }\n  const getDistance = imageId => {\n    const planeMetadata = getPlaneMetadata(imageId);\n    if (!planeMetadata) {\n      return null;\n    }\n    const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n    const distance = planar.planeDistanceToPoint(plane, point);\n    return distance;\n  };\n  const closestStack = {\n    distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n    index: currentImageIdIndex\n  };\n  const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n  for (let i = 0; i < higherImageIds.length; i++) {\n    const id = higherImageIds[i];\n    const distance = getDistance(id);\n    if (distance === null) {\n      continue;\n    }\n    if (distance <= closestStack.distance) {\n      closestStack.distance = distance;\n      closestStack.index = i + currentImageIdIndex + 1;\n    } else {\n      break;\n    }\n  }\n  const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n  for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n    const id = lowerImageIds[i];\n    const distance = getDistance(id);\n    if (distance === null || distance === closestStack.distance) {\n      continue;\n    }\n    if (distance < closestStack.distance) {\n      closestStack.distance = distance;\n      closestStack.index = i;\n    } else {\n      break;\n    }\n  }\n  return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n  const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n  if (!targetImagePlane || !(targetImagePlane.rowCosines instanceof Array && targetImagePlane.rowCosines.length === 3) || !(targetImagePlane.columnCosines instanceof Array && targetImagePlane.columnCosines.length === 3) || !(targetImagePlane.imagePositionPatient instanceof Array && targetImagePlane.imagePositionPatient.length === 3)) {\n    return null;\n  }\n  const {\n    rowCosines,\n    columnCosines,\n    imagePositionPatient\n  } = targetImagePlane;\n  const rowVec = vec3.set(vec3.create(), ...rowCosines);\n  const colVec = vec3.set(vec3.create(), ...columnCosines);\n  const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n  return {\n    rowCosines,\n    columnCosines,\n    imagePositionPatient,\n    planeNormal\n  };\n}","map":{"version":3,"names":["vec3","planar","metaData","getClosestStackImageIndexForPoint","point","viewport","minimalDistance","calculateMinimalDistanceForStackViewport","index","imageIds","getImageIds","currentImageIdIndex","getCurrentImageIdIndex","length","getDistance","imageId","planeMetadata","getPlaneMetadata","plane","planeEquation","planeNormal","imagePositionPatient","distance","planeDistanceToPoint","closestStack","Infinity","higherImageIds","slice","i","id","lowerImageIds","targetImagePlane","get","rowCosines","Array","columnCosines","rowVec","set","create","colVec","cross"],"sources":["../../../src/utilities/getClosestStackImageIndexForPoint.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}