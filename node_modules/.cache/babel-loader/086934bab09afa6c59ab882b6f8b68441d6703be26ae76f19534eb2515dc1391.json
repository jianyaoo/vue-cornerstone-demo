{"ast":null,"code":"import { cache, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\nclass SphereScissorsTool extends BaseTool {\n  constructor(toolProps = {}, defaultToolProps = {\n    supportedInteractionTypes: ['Mouse', 'Touch'],\n    configuration: {\n      strategies: {\n        FILL_INSIDE: fillInsideSphere,\n        ERASE_INSIDE: eraseInsideSphere\n      },\n      defaultStrategy: 'FILL_INSIDE',\n      activeStrategy: 'FILL_INSIDE'\n    }\n  }) {\n    super(toolProps, defaultToolProps);\n    this.preMouseDownCallback = evt => {\n      if (this.isDrawing === true) {\n        return;\n      }\n      const eventDetail = evt.detail;\n      const {\n        currentPoints,\n        element\n      } = eventDetail;\n      const worldPos = currentPoints.world;\n      const canvasPos = currentPoints.canvas;\n      const enabledElement = getEnabledElement(element);\n      const {\n        viewport,\n        renderingEngine\n      } = enabledElement;\n      this.isDrawing = true;\n      const camera = viewport.getCamera();\n      const {\n        viewPlaneNormal,\n        viewUp\n      } = camera;\n      const toolGroupId = this.toolGroupId;\n      const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n      if (!activeSegmentationRepresentation) {\n        throw new Error('No active segmentation detected, create one before using scissors tool');\n      }\n      const {\n        segmentationRepresentationUID,\n        segmentationId\n      } = activeSegmentationRepresentation;\n      const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n      const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n      const segmentColor = segmentationConfig.color.getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);\n      this.isDrawing = true;\n      const annotation = {\n        metadata: {\n          viewPlaneNormal: [...viewPlaneNormal],\n          viewUp: [...viewUp],\n          FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n          referencedImageId: '',\n          toolName: this.getToolName(),\n          segmentColor\n        },\n        data: {\n          invalidated: true,\n          handles: {\n            points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n            activeHandleIndex: null\n          },\n          cachedStats: {},\n          highlighted: true\n        }\n      };\n      const viewportIdsToRender = [viewport.id];\n      this.editData = {\n        annotation,\n        centerCanvas: canvasPos,\n        segmentationRepresentationUID,\n        segmentIndex,\n        segmentationId,\n        segmentsLocked,\n        segmentColor,\n        toolGroupId,\n        viewportIdsToRender,\n        handleIndex: 3,\n        movingTextBox: false,\n        newAnnotation: true,\n        hasMoved: false\n      };\n      const {\n        representationData\n      } = getSegmentation(segmentationId);\n      const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n      if (isVolumeSegmentation(labelmapData)) {\n        const {\n          volumeId\n        } = labelmapData;\n        const segmentation = cache.getVolume(volumeId);\n        this.editData = {\n          ...this.editData,\n          volumeId,\n          referencedVolumeId: segmentation.referencedVolumeId\n        };\n      } else {\n        const {\n          imageIdReferenceMap\n        } = labelmapData;\n        this.editData = {\n          ...this.editData,\n          imageIdReferenceMap\n        };\n      }\n      this._activateDraw(element);\n      hideElementCursor(element);\n      evt.preventDefault();\n      triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n      return true;\n    };\n    this._dragCallback = evt => {\n      this.isDrawing = true;\n      const eventDetail = evt.detail;\n      const {\n        element\n      } = eventDetail;\n      const {\n        currentPoints\n      } = eventDetail;\n      const currentCanvasPoints = currentPoints.canvas;\n      const enabledElement = getEnabledElement(element);\n      const {\n        renderingEngine,\n        viewport\n      } = enabledElement;\n      const {\n        canvasToWorld\n      } = viewport;\n      const {\n        annotation,\n        viewportIdsToRender,\n        centerCanvas\n      } = this.editData;\n      const {\n        data\n      } = annotation;\n      const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n      const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n      const radius = Math.sqrt(dX * dX + dY * dY);\n      const bottomCanvas = [centerCanvas[0], centerCanvas[1] + radius];\n      const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n      const leftCanvas = [centerCanvas[0] - radius, centerCanvas[1]];\n      const rightCanvas = [centerCanvas[0] + radius, centerCanvas[1]];\n      data.handles.points = [canvasToWorld(bottomCanvas), canvasToWorld(topCanvas), canvasToWorld(leftCanvas), canvasToWorld(rightCanvas)];\n      annotation.invalidated = true;\n      this.editData.hasMoved = true;\n      triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    };\n    this._endCallback = evt => {\n      const eventDetail = evt.detail;\n      const {\n        element\n      } = eventDetail;\n      const {\n        annotation,\n        newAnnotation,\n        hasMoved,\n        segmentIndex,\n        segmentationRepresentationUID,\n        segmentsLocked\n      } = this.editData;\n      const {\n        data\n      } = annotation;\n      const {\n        viewPlaneNormal,\n        viewUp\n      } = annotation.metadata;\n      if (newAnnotation && !hasMoved) {\n        return;\n      }\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n      this._deactivateDraw(element);\n      resetElementCursor(element);\n      const enabledElement = getEnabledElement(element);\n      const operationData = {\n        ...this.editData,\n        points: data.handles.points,\n        segmentIndex,\n        segmentationRepresentationUID,\n        segmentsLocked,\n        viewPlaneNormal,\n        viewUp\n      };\n      this.editData = null;\n      this.isDrawing = false;\n      this.applyActiveStrategy(enabledElement, operationData);\n    };\n    this._activateDraw = element => {\n      element.addEventListener(Events.MOUSE_UP, this._endCallback);\n      element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n      element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n      element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n      element.addEventListener(Events.TOUCH_END, this._endCallback);\n      element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n      element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    };\n    this._deactivateDraw = element => {\n      element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n      element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n      element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n      element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n      element.removeEventListener(Events.TOUCH_END, this._endCallback);\n      element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n      element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n    };\n    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n      let renderStatus = false;\n      if (!this.editData) {\n        return renderStatus;\n      }\n      const {\n        viewport\n      } = enabledElement;\n      const {\n        viewportIdsToRender\n      } = this.editData;\n      if (!viewportIdsToRender.includes(viewport.id)) {\n        return renderStatus;\n      }\n      const {\n        annotation\n      } = this.editData;\n      const toolMetadata = annotation.metadata;\n      const annotationUID = annotation.annotationUID;\n      const data = annotation.data;\n      const {\n        points\n      } = data.handles;\n      const canvasCoordinates = points.map(p => viewport.worldToCanvas(p));\n      const bottom = canvasCoordinates[0];\n      const top = canvasCoordinates[1];\n      const center = [Math.floor((bottom[0] + top[0]) / 2), Math.floor((bottom[1] + top[1]) / 2)];\n      const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n      const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n      const circleUID = '0';\n      drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n        color\n      });\n      renderStatus = true;\n      return renderStatus;\n    };\n  }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;","map":{"version":3,"names":["cache","getEnabledElement","BaseTool","fillInsideSphere","eraseInsideSphere","Events","SegmentationRepresentations","drawCircle","drawCircleSvg","resetElementCursor","hideElementCursor","triggerAnnotationRenderForViewportIds","config","segmentationConfig","segmentLocking","segmentIndex","segmentIndexController","activeSegmentation","getSegmentation","isVolumeSegmentation","SphereScissorsTool","constructor","toolProps","defaultToolProps","supportedInteractionTypes","configuration","strategies","FILL_INSIDE","ERASE_INSIDE","defaultStrategy","activeStrategy","preMouseDownCallback","evt","isDrawing","eventDetail","detail","currentPoints","element","worldPos","world","canvasPos","canvas","enabledElement","viewport","renderingEngine","camera","getCamera","viewPlaneNormal","viewUp","toolGroupId","activeSegmentationRepresentation","getActiveSegmentationRepresentation","Error","segmentationRepresentationUID","segmentationId","getActiveSegmentIndex","segmentsLocked","getLockedSegments","segmentColor","color","getColorForSegmentIndex","annotation","metadata","FrameOfReferenceUID","getFrameOfReferenceUID","referencedImageId","toolName","getToolName","data","invalidated","handles","points","activeHandleIndex","cachedStats","highlighted","viewportIdsToRender","id","editData","centerCanvas","handleIndex","movingTextBox","newAnnotation","hasMoved","representationData","labelmapData","Labelmap","volumeId","segmentation","getVolume","referencedVolumeId","imageIdReferenceMap","_activateDraw","preventDefault","_dragCallback","currentCanvasPoints","canvasToWorld","dX","Math","abs","dY","radius","sqrt","bottomCanvas","topCanvas","leftCanvas","rightCanvas","_endCallback","_deactivateDraw","operationData","applyActiveStrategy","addEventListener","MOUSE_UP","MOUSE_DRAG","MOUSE_CLICK","MOUSE_MOVE","TOUCH_END","TOUCH_TAP","TOUCH_DRAG","removeEventListener","renderAnnotation","svgDrawingHelper","renderStatus","includes","toolMetadata","annotationUID","canvasCoordinates","map","p","worldToCanvas","bottom","top","center","floor","slice","getRenderingEngine","console","warn","circleUID"],"sources":["../../../../src/tools/segmentation/SphereScissorsTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}