{"ast":null,"code":"import { m as macro } from '../../macros2.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n\nfunction translucentShaderReplacement(shaders) {\n  const substituteRes = vtkShaderProgram.substitute(shaders.Fragment, '//VTK::RenderPassFragmentShader::Impl', `\n      float weight = gl_FragData[0].a * pow(max(1.1 - gl_FragCoord.z, 0.0), 2.0);\n      gl_FragData[0] = vec4(gl_FragData[0].rgb*weight, gl_FragData[0].a);\n      gl_FragData[1].r = weight;\n    `, false);\n  shaders.Fragment = substituteRes.result;\n}\nconst oitpFragTemplate = `//VTK::System::Dec\n\nin vec2 tcoord;\n\nuniform sampler2D translucentRTexture;\nuniform sampler2D translucentRGBATexture;\n\n// the output of this shader\n//VTK::Output::Dec\n\nvoid main()\n{\n  vec4 t1Color = texture(translucentRGBATexture, tcoord);\n  float t2Color = texture(translucentRTexture, tcoord).r;\n  gl_FragData[0] = vec4(t1Color.rgb/max(t2Color,0.01), 1.0 - t1Color.a);\n}\n`;\nfunction vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLOrderIndependentTranslucentPass');\n\n  // build vertices etc\n  publicAPI.createVertexBuffer = () => {\n    // 4 corner points in clipping space in order (x, y, z) where z is always set to -1\n    // prettier-ignore\n    const ptsArray = new Float32Array([-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1]);\n\n    // 4 corresponding corner points in texture space in order (x, y)\n    const tcoordArray = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n\n    // a square defined as cell relation ship in order (cell_size, v1, v2, v3, v4)\n    const cellArray = new Uint16Array([4, 0, 1, 3, 2]);\n    const points = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: ptsArray\n    });\n    points.setName('points');\n    const tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordArray\n    });\n    tcoords.setName('tcoords');\n    const cells = vtkDataArray.newInstance({\n      numberOfComponents: 1,\n      values: cellArray\n    });\n    model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n      points,\n      tcoords,\n      cellOffset: 0\n    });\n    model.VBOBuildTime.modified();\n  };\n  publicAPI.createFramebuffer = viewNode => {\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n    model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n    model.framebuffer.setOpenGLRenderWindow(viewNode);\n    model.framebuffer.create(...size);\n    model.framebuffer.saveCurrentBindingsAndBuffers();\n    model.framebuffer.bind();\n    model.translucentRGBATexture = vtkOpenGLTexture.newInstance();\n    model.translucentRGBATexture.setInternalFormat(gl.RGBA16F);\n    model.translucentRGBATexture.setFormat(gl.RGBA);\n    model.translucentRGBATexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRGBATexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRGBATexture.create2DFromRaw(size[0], size[1], 4, 'Float32Array', null);\n    model.translucentRTexture = vtkOpenGLTexture.newInstance();\n    model.translucentRTexture.setInternalFormat(gl.R16F);\n    model.translucentRTexture.setFormat(gl.RED);\n    model.translucentRTexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRTexture.create2DFromRaw(size[0], size[1], 1, 'Float32Array', null);\n    model.translucentZTexture = vtkOpenGLTexture.newInstance();\n    model.translucentZTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentZTexture.createDepthFromRaw(size[0], size[1], 'Float32Array', null);\n    model.framebuffer.setColorBuffer(model.translucentRGBATexture, 0);\n    model.framebuffer.setColorBuffer(model.translucentRTexture, 1);\n    model.framebuffer.setDepthBuffer(model.translucentZTexture);\n  };\n  publicAPI.createCopyShader = viewNode => {\n    model.copyShader = viewNode.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'attribute vec2 tcoordTC;', 'varying vec2 tcoord;', 'void main() { tcoord = tcoordTC; gl_Position = vertexDC; }'].join('\\n'), oitpFragTemplate, '');\n  };\n  publicAPI.createVBO = viewNode => {\n    const gl = viewNode.getContext();\n    model.tris.setOpenGLRenderWindow(viewNode);\n    publicAPI.createVertexBuffer();\n    const program = model.copyShader;\n    // prepare the vertex and triangle data for the image plane to render to\n\n    model.tris.getCABO().bind();\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 3, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'tcoordTC', model.tris.getCABO().getTCoordOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 2, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n  };\n  publicAPI.traverse = (viewNode, renNode, forwardPass) => {\n    if (model.deleted) {\n      return;\n    }\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n\n    // if we lack the webgl2 and half floatsupport just do\n    // basic alpha blending\n    model._supported = false;\n    if (renNode.getSelector() || !gl || !viewNode.getWebgl2() || !gl.getExtension('EXT_color_buffer_half_float') && !gl.getExtension('EXT_color_buffer_float')) {\n      publicAPI.setCurrentOperation('translucentPass');\n      renNode.traverse(publicAPI);\n      return;\n    }\n    model._supported = true;\n\n    // prepare framebuffer // allocate framebuffer if needed and bind it\n    if (model.framebuffer === null) {\n      publicAPI.createFramebuffer(viewNode);\n    } else {\n      const fbSize = model.framebuffer.getSize();\n      if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.releaseGraphicsResources();\n        model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n        model.translucentRTexture.releaseGraphicsResources(viewNode);\n        model.translucentZTexture.releaseGraphicsResources(viewNode);\n        publicAPI.createFramebuffer(viewNode);\n      } else {\n        // store framebuffer bindings to restore them later\n        model.framebuffer.saveCurrentBindingsAndBuffers();\n        model.framebuffer.bind();\n      }\n    }\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);\n    gl.clearBufferfv(gl.DEPTH, 0, [1.0]);\n    gl.colorMask(false, false, false, false);\n\n    // rerender the opaque pass to set the depth buffer\n    // TODO remove when webgl1 is deprecated and instead\n    // have the forward pass use a texture backed zbuffer\n    if (forwardPass.getOpaqueActorCount() > 0) {\n      // Don't use zBufferPass as it will also render the depth of translucent actors\n      forwardPass.setCurrentOperation('opaqueZBufferPass');\n      renNode.traverse(forwardPass);\n    }\n    gl.colorMask(true, true, true, true);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n\n    // make sure to clear the entire framebuffer as we will\n    // be blitting the entire thing all of it needs good initial values\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);\n    gl.clearBufferfv(gl.COLOR, 1, [0.0, 0.0, 0.0, 0.0]);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n\n    // basic gist is we accumulate color into RGB We compute final opacity\n    // into A We store accumulated opacity into R of the R texture.\n    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);\n\n    // now do the translucent rendering\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.traverse(publicAPI);\n    gl.drawBuffers([gl.NONE]);\n    model.framebuffer.restorePreviousBindingsAndBuffers();\n    // gl.drawBuffers([gl.BACK]);\n\n    // make sure the copy shader is ready\n    if (model.copyShader === null) {\n      publicAPI.createCopyShader(viewNode);\n    } else {\n      viewNode.getShaderCache().readyShaderProgram(model.copyShader);\n    }\n\n    // make sure we have a VAO\n    if (!model.copyVAO) {\n      model.copyVAO = vtkVertexArrayObject.newInstance();\n      model.copyVAO.setOpenGLRenderWindow(viewNode);\n    }\n    model.copyVAO.bind();\n\n    // make sure the VBO is up to date\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime()) {\n      publicAPI.createVBO(viewNode);\n    }\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.depthMask(false);\n    gl.depthFunc(gl.ALWAYS);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n\n    // activate texture\n    model.translucentRGBATexture.activate();\n    model.copyShader.setUniformi('translucentRGBATexture', model.translucentRGBATexture.getTextureUnit());\n    model.translucentRTexture.activate();\n    model.copyShader.setUniformi('translucentRTexture', model.translucentRTexture.getTextureUnit());\n\n    // render quad\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    gl.depthMask(true);\n    gl.depthFunc(gl.LEQUAL);\n    model.translucentRGBATexture.deactivate();\n    model.translucentRTexture.deactivate();\n  };\n  publicAPI.getShaderReplacement = () => {\n    if (model._supported) {\n      return translucentShaderReplacement;\n    }\n    return null;\n  };\n  publicAPI.releaseGraphicsResources = viewNode => {\n    if (model.framebuffer) {\n      model.framebuffer.releaseGraphicsResources(viewNode);\n      model.framebuffer = null;\n    }\n    if (model.translucentRGBATexture) {\n      model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n      model.translucentRGBATexture = null;\n    }\n    if (model.translucentRTexture) {\n      model.translucentRTexture.releaseGraphicsResources(viewNode);\n      model.translucentRTexture = null;\n    }\n    if (model.translucentZTexture) {\n      model.translucentZTexture.releaseGraphicsResources(viewNode);\n      model.translucentZTexture = null;\n    }\n    if (model.copyVAO) {\n      model.copyVAO.releaseGraphicsResources(viewNode);\n      model.copyVAO = null;\n    }\n    if (model.copyShader) {\n      model.copyShader.releaseGraphicsResources(viewNode);\n      model.copyShader = null;\n    }\n    if (model.tris) {\n      model.tris.releaseGraphicsResources(viewNode);\n      model.tris = null;\n    }\n    publicAPI.modified();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  framebuffer: null,\n  copyShader: null,\n  tris: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  macro.get(publicAPI, model, ['framebuffer']);\n\n  // Object methods\n  vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLOrderIndependentTranslucentPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkOpenGLOrderIndependentTranslucentPass$1 = {\n  newInstance,\n  extend\n};\nexport { vtkOpenGLOrderIndependentTranslucentPass$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkOpenGLTexture","vtkOpenGLFramebuffer","vtkRenderPass","vtkDataArray","vtkHelper","vtkProperty","vtkShaderProgram","vtkVertexArrayObject","Representation","vtkErrorMacro","translucentShaderReplacement","shaders","substituteRes","substitute","Fragment","result","oitpFragTemplate","vtkOpenGLOrderIndependentTranslucentPass","publicAPI","model","classHierarchy","push","createVertexBuffer","ptsArray","Float32Array","tcoordArray","cellArray","Uint16Array","points","newInstance","numberOfComponents","values","setName","tcoords","cells","tris","getCABO","createVBO","SURFACE","cellOffset","VBOBuildTime","modified","createFramebuffer","viewNode","size","getSize","gl","getContext","framebuffer","setOpenGLRenderWindow","create","saveCurrentBindingsAndBuffers","bind","translucentRGBATexture","setInternalFormat","RGBA16F","setFormat","RGBA","setOpenGLDataType","HALF_FLOAT","create2DFromRaw","translucentRTexture","R16F","RED","translucentZTexture","createDepthFromRaw","setColorBuffer","setDepthBuffer","createCopyShader","copyShader","getShaderCache","readyShaderProgramArray","join","program","copyVAO","addAttributeArray","getVertexOffset","getStride","FLOAT","FALSE","getTCoordOffset","traverse","renNode","forwardPass","deleted","_supported","getSelector","getWebgl2","getExtension","setCurrentOperation","fbSize","releaseGraphicsResources","drawBuffers","COLOR_ATTACHMENT0","clearBufferfv","COLOR","DEPTH","colorMask","getOpaqueActorCount","COLOR_ATTACHMENT1","viewport","scissor","enable","DEPTH_TEST","BLEND","blendFuncSeparate","ONE","ZERO","ONE_MINUS_SRC_ALPHA","NONE","restorePreviousBindingsAndBuffers","readyShaderProgram","getMTime","SRC_ALPHA","depthMask","depthFunc","ALWAYS","activate","setUniformi","getTextureUnit","drawArrays","TRIANGLES","getElementCount","LEQUAL","deactivate","getShaderReplacement","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","mtime","get","vtkOpenGLOrderIndependentTranslucentPass$1","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/OpenGL/OrderIndependentTranslucentPass.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\n\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n\nfunction translucentShaderReplacement(shaders) {\n  const substituteRes = vtkShaderProgram.substitute(shaders.Fragment, '//VTK::RenderPassFragmentShader::Impl', `\n      float weight = gl_FragData[0].a * pow(max(1.1 - gl_FragCoord.z, 0.0), 2.0);\n      gl_FragData[0] = vec4(gl_FragData[0].rgb*weight, gl_FragData[0].a);\n      gl_FragData[1].r = weight;\n    `, false);\n  shaders.Fragment = substituteRes.result;\n}\nconst oitpFragTemplate = `//VTK::System::Dec\n\nin vec2 tcoord;\n\nuniform sampler2D translucentRTexture;\nuniform sampler2D translucentRGBATexture;\n\n// the output of this shader\n//VTK::Output::Dec\n\nvoid main()\n{\n  vec4 t1Color = texture(translucentRGBATexture, tcoord);\n  float t2Color = texture(translucentRTexture, tcoord).r;\n  gl_FragData[0] = vec4(t1Color.rgb/max(t2Color,0.01), 1.0 - t1Color.a);\n}\n`;\nfunction vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLOrderIndependentTranslucentPass');\n\n  // build vertices etc\n  publicAPI.createVertexBuffer = () => {\n    // 4 corner points in clipping space in order (x, y, z) where z is always set to -1\n    // prettier-ignore\n    const ptsArray = new Float32Array([-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1]);\n\n    // 4 corresponding corner points in texture space in order (x, y)\n    const tcoordArray = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n\n    // a square defined as cell relation ship in order (cell_size, v1, v2, v3, v4)\n    const cellArray = new Uint16Array([4, 0, 1, 3, 2]);\n    const points = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: ptsArray\n    });\n    points.setName('points');\n    const tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordArray\n    });\n    tcoords.setName('tcoords');\n    const cells = vtkDataArray.newInstance({\n      numberOfComponents: 1,\n      values: cellArray\n    });\n    model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n      points,\n      tcoords,\n      cellOffset: 0\n    });\n    model.VBOBuildTime.modified();\n  };\n  publicAPI.createFramebuffer = viewNode => {\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n    model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n    model.framebuffer.setOpenGLRenderWindow(viewNode);\n    model.framebuffer.create(...size);\n    model.framebuffer.saveCurrentBindingsAndBuffers();\n    model.framebuffer.bind();\n    model.translucentRGBATexture = vtkOpenGLTexture.newInstance();\n    model.translucentRGBATexture.setInternalFormat(gl.RGBA16F);\n    model.translucentRGBATexture.setFormat(gl.RGBA);\n    model.translucentRGBATexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRGBATexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRGBATexture.create2DFromRaw(size[0], size[1], 4, 'Float32Array', null);\n    model.translucentRTexture = vtkOpenGLTexture.newInstance();\n    model.translucentRTexture.setInternalFormat(gl.R16F);\n    model.translucentRTexture.setFormat(gl.RED);\n    model.translucentRTexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRTexture.create2DFromRaw(size[0], size[1], 1, 'Float32Array', null);\n    model.translucentZTexture = vtkOpenGLTexture.newInstance();\n    model.translucentZTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentZTexture.createDepthFromRaw(size[0], size[1], 'Float32Array', null);\n    model.framebuffer.setColorBuffer(model.translucentRGBATexture, 0);\n    model.framebuffer.setColorBuffer(model.translucentRTexture, 1);\n    model.framebuffer.setDepthBuffer(model.translucentZTexture);\n  };\n  publicAPI.createCopyShader = viewNode => {\n    model.copyShader = viewNode.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'attribute vec2 tcoordTC;', 'varying vec2 tcoord;', 'void main() { tcoord = tcoordTC; gl_Position = vertexDC; }'].join('\\n'), oitpFragTemplate, '');\n  };\n  publicAPI.createVBO = viewNode => {\n    const gl = viewNode.getContext();\n    model.tris.setOpenGLRenderWindow(viewNode);\n    publicAPI.createVertexBuffer();\n    const program = model.copyShader;\n    // prepare the vertex and triangle data for the image plane to render to\n\n    model.tris.getCABO().bind();\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 3, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'tcoordTC', model.tris.getCABO().getTCoordOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 2, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n  };\n  publicAPI.traverse = (viewNode, renNode, forwardPass) => {\n    if (model.deleted) {\n      return;\n    }\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n\n    // if we lack the webgl2 and half floatsupport just do\n    // basic alpha blending\n    model._supported = false;\n    if (renNode.getSelector() || !gl || !viewNode.getWebgl2() || !gl.getExtension('EXT_color_buffer_half_float') && !gl.getExtension('EXT_color_buffer_float')) {\n      publicAPI.setCurrentOperation('translucentPass');\n      renNode.traverse(publicAPI);\n      return;\n    }\n    model._supported = true;\n\n    // prepare framebuffer // allocate framebuffer if needed and bind it\n    if (model.framebuffer === null) {\n      publicAPI.createFramebuffer(viewNode);\n    } else {\n      const fbSize = model.framebuffer.getSize();\n      if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.releaseGraphicsResources();\n        model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n        model.translucentRTexture.releaseGraphicsResources(viewNode);\n        model.translucentZTexture.releaseGraphicsResources(viewNode);\n        publicAPI.createFramebuffer(viewNode);\n      } else {\n        // store framebuffer bindings to restore them later\n        model.framebuffer.saveCurrentBindingsAndBuffers();\n        model.framebuffer.bind();\n      }\n    }\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);\n    gl.clearBufferfv(gl.DEPTH, 0, [1.0]);\n    gl.colorMask(false, false, false, false);\n\n    // rerender the opaque pass to set the depth buffer\n    // TODO remove when webgl1 is deprecated and instead\n    // have the forward pass use a texture backed zbuffer\n    if (forwardPass.getOpaqueActorCount() > 0) {\n      // Don't use zBufferPass as it will also render the depth of translucent actors\n      forwardPass.setCurrentOperation('opaqueZBufferPass');\n      renNode.traverse(forwardPass);\n    }\n    gl.colorMask(true, true, true, true);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n\n    // make sure to clear the entire framebuffer as we will\n    // be blitting the entire thing all of it needs good initial values\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);\n    gl.clearBufferfv(gl.COLOR, 1, [0.0, 0.0, 0.0, 0.0]);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n\n    // basic gist is we accumulate color into RGB We compute final opacity\n    // into A We store accumulated opacity into R of the R texture.\n    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);\n\n    // now do the translucent rendering\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.traverse(publicAPI);\n    gl.drawBuffers([gl.NONE]);\n    model.framebuffer.restorePreviousBindingsAndBuffers();\n    // gl.drawBuffers([gl.BACK]);\n\n    // make sure the copy shader is ready\n    if (model.copyShader === null) {\n      publicAPI.createCopyShader(viewNode);\n    } else {\n      viewNode.getShaderCache().readyShaderProgram(model.copyShader);\n    }\n\n    // make sure we have a VAO\n    if (!model.copyVAO) {\n      model.copyVAO = vtkVertexArrayObject.newInstance();\n      model.copyVAO.setOpenGLRenderWindow(viewNode);\n    }\n    model.copyVAO.bind();\n\n    // make sure the VBO is up to date\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime()) {\n      publicAPI.createVBO(viewNode);\n    }\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.depthMask(false);\n    gl.depthFunc(gl.ALWAYS);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n\n    // activate texture\n    model.translucentRGBATexture.activate();\n    model.copyShader.setUniformi('translucentRGBATexture', model.translucentRGBATexture.getTextureUnit());\n    model.translucentRTexture.activate();\n    model.copyShader.setUniformi('translucentRTexture', model.translucentRTexture.getTextureUnit());\n\n    // render quad\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    gl.depthMask(true);\n    gl.depthFunc(gl.LEQUAL);\n    model.translucentRGBATexture.deactivate();\n    model.translucentRTexture.deactivate();\n  };\n  publicAPI.getShaderReplacement = () => {\n    if (model._supported) {\n      return translucentShaderReplacement;\n    }\n    return null;\n  };\n  publicAPI.releaseGraphicsResources = viewNode => {\n    if (model.framebuffer) {\n      model.framebuffer.releaseGraphicsResources(viewNode);\n      model.framebuffer = null;\n    }\n    if (model.translucentRGBATexture) {\n      model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n      model.translucentRGBATexture = null;\n    }\n    if (model.translucentRTexture) {\n      model.translucentRTexture.releaseGraphicsResources(viewNode);\n      model.translucentRTexture = null;\n    }\n    if (model.translucentZTexture) {\n      model.translucentZTexture.releaseGraphicsResources(viewNode);\n      model.translucentZTexture = null;\n    }\n    if (model.copyVAO) {\n      model.copyVAO.releaseGraphicsResources(viewNode);\n      model.copyVAO = null;\n    }\n    if (model.copyShader) {\n      model.copyShader.releaseGraphicsResources(viewNode);\n      model.copyShader = null;\n    }\n    if (model.tris) {\n      model.tris.releaseGraphicsResources(viewNode);\n      model.tris = null;\n    }\n    publicAPI.modified();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  framebuffer: null,\n  copyShader: null,\n  tris: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  macro.get(publicAPI, model, ['framebuffer']);\n\n  // Object methods\n  vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLOrderIndependentTranslucentPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkOpenGLOrderIndependentTranslucentPass$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkOpenGLOrderIndependentTranslucentPass$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}