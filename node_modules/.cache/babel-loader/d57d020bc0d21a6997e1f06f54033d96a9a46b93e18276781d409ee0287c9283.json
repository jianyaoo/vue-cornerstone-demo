{"ast":null,"code":"import vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport isTypedArray from '../../utilities/isTypedArray';\nimport { genericMetadataProvider, getMinMax, imageIdToURI } from '../../utilities';\nimport { vtkStreamingOpenGLTexture } from '../../RenderingEngine/vtkClasses';\nimport cache from '../cache';\nimport * as metaData from '../../metaData';\nexport class ImageVolume {\n  constructor(props) {\n    this._imageIdsIndexMap = new Map();\n    this._imageURIsIndexMap = new Map();\n    this.cornerstoneImageMetaData = null;\n    this.imageCacheOffsetMap = new Map();\n    this.isPreScaled = false;\n    const {\n      imageIds,\n      scalarData,\n      scaling,\n      dimensions,\n      spacing,\n      origin,\n      direction,\n      volumeId,\n      referencedVolumeId,\n      sizeInBytes,\n      imageData,\n      metadata,\n      referencedImageIds,\n      additionalDetails\n    } = props;\n    this.imageIds = imageIds;\n    this.volumeId = volumeId;\n    this.metadata = metadata;\n    this.dimensions = dimensions;\n    this.spacing = spacing;\n    this.origin = origin;\n    this.direction = direction;\n    this.scalarData = scalarData;\n    this.sizeInBytes = sizeInBytes;\n    this.vtkOpenGLTexture = vtkStreamingOpenGLTexture.newInstance();\n    this.numVoxels = this.dimensions[0] * this.dimensions[1] * this.dimensions[2];\n    if (imageData) {\n      this.imageData = imageData;\n    } else {\n      const imageData = vtkImageData.newInstance();\n      const scalarArray = vtkDataArray.newInstance({\n        name: 'Pixels',\n        numberOfComponents: 1,\n        values: scalarData\n      });\n      imageData.setDimensions(dimensions);\n      imageData.setSpacing(spacing);\n      imageData.setDirection(direction);\n      imageData.setOrigin(origin);\n      imageData.getPointData().setScalars(scalarArray);\n      this.imageData = imageData;\n    }\n    this.numFrames = this._getNumFrames();\n    this._reprocessImageIds();\n    this._createCornerstoneImageMetaData();\n    if (scaling) {\n      this.scaling = scaling;\n    }\n    if (referencedVolumeId) {\n      this.referencedVolumeId = referencedVolumeId;\n    }\n    if (referencedImageIds) {\n      this.referencedImageIds = referencedImageIds;\n    }\n    if (additionalDetails) {\n      this.additionalDetails = additionalDetails;\n    }\n  }\n  get imageIds() {\n    return this._imageIds;\n  }\n  set imageIds(newImageIds) {\n    this._imageIds = newImageIds;\n    this._reprocessImageIds();\n  }\n  _reprocessImageIds() {\n    this._imageIdsIndexMap.clear();\n    this._imageURIsIndexMap.clear();\n    this._imageIds.forEach((imageId, i) => {\n      const imageURI = imageIdToURI(imageId);\n      this._imageIdsIndexMap.set(imageId, i);\n      this._imageURIsIndexMap.set(imageURI, i);\n    });\n  }\n  isDynamicVolume() {\n    return false;\n  }\n  getScalarData() {\n    if (isTypedArray(this.scalarData)) {\n      return this.scalarData;\n    }\n    throw new Error('Unknown scalar data type');\n  }\n  getImageIdIndex(imageId) {\n    return this._imageIdsIndexMap.get(imageId);\n  }\n  getImageURIIndex(imageURI) {\n    return this._imageURIsIndexMap.get(imageURI);\n  }\n  destroy() {\n    this.imageData.delete();\n    this.imageData = null;\n    this.scalarData = null;\n    this.vtkOpenGLTexture.releaseGraphicsResources();\n    this.vtkOpenGLTexture.delete();\n  }\n  getScalarDataArrays() {\n    return this.isDynamicVolume() ? this.scalarData : [this.scalarData];\n  }\n  decache(completelyRemove = false) {\n    if (completelyRemove) {\n      this.removeFromCache();\n    } else {\n      this.convertToImageSlicesAndCache();\n    }\n  }\n  removeFromCache() {\n    cache.removeVolumeLoadObject(this.volumeId);\n  }\n  getScalarDataLength() {\n    const {\n      scalarData\n    } = this;\n    return this.isDynamicVolume() ? scalarData[0].length : scalarData.length;\n  }\n  _getNumFrames() {\n    const {\n      imageIds,\n      scalarData\n    } = this;\n    const scalarDataCount = this.isDynamicVolume() ? scalarData.length : 1;\n    return imageIds.length / scalarDataCount;\n  }\n  _getScalarDataLength() {\n    const {\n      scalarData\n    } = this;\n    return this.isDynamicVolume() ? scalarData[0].length : scalarData.length;\n  }\n  _createCornerstoneImageMetaData() {\n    const {\n      numFrames\n    } = this;\n    if (numFrames === 0) {\n      return;\n    }\n    const bytesPerImage = this.sizeInBytes / numFrames;\n    const scalarDataLength = this._getScalarDataLength();\n    const numComponents = scalarDataLength / this.numVoxels;\n    const pixelsPerImage = this.dimensions[0] * this.dimensions[1] * numComponents;\n    const {\n      PhotometricInterpretation,\n      voiLut,\n      VOILUTFunction\n    } = this.metadata;\n    let windowCenter = [];\n    let windowWidth = [];\n    if (voiLut && voiLut.length) {\n      windowCenter = voiLut.map(voi => {\n        return voi.windowCenter;\n      });\n      windowWidth = voiLut.map(voi => {\n        return voi.windowWidth;\n      });\n    }\n    const color = numComponents > 1 ? true : false;\n    this.cornerstoneImageMetaData = {\n      bytesPerImage,\n      numComponents,\n      pixelsPerImage,\n      windowCenter,\n      windowWidth,\n      color,\n      rgba: false,\n      spacing: this.spacing,\n      dimensions: this.dimensions,\n      photometricInterpretation: PhotometricInterpretation,\n      voiLUTFunction: VOILUTFunction,\n      invert: PhotometricInterpretation === 'MONOCHROME1'\n    };\n  }\n  getScalarDataByImageIdIndex(imageIdIndex) {\n    if (imageIdIndex < 0 || imageIdIndex >= this.imageIds.length) {\n      throw new Error('imageIdIndex out of range');\n    }\n    const scalarDataArrays = this.getScalarDataArrays();\n    const scalarDataIndex = Math.floor(imageIdIndex / this.numFrames);\n    return scalarDataArrays[scalarDataIndex];\n  }\n  getCornerstoneImage(imageId, imageIdIndex) {\n    const {\n      imageIds\n    } = this;\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\n    const {\n      bytesPerImage,\n      pixelsPerImage,\n      windowCenter,\n      windowWidth,\n      numComponents,\n      color,\n      dimensions,\n      spacing,\n      invert,\n      voiLUTFunction,\n      photometricInterpretation\n    } = this.cornerstoneImageMetaData;\n    const scalarData = this.getScalarDataByImageIdIndex(imageIdIndex);\n    const volumeBuffer = scalarData.buffer;\n    const TypedArray = scalarData.constructor;\n    const bytePerPixel = bytesPerImage / pixelsPerImage;\n    let byteOffset = bytesPerImage * frameIndex;\n    if (scalarData.BYTES_PER_ELEMENT !== bytePerPixel) {\n      byteOffset *= scalarData.BYTES_PER_ELEMENT / bytePerPixel;\n    }\n    const imageScalarData = new TypedArray(pixelsPerImage);\n    const volumeBufferView = new TypedArray(volumeBuffer, byteOffset, pixelsPerImage);\n    imageScalarData.set(volumeBufferView);\n    const volumeImageId = imageIds[imageIdIndex];\n    const modalityLutModule = metaData.get('modalityLutModule', volumeImageId) || {};\n    const minMax = getMinMax(imageScalarData);\n    const intercept = modalityLutModule.rescaleIntercept ? modalityLutModule.rescaleIntercept : 0;\n    return {\n      imageId,\n      intercept,\n      windowCenter,\n      windowWidth,\n      voiLUTFunction,\n      color,\n      rgba: false,\n      numComps: numComponents,\n      rows: dimensions[1],\n      columns: dimensions[0],\n      sizeInBytes: imageScalarData.byteLength,\n      getPixelData: () => imageScalarData,\n      minPixelValue: minMax.min,\n      maxPixelValue: minMax.max,\n      slope: modalityLutModule.rescaleSlope ? modalityLutModule.rescaleSlope : 1,\n      getCanvas: undefined,\n      height: dimensions[0],\n      width: dimensions[1],\n      columnPixelSpacing: spacing[0],\n      rowPixelSpacing: spacing[1],\n      invert,\n      photometricInterpretation\n    };\n  }\n  imageIdIndexToFrameIndex(imageIdIndex) {\n    return imageIdIndex % this.numFrames;\n  }\n  convertToCornerstoneImage(imageId, imageIdIndex) {\n    return this.getCornerstoneImageLoadObject(imageId, imageIdIndex);\n  }\n  getCornerstoneImageLoadObject(imageId, imageIdIndex) {\n    const image = this.getCornerstoneImage(imageId, imageIdIndex);\n    const imageLoadObject = {\n      promise: Promise.resolve(image)\n    };\n    return imageLoadObject;\n  }\n  getCornerstoneImages() {\n    const {\n      imageIds\n    } = this;\n    return imageIds.map((imageId, imageIdIndex) => {\n      return this.getCornerstoneImage(imageId, imageIdIndex);\n    });\n  }\n  convertToImageSlicesAndCache() {\n    const byteLength = this.sizeInBytes;\n    if (!this.imageIds?.length) {\n      const referencedVolumeId = this.referencedVolumeId;\n      const referencedVolume = cache.getVolume(referencedVolumeId);\n      const numSlices = referencedVolume?.imageIds?.length || this.dimensions[2];\n      this.imageIds = Array.from({\n        length: numSlices\n      }, (_, i) => {\n        return `generated:${this.volumeId}:${i}`;\n      });\n      this._reprocessImageIds();\n      this.numFrames = this._getNumFrames();\n      this._createCornerstoneImageMetaData();\n    }\n    const numImages = this.imageIds.length;\n    const {\n      bytesPerImage\n    } = this.cornerstoneImageMetaData;\n    let bytesRemaining = cache.decacheIfNecessaryUntilBytesAvailable(byteLength, this.imageIds);\n    for (let imageIdIndex = 0; imageIdIndex < numImages; imageIdIndex++) {\n      const imageId = this.imageIds[imageIdIndex];\n      bytesRemaining = bytesRemaining - bytesPerImage;\n      const image = this.getCornerstoneImage(imageId, imageIdIndex);\n      const imageLoadObject = {\n        promise: Promise.resolve(image)\n      };\n      if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject).catch(err => {\n          console.error(err);\n        });\n      }\n      if (bytesRemaining <= bytesPerImage) {\n        break;\n      }\n      const imageOrientationPatient = [this.direction[0], this.direction[1], this.direction[2], this.direction[3], this.direction[4], this.direction[5]];\n      const precision = 6;\n      const imagePositionPatient = [parseFloat((this.origin[0] + imageIdIndex * this.direction[6] * this.spacing[0]).toFixed(precision)), parseFloat((this.origin[1] + imageIdIndex * this.direction[7] * this.spacing[1]).toFixed(precision)), parseFloat((this.origin[2] + imageIdIndex * this.direction[8] * this.spacing[2]).toFixed(precision))];\n      const pixelData = image.getPixelData();\n      const bitsAllocated = pixelData.BYTES_PER_ELEMENT * 8;\n      const imagePixelModule = {\n        bitsAllocated,\n        photometricInterpretation: image.photometricInterpretation,\n        windowWidth: image.windowWidth,\n        windowCenter: image.windowCenter,\n        voiLUTFunction: image.voiLUTFunction\n      };\n      const imagePlaneModule = {\n        rowCosines: [this.direction[0], this.direction[1], this.direction[2]],\n        columnCosines: [this.direction[3], this.direction[4], this.direction[5]],\n        pixelSpacing: [this.spacing[0], this.spacing[1]],\n        imageOrientationPatient: imageOrientationPatient,\n        imagePositionPatient: imagePositionPatient,\n        columnPixelSpacing: image.columnPixelSpacing,\n        rowPixelSpacing: image.rowPixelSpacing,\n        columns: image.columns,\n        rows: image.rows\n      };\n      const generalSeriesModule = {};\n      const metadata = {\n        imagePixelModule,\n        imagePlaneModule,\n        generalSeriesModule\n      };\n      ['imagePixelModule', 'imagePlaneModule', 'generalSeriesModule'].forEach(type => {\n        genericMetadataProvider.add(imageId, {\n          type,\n          metadata: metadata[type]\n        });\n      });\n    }\n    this.removeFromCache();\n    return this.imageIds;\n  }\n}\nexport default ImageVolume;","map":{"version":3,"names":["vtkImageData","vtkDataArray","isTypedArray","genericMetadataProvider","getMinMax","imageIdToURI","vtkStreamingOpenGLTexture","cache","metaData","ImageVolume","constructor","props","_imageIdsIndexMap","Map","_imageURIsIndexMap","cornerstoneImageMetaData","imageCacheOffsetMap","isPreScaled","imageIds","scalarData","scaling","dimensions","spacing","origin","direction","volumeId","referencedVolumeId","sizeInBytes","imageData","metadata","referencedImageIds","additionalDetails","vtkOpenGLTexture","newInstance","numVoxels","scalarArray","name","numberOfComponents","values","setDimensions","setSpacing","setDirection","setOrigin","getPointData","setScalars","numFrames","_getNumFrames","_reprocessImageIds","_createCornerstoneImageMetaData","_imageIds","newImageIds","clear","forEach","imageId","i","imageURI","set","isDynamicVolume","getScalarData","Error","getImageIdIndex","get","getImageURIIndex","destroy","delete","releaseGraphicsResources","getScalarDataArrays","decache","completelyRemove","removeFromCache","convertToImageSlicesAndCache","removeVolumeLoadObject","getScalarDataLength","length","scalarDataCount","_getScalarDataLength","bytesPerImage","scalarDataLength","numComponents","pixelsPerImage","PhotometricInterpretation","voiLut","VOILUTFunction","windowCenter","windowWidth","map","voi","color","rgba","photometricInterpretation","voiLUTFunction","invert","getScalarDataByImageIdIndex","imageIdIndex","scalarDataArrays","scalarDataIndex","Math","floor","getCornerstoneImage","frameIndex","imageIdIndexToFrameIndex","volumeBuffer","buffer","TypedArray","bytePerPixel","byteOffset","BYTES_PER_ELEMENT","imageScalarData","volumeBufferView","volumeImageId","modalityLutModule","minMax","intercept","rescaleIntercept","numComps","rows","columns","byteLength","getPixelData","minPixelValue","min","maxPixelValue","max","slope","rescaleSlope","getCanvas","undefined","height","width","columnPixelSpacing","rowPixelSpacing","convertToCornerstoneImage","getCornerstoneImageLoadObject","image","imageLoadObject","promise","Promise","resolve","getCornerstoneImages","referencedVolume","getVolume","numSlices","Array","from","_","numImages","bytesRemaining","decacheIfNecessaryUntilBytesAvailable","getImageLoadObject","putImageLoadObject","catch","err","console","error","imageOrientationPatient","precision","imagePositionPatient","parseFloat","toFixed","pixelData","bitsAllocated","imagePixelModule","imagePlaneModule","rowCosines","columnCosines","pixelSpacing","generalSeriesModule","type","add"],"sources":["../../../../src/cache/classes/ImageVolume.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}