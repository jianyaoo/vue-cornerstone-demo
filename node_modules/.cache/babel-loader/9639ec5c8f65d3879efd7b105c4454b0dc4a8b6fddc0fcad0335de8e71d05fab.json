{"ast":null,"code":"import { utilities } from '@cornerstonejs/core';\nimport { config as segmentationConfig, state as segmentationState, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation } from '../../stateManagement/segmentation';\nimport { SegmentationRepresentations } from '../../enums';\nimport ContourBaseTool from './ContourBaseTool';\nclass ContourSegmentationBaseTool extends ContourBaseTool {\n  constructor(toolProps, defaultToolProps) {\n    super(toolProps, defaultToolProps);\n  }\n  isContourSegmentationTool() {\n    return true;\n  }\n  createAnnotation(evt) {\n    const {\n      toolGroupId\n    } = this;\n    const contourAnnotation = super.createAnnotation(evt);\n    if (!this.isContourSegmentationTool()) {\n      return contourAnnotation;\n    }\n    const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error('No active segmentation detected, create one before using scissors tool');\n    }\n    const {\n      type: segmentationType\n    } = activeSegmentationRepresentation;\n    if (segmentationType !== SegmentationRepresentations.Contour) {\n      throw new Error(`A contour segmentation must be active`);\n    }\n    const {\n      segmentationId,\n      segmentationRepresentationUID\n    } = activeSegmentationRepresentation;\n    const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n    return utilities.deepMerge(contourAnnotation, {\n      data: {\n        segmentation: {\n          segmentationId,\n          segmentIndex,\n          segmentationRepresentationUID\n        }\n      }\n    });\n  }\n  addAnnotation(annotation, element) {\n    const annotationUID = super.addAnnotation(annotation, element);\n    if (this.isContourSegmentationTool()) {\n      this._registerContourSegmentationAnnotation(annotation);\n    }\n    return annotationUID;\n  }\n  cancelAnnotation(annotation) {\n    if (this.isContourSegmentationTool()) {\n      this._unregisterContourSegmentationAnnotation(annotation);\n    }\n    super.cancelAnnotation(annotation);\n  }\n  getAnnotationStyle(context) {\n    const annotationStyle = super.getAnnotationStyle(context);\n    if (!this.isContourSegmentationTool()) {\n      return annotationStyle;\n    }\n    const contourSegmentationStyle = this._getContourSegmentationStyle(context);\n    return utilities.deepMerge(annotationStyle, contourSegmentationStyle);\n  }\n  _getContourSegmentationStyle(context) {\n    const {\n      toolGroupId\n    } = this;\n    const annotation = context.annotation;\n    const {\n      segmentationRepresentationUID,\n      segmentationId,\n      segmentIndex\n    } = annotation.data.segmentation;\n    const segmentationRepresentation = segmentationState.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n    const {\n      active\n    } = segmentationRepresentation;\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n    const annotationLocked = segmentsLocked.includes(segmentIndex);\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);\n    const segmentationVisible = segmentationConfig.visibility.getSegmentationVisibility(toolGroupId, segmentationRepresentationUID);\n    const globalConfig = segmentationConfig.getGlobalConfig();\n    const toolGroupConfig = segmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const segmentationRepresentationConfig = segmentationConfig.getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID);\n    const segmentConfig = segmentationConfig.getSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, segmentIndex);\n    const segmentVisible = segmentationConfig.visibility.getSegmentVisibility(toolGroupId, segmentationRepresentationUID, segmentIndex);\n    const mergedConfig = Object.assign({}, globalConfig?.representations?.CONTOUR ?? {}, toolGroupConfig?.representations?.CONTOUR ?? {}, segmentationRepresentationConfig?.CONTOUR ?? {}, segmentConfig?.CONTOUR ?? {});\n    let lineWidth = 1;\n    let lineDash = undefined;\n    let lineOpacity = 1;\n    let fillOpacity = 0;\n    if (active) {\n      lineWidth = mergedConfig.outlineWidthActive ?? lineWidth;\n      lineDash = mergedConfig.outlineDashActive ?? lineDash;\n      lineOpacity = mergedConfig.outlineOpacity ?? lineOpacity;\n      fillOpacity = mergedConfig.fillAlpha ?? fillOpacity;\n    } else {\n      lineWidth = mergedConfig.outlineWidthInactive ?? lineWidth;\n      lineDash = mergedConfig.outlineDashInactive ?? lineDash;\n      lineOpacity = mergedConfig.outlineOpacityInactive ?? lineOpacity;\n      fillOpacity = mergedConfig.fillAlphaInactive ?? fillOpacity;\n    }\n    lineWidth = mergedConfig.renderOutline ? lineWidth : 0;\n    fillOpacity = mergedConfig.renderFill ? fillOpacity : 0;\n    const color = `rgba(${segmentColor[0]}, ${segmentColor[1]}, ${segmentColor[2]}, ${lineOpacity})`;\n    const fillColor = `rgb(${segmentColor[0]}, ${segmentColor[1]}, ${segmentColor[2]})`;\n    return {\n      color,\n      fillColor,\n      lineWidth,\n      fillOpacity,\n      lineDash,\n      textbox: {\n        color\n      },\n      visibility: segmentationVisible && segmentVisible,\n      locked: annotationLocked\n    };\n  }\n  _registerContourSegmentationAnnotation(annotation) {\n    const {\n      segmentationId,\n      segmentIndex\n    } = annotation.data.segmentation;\n    const segmentation = segmentationState.getSegmentation(segmentationId);\n    const {\n      annotationUIDsMap\n    } = segmentation.representationData.CONTOUR;\n    let annotationsUIDsSet = annotationUIDsMap.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n      annotationsUIDsSet = new Set();\n      annotationUIDsMap.set(segmentIndex, annotationsUIDsSet);\n    }\n    annotationsUIDsSet.add(annotation.annotationUID);\n  }\n  _unregisterContourSegmentationAnnotation(annotation) {\n    const {\n      segmentationId,\n      segmentIndex\n    } = annotation.data.segmentation;\n    const segmentation = segmentationState.getSegmentation(segmentationId);\n    const {\n      annotationUIDsMap\n    } = segmentation.representationData.CONTOUR;\n    const annotationsUIDsSet = annotationUIDsMap.get(segmentIndex);\n    annotationsUIDsSet.delete(annotation.annotationUID);\n    if (!annotationsUIDsSet.size) {\n      annotationUIDsMap.delete(segmentIndex);\n    }\n  }\n}\nexport { ContourSegmentationBaseTool as default, ContourSegmentationBaseTool };","map":{"version":3,"names":["utilities","config","segmentationConfig","state","segmentationState","segmentLocking","segmentIndex","segmentIndexController","activeSegmentation","SegmentationRepresentations","ContourBaseTool","ContourSegmentationBaseTool","constructor","toolProps","defaultToolProps","isContourSegmentationTool","createAnnotation","evt","toolGroupId","contourAnnotation","activeSegmentationRepresentation","getActiveSegmentationRepresentation","Error","type","segmentationType","Contour","segmentationId","segmentationRepresentationUID","getActiveSegmentIndex","deepMerge","data","segmentation","addAnnotation","annotation","element","annotationUID","_registerContourSegmentationAnnotation","cancelAnnotation","_unregisterContourSegmentationAnnotation","getAnnotationStyle","context","annotationStyle","contourSegmentationStyle","_getContourSegmentationStyle","segmentationRepresentation","getSegmentationRepresentationByUID","active","segmentsLocked","getLockedSegments","annotationLocked","includes","segmentColor","color","getColorForSegmentIndex","segmentationVisible","visibility","getSegmentationVisibility","globalConfig","getGlobalConfig","toolGroupConfig","getToolGroupSpecificConfig","segmentationRepresentationConfig","getSegmentationRepresentationSpecificConfig","segmentConfig","getSegmentSpecificConfig","segmentVisible","getSegmentVisibility","mergedConfig","Object","assign","representations","CONTOUR","lineWidth","lineDash","undefined","lineOpacity","fillOpacity","outlineWidthActive","outlineDashActive","outlineOpacity","fillAlpha","outlineWidthInactive","outlineDashInactive","outlineOpacityInactive","fillAlphaInactive","renderOutline","renderFill","fillColor","textbox","locked","getSegmentation","annotationUIDsMap","representationData","annotationsUIDsSet","get","Set","set","add","delete","size","default"],"sources":["../../../../src/tools/base/ContourSegmentationBaseTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}