{"ast":null,"code":"import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport { getBoundingBoxAroundShapeIJK } from '../boundingBox/getBoundingBoxAroundShape';\nexport default function getBrushToolInstances(toolGroupId, toolName) {\n  const toolGroup = getToolGroup(toolGroupId);\n  if (toolGroup === undefined) {\n    return;\n  }\n  const toolInstances = toolGroup._toolInstances;\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n  if (toolName && toolInstances[toolName]) {\n    return [toolInstances[toolName]];\n  }\n  const brushBasedToolInstances = Object.values(toolInstances).filter(toolInstance => toolInstance instanceof BrushTool);\n  return brushBasedToolInstances;\n}\nconst equalsCheck = (a, b) => {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\nexport function getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter) {\n  const voxelCornersWorld = [];\n  for (let i = 0; i < 2; i++) {\n    for (let j = 0; j < 2; j++) {\n      for (let k = 0; k < 2; k++) {\n        const point = [...voxelCenter];\n        point[0] = point[0] + (i * 2 - 1) * voxelSpacing[0] / 2;\n        point[1] = point[1] + (j * 2 - 1) * voxelSpacing[1] / 2;\n        point[2] = point[2] + (k * 2 - 1) * voxelSpacing[2] / 2;\n        voxelCornersWorld.push(point);\n      }\n    }\n  }\n  const voxelCornersIJK = voxelCornersWorld.map(world => csUtils.transformWorldToIndex(imageData, world));\n  const overlapBounds = getBoundingBoxAroundShapeIJK(voxelCornersIJK, dimensions);\n  return overlapBounds;\n}\nexport function processVolumes(segmentationVolume, thresholdVolumeInformation) {\n  const {\n    spacing: segmentationSpacing\n  } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n  const volumeInfoList = [];\n  let baseVolumeIdx = 0;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    const {\n      imageData,\n      spacing,\n      dimensions\n    } = thresholdVolumeInformation[i].volume;\n    const volumeSize = thresholdVolumeInformation[i].volume.getScalarData().length;\n    if (volumeSize === scalarData.length && equalsCheck(spacing, segmentationSpacing)) {\n      baseVolumeIdx = i;\n    }\n    const referenceValues = imageData.getPointData().getScalars().getData();\n    const lower = thresholdVolumeInformation[i].lower;\n    const upper = thresholdVolumeInformation[i].upper;\n    volumeInfoList.push({\n      imageData,\n      referenceValues,\n      lower,\n      upper,\n      spacing,\n      dimensions,\n      volumeSize\n    });\n  }\n  return {\n    volumeInfoList,\n    baseVolumeIdx\n  };\n}","map":{"version":3,"names":["utilities","csUtils","getToolGroup","BrushTool","getBoundingBoxAroundShapeIJK","getBrushToolInstances","toolGroupId","toolName","toolGroup","undefined","toolInstances","_toolInstances","Object","keys","length","brushBasedToolInstances","values","filter","toolInstance","equalsCheck","a","b","JSON","stringify","getVoxelOverlap","imageData","dimensions","voxelSpacing","voxelCenter","voxelCornersWorld","i","j","k","point","push","voxelCornersIJK","map","world","transformWorldToIndex","overlapBounds","processVolumes","segmentationVolume","thresholdVolumeInformation","spacing","segmentationSpacing","scalarData","getScalarData","volumeInfoList","baseVolumeIdx","volume","volumeSize","referenceValues","getPointData","getScalars","getData","lower","upper"],"sources":["../../../../src/utilities/segmentation/utilities.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}