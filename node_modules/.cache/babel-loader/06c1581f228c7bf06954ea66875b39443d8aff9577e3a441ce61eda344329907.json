{"ast":null,"code":"import { vec3 } from 'gl-matrix';\nimport { createIsInSegment, isLineInSegment } from './isLineInSegment';\nconst EPSILON = 1e-2;\nexport default function findLargestBidirectional(contours, segVolumeId, segment) {\n  const {\n    sliceContours\n  } = contours;\n  const {\n    segmentIndex,\n    containedSegmentIndices\n  } = segment;\n  let maxBidirectional;\n  const isInSegment = createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices);\n  for (const sliceContour of sliceContours) {\n    const bidirectional = createBidirectionalForSlice(sliceContour, isInSegment, maxBidirectional);\n    if (!bidirectional) {\n      continue;\n    }\n    maxBidirectional = bidirectional;\n  }\n  if (maxBidirectional) {\n    Object.assign(maxBidirectional, segment);\n  }\n  return maxBidirectional;\n}\nfunction createBidirectionalForSlice(sliceContour, isInSegment, currentMax = {\n  maxMajor: 0,\n  maxMinor: 0\n}) {\n  const {\n    points\n  } = sliceContour.polyData;\n  const {\n    maxMinor: currentMaxMinor,\n    maxMajor: currentMaxMajor\n  } = currentMax;\n  let maxMajor = currentMaxMajor * currentMaxMajor;\n  let maxMinor = currentMaxMinor * currentMaxMinor;\n  let maxMajorPoints;\n  for (let index1 = 0; index1 < points.length; index1++) {\n    for (let index2 = index1 + 1; index2 < points.length; index2++) {\n      const point1 = points[index1];\n      const point2 = points[index2];\n      const distance2 = vec3.sqrDist(point1, point2);\n      if (distance2 < maxMajor) {\n        continue;\n      }\n      if (distance2 - EPSILON < maxMajor + EPSILON && maxMajorPoints) {\n        continue;\n      }\n      if (!isInSegment.testCenter(point1, point2)) {\n        continue;\n      }\n      if (!isLineInSegment(point1, point2, isInSegment)) {\n        continue;\n      }\n      maxMajor = distance2 - EPSILON;\n      maxMajorPoints = [index1, index2];\n      maxMinor = 0;\n    }\n  }\n  if (!maxMajorPoints) {\n    return;\n  }\n  maxMajor = Math.sqrt(maxMajor + EPSILON);\n  const handle0 = points[maxMajorPoints[0]];\n  const handle1 = points[maxMajorPoints[1]];\n  const unitMajor = vec3.sub(vec3.create(), handle0, handle1);\n  vec3.scale(unitMajor, unitMajor, 1 / maxMajor);\n  let maxMinorPoints;\n  for (let index1 = 0; index1 < points.length; index1++) {\n    for (let index2 = index1 + 1; index2 < points.length; index2++) {\n      const point1 = points[index1];\n      const point2 = points[index2];\n      const distance2 = vec3.sqrDist(point1, point2);\n      if (distance2 <= maxMinor) {\n        continue;\n      }\n      const delta = vec3.sub(vec3.create(), point1, point2);\n      const dot = Math.abs(vec3.dot(delta, unitMajor)) / Math.sqrt(distance2);\n      if (dot > EPSILON) {\n        continue;\n      }\n      if (!isInSegment.testCenter(point1, point2)) {\n        continue;\n      }\n      if (!isLineInSegment(point1, point2, isInSegment)) {\n        continue;\n      }\n      maxMinor = distance2;\n      maxMinorPoints = [index1, index2];\n    }\n  }\n  if (!maxMinorPoints) {\n    return;\n  }\n  maxMinor = Math.sqrt(maxMinor);\n  const handle2 = points[maxMinorPoints[0]];\n  const handle3 = points[maxMinorPoints[1]];\n  const bidirectional = {\n    majorAxis: [handle0, handle1],\n    minorAxis: [handle2, handle3],\n    maxMajor,\n    maxMinor,\n    ...sliceContour\n  };\n  return bidirectional;\n}","map":{"version":3,"names":["vec3","createIsInSegment","isLineInSegment","EPSILON","findLargestBidirectional","contours","segVolumeId","segment","sliceContours","segmentIndex","containedSegmentIndices","maxBidirectional","isInSegment","sliceContour","bidirectional","createBidirectionalForSlice","Object","assign","currentMax","maxMajor","maxMinor","points","polyData","currentMaxMinor","currentMaxMajor","maxMajorPoints","index1","length","index2","point1","point2","distance2","sqrDist","testCenter","Math","sqrt","handle0","handle1","unitMajor","sub","create","scale","maxMinorPoints","delta","dot","abs","handle2","handle3","majorAxis","minorAxis"],"sources":["../../../../src/utilities/segmentation/findLargestBidirectional.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}