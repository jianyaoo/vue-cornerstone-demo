{"ast":null,"code":"import cloneDeep from 'lodash.clonedeep';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nconst defaultLabelmapConfig = getDefaultLabelmapConfig();\nconst defaultContourConfig = getDefaultContourConfig();\nconst newGlobalConfig = {\n  renderInactiveSegmentations: true,\n  representations: {\n    [SegmentationRepresentations.Labelmap]: defaultLabelmapConfig,\n    [SegmentationRepresentations.Contour]: defaultContourConfig\n  }\n};\nconst initialDefaultState = {\n  colorLUT: [],\n  segmentations: [],\n  globalConfig: newGlobalConfig,\n  toolGroups: {}\n};\nexport default class SegmentationStateManager {\n  constructor(uid) {\n    if (!uid) {\n      uid = csUtils.uuidv4();\n    }\n    this.state = cloneDeep(initialDefaultState);\n    this.uid = uid;\n  }\n  getState() {\n    return this.state;\n  }\n  getToolGroups() {\n    return Object.keys(this.state.toolGroups);\n  }\n  getColorLUT(lutIndex) {\n    return this.state.colorLUT[lutIndex];\n  }\n  getNextColorLUTIndex() {\n    return this.state.colorLUT.length;\n  }\n  resetState() {\n    this.state = cloneDeep(initialDefaultState);\n  }\n  getSegmentation(segmentationId) {\n    return this.state.segmentations.find(segmentation => segmentation.segmentationId === segmentationId);\n  }\n  addSegmentation(segmentation) {\n    if (this.getSegmentation(segmentation.segmentationId)) {\n      throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n    }\n    this.state.segmentations.push(segmentation);\n  }\n  getSegmentationRepresentations(toolGroupId) {\n    const toolGroupSegRepresentationsWithConfig = this.state.toolGroups[toolGroupId];\n    if (!toolGroupSegRepresentationsWithConfig) {\n      return;\n    }\n    return toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n  }\n  getAllSegmentationRepresentations() {\n    const toolGroupSegReps = {};\n    Object.entries(this.state.toolGroups).forEach(([toolGroupId, toolGroupSegRepresentationsWithConfig]) => {\n      toolGroupSegReps[toolGroupId] = toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n    });\n    return toolGroupSegReps;\n  }\n  addSegmentationRepresentation(toolGroupId, segmentationRepresentation) {\n    if (!this.state.toolGroups[toolGroupId]) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {}\n      };\n    }\n    this.state.toolGroups[toolGroupId].segmentationRepresentations.push(segmentationRepresentation);\n    this._handleActiveSegmentation(toolGroupId, segmentationRepresentation);\n  }\n  getGlobalConfig() {\n    return this.state.globalConfig;\n  }\n  setGlobalConfig(config) {\n    this.state.globalConfig = config;\n  }\n  getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID) {\n    const toolGroupSegRepresentations = this.getSegmentationRepresentations(toolGroupId);\n    const segmentationData = toolGroupSegRepresentations.find(representation => representation.segmentationRepresentationUID === segmentationRepresentationUID);\n    return segmentationData;\n  }\n  removeSegmentation(segmentationId) {\n    this.state.segmentations = this.state.segmentations.filter(segmentation => segmentation.segmentationId !== segmentationId);\n  }\n  removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {\n    const toolGroupSegmentationRepresentations = this.getSegmentationRepresentations(toolGroupId);\n    if (!toolGroupSegmentationRepresentations || !toolGroupSegmentationRepresentations.length) {\n      throw new Error(`No viewport specific segmentation state found for viewport ${toolGroupId}`);\n    }\n    const state = toolGroupSegmentationRepresentations;\n    const index = state.findIndex(segData => segData.segmentationRepresentationUID === segmentationRepresentationUID);\n    if (index === -1) {\n      console.warn(`No viewport specific segmentation state data found for viewport ${toolGroupId} and segmentation data UID ${segmentationRepresentationUID}`);\n    }\n    const removedSegmentationRepresentation = toolGroupSegmentationRepresentations[index];\n    toolGroupSegmentationRepresentations.splice(index, 1);\n    this._handleActiveSegmentation(toolGroupId, removedSegmentationRepresentation);\n  }\n  setActiveSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {\n    const toolGroupSegmentations = this.getSegmentationRepresentations(toolGroupId);\n    if (!toolGroupSegmentations || !toolGroupSegmentations.length) {\n      throw new Error(`No segmentation data found for toolGroupId: ${toolGroupId}`);\n    }\n    const segmentationData = toolGroupSegmentations.find(segmentationData => segmentationData.segmentationRepresentationUID === segmentationRepresentationUID);\n    if (!segmentationData) {\n      throw new Error(`No segmentation data found for segmentation data UID ${segmentationRepresentationUID}`);\n    }\n    segmentationData.active = true;\n    this._handleActiveSegmentation(toolGroupId, segmentationData);\n  }\n  getToolGroupSpecificConfig(toolGroupId) {\n    const toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n    if (!toolGroupStateWithConfig) {\n      return;\n    }\n    return toolGroupStateWithConfig.config;\n  }\n  getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID) {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n    if (!segmentationRepresentation) {\n      return;\n    }\n    return segmentationRepresentation.segmentationRepresentationSpecificConfig;\n  }\n  setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config) {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n    if (!segmentationRepresentation) {\n      return;\n    }\n    segmentationRepresentation.segmentationRepresentationSpecificConfig = config;\n  }\n  getSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, segmentIndex) {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n    if (!segmentationRepresentation) {\n      return;\n    }\n    return segmentationRepresentation.segmentSpecificConfig[segmentIndex];\n  }\n  setSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, config, options) {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n    if (!segmentationRepresentation) {\n      return;\n    }\n    if (!segmentationRepresentation.segmentSpecificConfig || options?.clear) {\n      segmentationRepresentation.segmentSpecificConfig = {};\n    }\n    Object.keys(config).forEach(key => {\n      segmentationRepresentation.segmentSpecificConfig[key] = config[key];\n    });\n  }\n  setSegmentationRepresentationConfig(toolGroupId, config) {\n    let toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n    if (!toolGroupStateWithConfig) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {\n          renderInactiveSegmentations: true,\n          representations: {}\n        }\n      };\n      toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n    }\n    toolGroupStateWithConfig.config = {\n      ...toolGroupStateWithConfig.config,\n      ...config\n    };\n  }\n  addColorLUT(colorLUT, lutIndex) {\n    if (this.state.colorLUT[lutIndex]) {\n      console.warn('Color LUT table already exists, overwriting');\n    }\n    this.state.colorLUT[lutIndex] = structuredClone(colorLUT);\n  }\n  removeColorLUT(colorLUTIndex) {\n    delete this.state.colorLUT[colorLUTIndex];\n  }\n  _handleActiveSegmentation(toolGroupId, recentlyAddedOrRemovedSegmentationRepresentation) {\n    const segmentationRepresentations = this.getSegmentationRepresentations(toolGroupId);\n    if (segmentationRepresentations.length === 0) {\n      return;\n    }\n    if (segmentationRepresentations.length === 1) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n    const activeSegmentationRepresentations = segmentationRepresentations.filter(representation => representation.active);\n    if (activeSegmentationRepresentations.length === 0) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n    if (recentlyAddedOrRemovedSegmentationRepresentation.active) {\n      segmentationRepresentations.forEach(representation => {\n        if (representation.segmentationRepresentationUID !== recentlyAddedOrRemovedSegmentationRepresentation.segmentationRepresentationUID) {\n          representation.active = false;\n        }\n      });\n    }\n  }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { defaultSegmentationStateManager };","map":{"version":3,"names":["cloneDeep","utilities","csUtils","SegmentationRepresentations","getDefaultContourConfig","getDefaultLabelmapConfig","defaultLabelmapConfig","defaultContourConfig","newGlobalConfig","renderInactiveSegmentations","representations","Labelmap","Contour","initialDefaultState","colorLUT","segmentations","globalConfig","toolGroups","SegmentationStateManager","constructor","uid","uuidv4","state","getState","getToolGroups","Object","keys","getColorLUT","lutIndex","getNextColorLUTIndex","length","resetState","getSegmentation","segmentationId","find","segmentation","addSegmentation","Error","push","getSegmentationRepresentations","toolGroupId","toolGroupSegRepresentationsWithConfig","segmentationRepresentations","getAllSegmentationRepresentations","toolGroupSegReps","entries","forEach","addSegmentationRepresentation","segmentationRepresentation","config","_handleActiveSegmentation","getGlobalConfig","setGlobalConfig","getSegmentationRepresentationByUID","segmentationRepresentationUID","toolGroupSegRepresentations","segmentationData","representation","removeSegmentation","filter","removeSegmentationRepresentation","toolGroupSegmentationRepresentations","index","findIndex","segData","console","warn","removedSegmentationRepresentation","splice","setActiveSegmentationRepresentation","toolGroupSegmentations","active","getToolGroupSpecificConfig","toolGroupStateWithConfig","getSegmentationRepresentationSpecificConfig","segmentationRepresentationSpecificConfig","setSegmentationRepresentationSpecificConfig","getSegmentSpecificConfig","segmentIndex","segmentSpecificConfig","setSegmentSpecificConfig","options","clear","key","setSegmentationRepresentationConfig","addColorLUT","structuredClone","removeColorLUT","colorLUTIndex","recentlyAddedOrRemovedSegmentationRepresentation","activeSegmentationRepresentations","defaultSegmentationStateManager"],"sources":["../../../../src/stateManagement/segmentation/SegmentationStateManager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}