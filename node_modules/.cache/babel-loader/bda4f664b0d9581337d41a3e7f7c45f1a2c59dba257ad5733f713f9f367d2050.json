{"ast":null,"code":"import { vec3 } from 'gl-matrix';\nimport { getConfiguration, getShouldUseSharedArrayBuffer } from '../init';\nimport createFloat32SharedArray from './createFloat32SharedArray';\nimport createInt16SharedArray from './createInt16SharedArray';\nimport createUint16SharedArray from './createUInt16SharedArray';\nimport createUint8SharedArray from './createUint8SharedArray';\nimport getScalingParameters from './getScalingParameters';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport cache from '../cache';\nimport { Events } from '../enums';\nfunction generateVolumePropsFromImageIds(imageIds, volumeId) {\n  const {\n    useNorm16Texture,\n    preferSizeOverAccuracy\n  } = getConfiguration().rendering;\n  const use16BitDataType = useNorm16Texture || preferSizeOverAccuracy;\n  const volumeMetadata = makeVolumeMetadata(imageIds);\n  const imageIdIndex = Math.floor(imageIds.length / 2);\n  const imageId = imageIds[imageIdIndex];\n  const scalingParameters = getScalingParameters(imageId);\n  const hasNegativeRescale = scalingParameters.rescaleIntercept < 0 || scalingParameters.rescaleSlope < 0;\n  const hasFloatRescale = scalingParameters.rescaleIntercept % 1 !== 0 || scalingParameters.rescaleSlope % 1 !== 0;\n  const {\n    BitsAllocated,\n    PixelRepresentation,\n    PhotometricInterpretation,\n    ImageOrientationPatient,\n    PixelSpacing,\n    Columns,\n    Rows\n  } = volumeMetadata;\n  const rowCosineVec = vec3.fromValues(ImageOrientationPatient[0], ImageOrientationPatient[1], ImageOrientationPatient[2]);\n  const colCosineVec = vec3.fromValues(ImageOrientationPatient[3], ImageOrientationPatient[4], ImageOrientationPatient[5]);\n  const scanAxisNormal = vec3.create();\n  vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n  const {\n    zSpacing,\n    origin,\n    sortedImageIds\n  } = sortImageIdsAndGetSpacing(imageIds, scanAxisNormal);\n  const numFrames = imageIds.length;\n  const spacing = [PixelSpacing[1], PixelSpacing[0], zSpacing];\n  const dimensions = [Columns, Rows, numFrames];\n  const direction = [...rowCosineVec, ...colCosineVec, ...scanAxisNormal];\n  const signed = PixelRepresentation === 1;\n  const numComponents = PhotometricInterpretation === 'RGB' ? 3 : 1;\n  const useSharedArrayBuffer = getShouldUseSharedArrayBuffer();\n  const length = dimensions[0] * dimensions[1] * dimensions[2];\n  const handleCache = sizeInBytes => {\n    if (!cache.isCacheable(sizeInBytes)) {\n      throw new Error(Events.CACHE_SIZE_EXCEEDED);\n    }\n    cache.decacheIfNecessaryUntilBytesAvailable(sizeInBytes);\n  };\n  let scalarData, sizeInBytes;\n  switch (BitsAllocated) {\n    case 8:\n      if (signed) {\n        throw new Error('8 Bit signed images are not yet supported by this plugin.');\n      }\n      sizeInBytes = length * numComponents;\n      handleCache(sizeInBytes);\n      scalarData = useSharedArrayBuffer ? createUint8SharedArray(length * numComponents) : new Uint8Array(length * numComponents);\n      break;\n    case 16:\n      if (!use16BitDataType || hasFloatRescale) {\n        sizeInBytes = length * 4;\n        scalarData = useSharedArrayBuffer ? createFloat32SharedArray(length) : new Float32Array(length);\n        break;\n      }\n      sizeInBytes = length * 2;\n      if (signed || hasNegativeRescale) {\n        handleCache(sizeInBytes);\n        scalarData = useSharedArrayBuffer ? createInt16SharedArray(length) : new Int16Array(length);\n        break;\n      }\n      if (!signed && !hasNegativeRescale) {\n        handleCache(sizeInBytes);\n        scalarData = useSharedArrayBuffer ? createUint16SharedArray(length) : new Uint16Array(length);\n        break;\n      }\n      sizeInBytes = length * 4;\n      handleCache(sizeInBytes);\n      scalarData = useSharedArrayBuffer ? createFloat32SharedArray(length) : new Float32Array(length);\n      break;\n    case 24:\n      sizeInBytes = length * numComponents;\n      handleCache(sizeInBytes);\n      scalarData = useSharedArrayBuffer ? createUint8SharedArray(length * numComponents) : new Uint8Array(length * numComponents);\n      break;\n    case 32:\n      sizeInBytes = length * 4;\n      handleCache(sizeInBytes);\n      scalarData = useSharedArrayBuffer ? createFloat32SharedArray(length) : new Float32Array(length);\n      break;\n    default:\n      throw new Error(`Bits allocated of ${BitsAllocated} is not defined to generate scalarData for the volume.`);\n  }\n  return {\n    dimensions,\n    spacing,\n    origin,\n    direction,\n    scalarData,\n    sizeInBytes,\n    metadata: volumeMetadata,\n    imageIds: sortedImageIds,\n    volumeId\n  };\n}\nexport { generateVolumePropsFromImageIds };","map":{"version":3,"names":["vec3","getConfiguration","getShouldUseSharedArrayBuffer","createFloat32SharedArray","createInt16SharedArray","createUint16SharedArray","createUint8SharedArray","getScalingParameters","makeVolumeMetadata","sortImageIdsAndGetSpacing","cache","Events","generateVolumePropsFromImageIds","imageIds","volumeId","useNorm16Texture","preferSizeOverAccuracy","rendering","use16BitDataType","volumeMetadata","imageIdIndex","Math","floor","length","imageId","scalingParameters","hasNegativeRescale","rescaleIntercept","rescaleSlope","hasFloatRescale","BitsAllocated","PixelRepresentation","PhotometricInterpretation","ImageOrientationPatient","PixelSpacing","Columns","Rows","rowCosineVec","fromValues","colCosineVec","scanAxisNormal","create","cross","zSpacing","origin","sortedImageIds","numFrames","spacing","dimensions","direction","signed","numComponents","useSharedArrayBuffer","handleCache","sizeInBytes","isCacheable","Error","CACHE_SIZE_EXCEEDED","decacheIfNecessaryUntilBytesAvailable","scalarData","Uint8Array","Float32Array","Int16Array","Uint16Array","metadata"],"sources":["../../../src/utilities/generateVolumePropsFromImageIds.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}