{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { cache } from '@cornerstonejs/core';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\nimport { getSegmentSpecificConfig } from './utils';\nexport function updateContourSets(viewport, geometryIds, contourRepresentation, contourRepresentationConfig, contourActorUID) {\n  const {\n    segmentationRepresentationUID,\n    segmentsHidden\n  } = contourRepresentation;\n  const newContourConfig = contourRepresentationConfig.representations.CONTOUR;\n  const cachedConfig = getConfigCache(segmentationRepresentationUID);\n  const contourSetsActor = viewport.getActor(contourActorUID);\n  if (!contourSetsActor) {\n    console.warn(`No contour actor found for actorUID ${contourActorUID}. Skipping render.`);\n    return;\n  }\n  const {\n    actor\n  } = contourSetsActor;\n  const newOutlineWithActive = newContourConfig.outlineWidthActive;\n  if (cachedConfig?.outlineWidthActive !== newOutlineWithActive) {\n    actor.getProperty().setLineWidth(newOutlineWithActive);\n    setConfigCache(segmentationRepresentationUID, Object.assign({}, cachedConfig, {\n      outlineWidthActive: newOutlineWithActive\n    }));\n  }\n  const mapper = actor.getMapper();\n  const lut = mapper.getLookupTable();\n  const segmentsToSetToInvisible = [];\n  const segmentsToSetToVisible = [];\n  for (const segmentIndex of segmentsHidden) {\n    if (!cachedConfig.segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToInvisible.push(segmentIndex);\n    }\n  }\n  for (const segmentIndex of cachedConfig.segmentsHidden) {\n    if (!segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToVisible.push(segmentIndex);\n    }\n  }\n  const mergedInvisibleSegments = Array.from(cachedConfig.segmentsHidden).filter(segmentIndex => !segmentsToSetToVisible.includes(segmentIndex)).concat(segmentsToSetToInvisible);\n  const {\n    contourSets,\n    segmentSpecificConfigs\n  } = geometryIds.reduce((acc, geometryId) => {\n    const geometry = cache.getGeometry(geometryId);\n    const {\n      data: contourSet\n    } = geometry;\n    const segmentIndex = contourSet.getSegmentIndex();\n    const segmentSpecificConfig = getSegmentSpecificConfig(contourRepresentation, geometryId, segmentIndex);\n    acc.contourSets.push(contourSet);\n    acc.segmentSpecificConfigs[segmentIndex] = segmentSpecificConfig ?? {};\n    return acc;\n  }, {\n    contourSets: [],\n    segmentSpecificConfigs: {}\n  });\n  const affectedSegments = [...mergedInvisibleSegments, ...segmentsToSetToVisible];\n  const hasCustomSegmentSpecificConfig = Object.values(segmentSpecificConfigs).some(config => Object.keys(config).length > 0);\n  let polyDataModified = false;\n  if (affectedSegments.length || hasCustomSegmentSpecificConfig) {\n    const appendPolyData = mapper.getInputData();\n    const appendScalars = appendPolyData.getPointData().getScalars();\n    const appendScalarsData = appendScalars.getData();\n    let offset = 0;\n    contourSets.forEach(contourSet => {\n      const segmentIndex = contourSet.getSegmentIndex();\n      const size = contourSet.getTotalNumberOfPoints();\n      if (affectedSegments.includes(segmentIndex) || segmentSpecificConfigs[segmentIndex]?.fillAlpha) {\n        const color = contourSet.getColor();\n        let visibility = mergedInvisibleSegments.includes(segmentIndex) ? 0 : 255;\n        const segmentConfig = segmentSpecificConfigs[segmentIndex];\n        if (segmentConfig.fillAlpha !== undefined) {\n          visibility = segmentConfig.fillAlpha * 255;\n        }\n        for (let i = 0; i < size; ++i) {\n          appendScalarsData[offset + i * 4] = color[0];\n          appendScalarsData[offset + i * 4 + 1] = color[1];\n          appendScalarsData[offset + i * 4 + 2] = color[2];\n          appendScalarsData[offset + i * 4 + 3] = visibility;\n        }\n        polyDataModified = true;\n      }\n      offset = offset + size * 4;\n    });\n    if (polyDataModified) {\n      appendPolyData.modified();\n    }\n    setConfigCache(segmentationRepresentationUID, Object.assign({}, cachedConfig, {\n      segmentsHidden: new Set(segmentsHidden)\n    }));\n    mapper.setLookupTable(lut);\n  }\n  viewport.render();\n}","map":{"version":3,"names":["cache","getConfigCache","setConfigCache","getSegmentSpecificConfig","updateContourSets","viewport","geometryIds","contourRepresentation","contourRepresentationConfig","contourActorUID","segmentationRepresentationUID","segmentsHidden","newContourConfig","representations","CONTOUR","cachedConfig","contourSetsActor","getActor","console","warn","actor","newOutlineWithActive","outlineWidthActive","getProperty","setLineWidth","Object","assign","mapper","getMapper","lut","getLookupTable","segmentsToSetToInvisible","segmentsToSetToVisible","segmentIndex","has","push","mergedInvisibleSegments","Array","from","filter","includes","concat","contourSets","segmentSpecificConfigs","reduce","acc","geometryId","geometry","getGeometry","data","contourSet","getSegmentIndex","segmentSpecificConfig","affectedSegments","hasCustomSegmentSpecificConfig","values","some","config","keys","length","polyDataModified","appendPolyData","getInputData","appendScalars","getPointData","getScalars","appendScalarsData","getData","offset","forEach","size","getTotalNumberOfPoints","fillAlpha","color","getColor","visibility","segmentConfig","undefined","i","modified","Set","setLookupTable","render"],"sources":["../../../../../src/tools/displayTools/Contour/updateContourSets.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}