{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTypes from './Types.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUTextureView methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPUTextureView(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureView');\n  publicAPI.create = (texture, options) => {\n    model.texture = texture;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = texture.getHandle();\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.texture.getFormat());\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n  };\n  publicAPI.createFromTextureHandle = (textureHandle, options) => {\n    model.texture = null;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = textureHandle;\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(options.format);\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n    model.bindGroupTime.modified();\n  };\n  publicAPI.getBindGroupEntry = () => {\n    const foo = {\n      resource: publicAPI.getHandle()\n    };\n    return foo;\n  };\n  publicAPI.getShaderCode = (binding, group) => {\n    let ttype = 'f32';\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {\n      ttype = 'i32';\n    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {\n      ttype = 'u32';\n    }\n    let result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_${model.options.dimension}<${ttype}>;`;\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {\n      result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_depth_${model.options.dimension};`;\n    }\n    return result;\n  };\n  publicAPI.addSampler = (device, options) => {\n    const newSamp = vtkWebGPUSampler.newInstance({\n      label: `${model.label}Sampler`\n    });\n    newSamp.create(device, options);\n    publicAPI.setSampler(newSamp);\n  };\n  publicAPI.getBindGroupTime = () => {\n    // check if the handle changed\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.bindGroupTime;\n  };\n\n  // if the texture has changed then get a new view\n  publicAPI.getHandle = () => {\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.handle;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  texture: null,\n  handle: null,\n  sampler: null,\n  label: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    /* eslint-enable no-undef */\n    texture: {\n      sampleType: 'float',\n      viewDimension: '2d'\n      // multisampled: false,\n    }\n  };\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'texture']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'label', 'sampler']);\n  vtkWebGPUTextureView(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUTextureView$1 = {\n  newInstance,\n  extend\n};\nexport { vtkWebGPUTextureView$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkWebGPUSampler","vtkWebGPUTypes","vtkWebGPUTextureView","publicAPI","model","classHierarchy","push","create","texture","options","dimension","label","textureHandle","getHandle","handle","createView","bindGroupLayoutEntry","viewDimension","tDetails","getDetailsFromTextureFormat","getFormat","sampleType","createFromTextureHandle","format","bindGroupTime","modified","getBindGroupEntry","foo","resource","getShaderCode","binding","group","ttype","result","addSampler","device","newSamp","newInstance","setSampler","getBindGroupTime","DEFAULT_VALUES","sampler","extend","initialValues","arguments","length","undefined","Object","assign","obj","visibility","GPUShaderStage","VERTEX","FRAGMENT","mtime","get","setGet","vtkWebGPUTextureView$1","default"],"sources":["/Users/yzy/Documents/Playground/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/WebGPU/TextureView.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTypes from './Types.js';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUTextureView methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPUTextureView(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureView');\n  publicAPI.create = (texture, options) => {\n    model.texture = texture;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = texture.getHandle();\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.texture.getFormat());\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n  };\n  publicAPI.createFromTextureHandle = (textureHandle, options) => {\n    model.texture = null;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = textureHandle;\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(options.format);\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n    model.bindGroupTime.modified();\n  };\n  publicAPI.getBindGroupEntry = () => {\n    const foo = {\n      resource: publicAPI.getHandle()\n    };\n    return foo;\n  };\n  publicAPI.getShaderCode = (binding, group) => {\n    let ttype = 'f32';\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {\n      ttype = 'i32';\n    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {\n      ttype = 'u32';\n    }\n    let result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_${model.options.dimension}<${ttype}>;`;\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {\n      result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_depth_${model.options.dimension};`;\n    }\n    return result;\n  };\n  publicAPI.addSampler = (device, options) => {\n    const newSamp = vtkWebGPUSampler.newInstance({\n      label: `${model.label}Sampler`\n    });\n    newSamp.create(device, options);\n    publicAPI.setSampler(newSamp);\n  };\n  publicAPI.getBindGroupTime = () => {\n    // check if the handle changed\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.bindGroupTime;\n  };\n\n  // if the texture has changed then get a new view\n  publicAPI.getHandle = () => {\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.handle;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  texture: null,\n  handle: null,\n  sampler: null,\n  label: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    /* eslint-enable no-undef */\n    texture: {\n      sampleType: 'float',\n      viewDimension: '2d'\n      // multisampled: false,\n    }\n  };\n\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'texture']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'label', 'sampler']);\n  vtkWebGPUTextureView(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUTextureView$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUTextureView$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}