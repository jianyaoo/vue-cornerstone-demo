{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { n as newInstance$1, o as obj, e as setGet, c as macro, a as newTypedArray } from '../../macros2.js';\nimport { j as cross, l as normalize } from '../../Common/Core/Math/index.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkWebGPUBuffer from './Buffer.js';\nimport vtkWebGPUIndexBuffer from './IndexBuffer.js';\nimport vtkWebGPUTypes from './Types.js';\nimport Constants from './BufferManager/Constants.js';\nconst {\n  BufferUsage\n} = Constants;\nconst {\n  vtkErrorMacro\n} = macro;\nconst {\n  VtkDataTypes\n} = vtkDataArray;\n\n// the webgpu constants all show up as undefined\n/* eslint-disable no-undef */\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {};\nfunction _getFormatForDataArray(dataArray) {\n  let format;\n  switch (dataArray.getDataType()) {\n    case VtkDataTypes.UNSIGNED_CHAR:\n      format = 'uint8';\n      break;\n    case VtkDataTypes.FLOAT:\n      format = 'float32';\n      break;\n    case VtkDataTypes.UNSIGNED_INT:\n      format = 'uint32';\n      break;\n    case VtkDataTypes.INT:\n      format = 'sint32';\n      break;\n    case VtkDataTypes.DOUBLE:\n      format = 'float32';\n      break;\n    case VtkDataTypes.UNSIGNED_SHORT:\n      format = 'uint16';\n      break;\n    case VtkDataTypes.SHORT:\n      format = 'sin16';\n      break;\n    default:\n      format = 'float32';\n      break;\n  }\n  switch (dataArray.getNumberOfComponents()) {\n    case 2:\n      format += 'x2';\n      break;\n    case 3:\n      // only 32bit types support x3\n      if (!format.includes('32')) {\n        vtkErrorMacro(`unsupported x3 type for ${format}`);\n      }\n      format += 'x3';\n      break;\n    case 4:\n      format += 'x4';\n      break;\n  }\n  return format;\n}\nfunction packArray(indexBuffer, inArrayData, numComp, outputType, options) {\n  const result = {};\n  const flatSize = indexBuffer.getFlatSize();\n  if (!flatSize) {\n    return result;\n  }\n\n  // setup shift and scale\n  let shift = [0.0, 0.0, 0.0, 0.0];\n  if (options.shift) {\n    if (options.shift.length) {\n      shift = options.shift;\n    } else {\n      shift.fill(options.shift);\n    }\n  }\n  let scale = [1.0, 1.0, 1.0, 1.0];\n  if (options.scale) {\n    if (options.scale.length) {\n      scale = options.scale;\n    } else {\n      scale.fill(options.scale);\n    }\n  }\n  const packExtra = Object.prototype.hasOwnProperty.call(options, 'packExtra') ? options.packExtra : false;\n  let addAPoint;\n  let vboidx = 0;\n  const stride = numComp + (packExtra ? 1 : 0);\n  const packedVBO = newTypedArray(outputType, flatSize * stride);\n\n  // pick the right function based on point versus cell data\n  let flatIdMap = indexBuffer.getFlatIdToPointId();\n  if (options.cellData) {\n    flatIdMap = indexBuffer.getFlatIdToCellId();\n  }\n\n  // add data based on number of components\n  if (numComp === 1) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n    };\n  } else if (numComp === 2) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n    };\n  } else if (numComp === 3 && !packExtra) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n    };\n  } else if (numComp === 3 && packExtra) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n      packedVBO[vboidx++] = scale[3] * 1.0 + shift[3];\n    };\n  } else if (numComp === 4) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n      packedVBO[vboidx++] = scale[3] * inArrayData[i + 3] + shift[3];\n    };\n  }\n\n  // for each entry in the flat array process it\n  for (let index = 0; index < flatSize; index++) {\n    const inArrayId = numComp * flatIdMap[index];\n    addAPoint(inArrayId);\n  }\n  result.nativeArray = packedVBO;\n  return result;\n}\nfunction getNormal(pointData, i0, i1, i2) {\n  const v1 = [pointData[i2 * 3] - pointData[i1 * 3], pointData[i2 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i2 * 3 + 2] - pointData[i1 * 3 + 2]];\n  const v2 = [pointData[i0 * 3] - pointData[i1 * 3], pointData[i0 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i0 * 3 + 2] - pointData[i1 * 3 + 2]];\n  const result = [];\n  cross(v1, v2, result);\n  normalize(result);\n  return result;\n}\nfunction generateNormals(cellArray, pointArray) {\n  const pointData = pointArray.getData();\n  const cellArrayData = cellArray.getData();\n  if (!cellArrayData || !pointData) {\n    return null;\n  }\n\n  // return a cellArray of normals\n  const packedVBO = new Int8Array(cellArray.getNumberOfCells() * 4);\n  const size = cellArrayData.length;\n  let vboidx = 0;\n  for (let index = 0; index < size;) {\n    const normal = getNormal(pointData, cellArrayData[index + 1], cellArrayData[index + 2], cellArrayData[index + 3]);\n    packedVBO[vboidx++] = 127 * normal[0];\n    packedVBO[vboidx++] = 127 * normal[1];\n    packedVBO[vboidx++] = 127 * normal[2];\n    packedVBO[vboidx++] = 127;\n    index += cellArrayData[index] + 1;\n  }\n  return packedVBO;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUBufferManager methods\n// ----------------------------------------------------------------------------\nfunction vtkWebGPUBufferManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUBufferManager');\n  function _createBuffer(req) {\n    // if a dataArray is provided set the nativeArray\n    if (req.dataArray && !req.nativeArray) {\n      req.nativeArray = req.dataArray.getData();\n    }\n    let buffer;\n    let gpuUsage;\n\n    // handle index buffers\n    if (req.usage === BufferUsage.Index) {\n      // todo change to FlattenedIndex to be more clear\n      buffer = vtkWebGPUIndexBuffer.newInstance({\n        label: req.label\n      });\n      buffer.setDevice(model.device);\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.buildIndexBuffer(req);\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n      buffer.setArrayInformation([{\n        format: req.format\n      }]);\n    }\n\n    // create one if not done already\n    if (!buffer) {\n      buffer = vtkWebGPUBuffer.newInstance({\n        label: req.label\n      });\n      buffer.setDevice(model.device);\n    }\n\n    // handle uniform buffers\n    if (req.usage === BufferUsage.UniformArray) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // handle storage buffers\n    if (req.usage === BufferUsage.Storage) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // handle textures\n    if (req.usage === BufferUsage.Texture) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.COPY_SRC;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // all of the below types that have gpuUsage = VERTEX require format\n    // to be provided.\n\n    // handle point data\n    if (req.usage === BufferUsage.PointArray) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      const arrayType = vtkWebGPUTypes.getNativeTypeFromBufferFormat(req.format);\n      const result = packArray(req.indexBuffer, req.dataArray.getData(), req.dataArray.getNumberOfComponents(), arrayType, {\n        packExtra: req.packExtra,\n        shift: req.shift,\n        scale: req.scale,\n        cellData: req.cellData,\n        cellOffset: req.cellOffset\n      });\n      buffer.createAndWrite(result.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format,\n        interpolation: req.cellData ? 'flat' : 'perspective'\n      }]);\n    }\n\n    // handle normals from points, snorm8x4\n    if (req.usage === BufferUsage.NormalsFromPoints) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      const arrayType = vtkWebGPUTypes.getNativeTypeFromBufferFormat(req.format);\n      const normals = generateNormals(req.cells, req.dataArray);\n      const result = packArray(req.indexBuffer, normals, 4, arrayType, {\n        cellData: true\n      });\n      buffer.createAndWrite(result.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format,\n        interpolation: 'flat'\n      }]);\n    }\n    if (req.usage === BufferUsage.RawVertex) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format\n      }]);\n    }\n    buffer.setSourceTime(req.time);\n    return buffer;\n  }\n\n  // is the buffer already present?\n  publicAPI.hasBuffer = hash => model.device.hasCachedObject(hash);\n  publicAPI.getBuffer = req => {\n    // if we have a source the get/create/cache the buffer\n    if (req.hash) {\n      return model.device.getCachedObject(req.hash, _createBuffer, req);\n    }\n    return _createBuffer(req);\n  };\n  publicAPI.getBufferForPointArray = (dataArray, indexBuffer) => {\n    const format = _getFormatForDataArray(dataArray);\n    const buffRequest = {\n      hash: `${dataArray.getMTime()}I${indexBuffer.getMTime()}${format}`,\n      usage: BufferUsage.PointArray,\n      format,\n      dataArray,\n      indexBuffer\n    };\n    return publicAPI.getBuffer(buffRequest);\n  };\n  publicAPI.getFullScreenQuadBuffer = () => {\n    if (model.fullScreenQuadBuffer) {\n      return model.fullScreenQuadBuffer;\n    }\n    model.fullScreenQuadBuffer = vtkWebGPUBuffer.newInstance();\n    model.fullScreenQuadBuffer.setDevice(model.device);\n\n    // prettier-ignore\n    const array = new Float32Array([-1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 0.0]);\n    model.fullScreenQuadBuffer.createAndWrite(array, GPUBufferUsage.VERTEX);\n    model.fullScreenQuadBuffer.setStrideInBytes(12);\n    model.fullScreenQuadBuffer.setArrayInformation([{\n      offset: 0,\n      format: 'float32x3'\n    }]);\n    return model.fullScreenQuadBuffer;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  fullScreenQuadBuffer: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  obj(publicAPI, model);\n  setGet(publicAPI, model, ['device']);\n  vtkWebGPUBufferManager(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUBufferManager$1 = {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};\nexport { STATIC, vtkWebGPUBufferManager$1 as default, extend, newInstance };","map":{"version":3,"names":["n","newInstance$1","o","obj","e","setGet","c","macro","a","newTypedArray","j","cross","l","normalize","vtkDataArray","vtkWebGPUBuffer","vtkWebGPUIndexBuffer","vtkWebGPUTypes","Constants","BufferUsage","vtkErrorMacro","VtkDataTypes","STATIC","_getFormatForDataArray","dataArray","format","getDataType","UNSIGNED_CHAR","FLOAT","UNSIGNED_INT","INT","DOUBLE","UNSIGNED_SHORT","SHORT","getNumberOfComponents","includes","packArray","indexBuffer","inArrayData","numComp","outputType","options","result","flatSize","getFlatSize","shift","length","fill","scale","packExtra","Object","prototype","hasOwnProperty","call","addAPoint","vboidx","stride","packedVBO","flatIdMap","getFlatIdToPointId","cellData","getFlatIdToCellId","addAPointFunc","i","index","inArrayId","nativeArray","getNormal","pointData","i0","i1","i2","v1","v2","generateNormals","cellArray","pointArray","getData","cellArrayData","Int8Array","getNumberOfCells","size","normal","vtkWebGPUBufferManager","publicAPI","model","classHierarchy","push","_createBuffer","req","buffer","gpuUsage","usage","Index","newInstance","label","setDevice","device","GPUBufferUsage","INDEX","COPY_DST","buildIndexBuffer","createAndWrite","setArrayInformation","UniformArray","UNIFORM","Storage","STORAGE","Texture","COPY_SRC","PointArray","VERTEX","arrayType","getNativeTypeFromBufferFormat","cellOffset","setStrideInBytes","getByteStrideFromBufferFormat","offset","interpolation","NormalsFromPoints","normals","cells","RawVertex","setSourceTime","time","hasBuffer","hash","hasCachedObject","getBuffer","getCachedObject","getBufferForPointArray","buffRequest","getMTime","getFullScreenQuadBuffer","fullScreenQuadBuffer","array","Float32Array","DEFAULT_VALUES","extend","initialValues","arguments","undefined","assign","vtkWebGPUBufferManager$1","default"],"sources":["/Users/yzy/Documents/Playground/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager.js"],"sourcesContent":["import { n as newInstance$1, o as obj, e as setGet, c as macro, a as newTypedArray } from '../../macros2.js';\nimport { j as cross, l as normalize } from '../../Common/Core/Math/index.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkWebGPUBuffer from './Buffer.js';\nimport vtkWebGPUIndexBuffer from './IndexBuffer.js';\nimport vtkWebGPUTypes from './Types.js';\nimport Constants from './BufferManager/Constants.js';\n\nconst {\n  BufferUsage\n} = Constants;\nconst {\n  vtkErrorMacro\n} = macro;\nconst {\n  VtkDataTypes\n} = vtkDataArray;\n\n// the webgpu constants all show up as undefined\n/* eslint-disable no-undef */\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {};\nfunction _getFormatForDataArray(dataArray) {\n  let format;\n  switch (dataArray.getDataType()) {\n    case VtkDataTypes.UNSIGNED_CHAR:\n      format = 'uint8';\n      break;\n    case VtkDataTypes.FLOAT:\n      format = 'float32';\n      break;\n    case VtkDataTypes.UNSIGNED_INT:\n      format = 'uint32';\n      break;\n    case VtkDataTypes.INT:\n      format = 'sint32';\n      break;\n    case VtkDataTypes.DOUBLE:\n      format = 'float32';\n      break;\n    case VtkDataTypes.UNSIGNED_SHORT:\n      format = 'uint16';\n      break;\n    case VtkDataTypes.SHORT:\n      format = 'sin16';\n      break;\n    default:\n      format = 'float32';\n      break;\n  }\n  switch (dataArray.getNumberOfComponents()) {\n    case 2:\n      format += 'x2';\n      break;\n    case 3:\n      // only 32bit types support x3\n      if (!format.includes('32')) {\n        vtkErrorMacro(`unsupported x3 type for ${format}`);\n      }\n      format += 'x3';\n      break;\n    case 4:\n      format += 'x4';\n      break;\n  }\n  return format;\n}\nfunction packArray(indexBuffer, inArrayData, numComp, outputType, options) {\n  const result = {};\n  const flatSize = indexBuffer.getFlatSize();\n  if (!flatSize) {\n    return result;\n  }\n\n  // setup shift and scale\n  let shift = [0.0, 0.0, 0.0, 0.0];\n  if (options.shift) {\n    if (options.shift.length) {\n      shift = options.shift;\n    } else {\n      shift.fill(options.shift);\n    }\n  }\n  let scale = [1.0, 1.0, 1.0, 1.0];\n  if (options.scale) {\n    if (options.scale.length) {\n      scale = options.scale;\n    } else {\n      scale.fill(options.scale);\n    }\n  }\n  const packExtra = Object.prototype.hasOwnProperty.call(options, 'packExtra') ? options.packExtra : false;\n  let addAPoint;\n  let vboidx = 0;\n  const stride = numComp + (packExtra ? 1 : 0);\n  const packedVBO = newTypedArray(outputType, flatSize * stride);\n\n  // pick the right function based on point versus cell data\n  let flatIdMap = indexBuffer.getFlatIdToPointId();\n  if (options.cellData) {\n    flatIdMap = indexBuffer.getFlatIdToCellId();\n  }\n\n  // add data based on number of components\n  if (numComp === 1) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n    };\n  } else if (numComp === 2) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n    };\n  } else if (numComp === 3 && !packExtra) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n    };\n  } else if (numComp === 3 && packExtra) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n      packedVBO[vboidx++] = scale[3] * 1.0 + shift[3];\n    };\n  } else if (numComp === 4) {\n    addAPoint = function addAPointFunc(i) {\n      packedVBO[vboidx++] = scale[0] * inArrayData[i] + shift[0];\n      packedVBO[vboidx++] = scale[1] * inArrayData[i + 1] + shift[1];\n      packedVBO[vboidx++] = scale[2] * inArrayData[i + 2] + shift[2];\n      packedVBO[vboidx++] = scale[3] * inArrayData[i + 3] + shift[3];\n    };\n  }\n\n  // for each entry in the flat array process it\n  for (let index = 0; index < flatSize; index++) {\n    const inArrayId = numComp * flatIdMap[index];\n    addAPoint(inArrayId);\n  }\n  result.nativeArray = packedVBO;\n  return result;\n}\nfunction getNormal(pointData, i0, i1, i2) {\n  const v1 = [pointData[i2 * 3] - pointData[i1 * 3], pointData[i2 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i2 * 3 + 2] - pointData[i1 * 3 + 2]];\n  const v2 = [pointData[i0 * 3] - pointData[i1 * 3], pointData[i0 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i0 * 3 + 2] - pointData[i1 * 3 + 2]];\n  const result = [];\n  cross(v1, v2, result);\n  normalize(result);\n  return result;\n}\nfunction generateNormals(cellArray, pointArray) {\n  const pointData = pointArray.getData();\n  const cellArrayData = cellArray.getData();\n  if (!cellArrayData || !pointData) {\n    return null;\n  }\n\n  // return a cellArray of normals\n  const packedVBO = new Int8Array(cellArray.getNumberOfCells() * 4);\n  const size = cellArrayData.length;\n  let vboidx = 0;\n  for (let index = 0; index < size;) {\n    const normal = getNormal(pointData, cellArrayData[index + 1], cellArrayData[index + 2], cellArrayData[index + 3]);\n    packedVBO[vboidx++] = 127 * normal[0];\n    packedVBO[vboidx++] = 127 * normal[1];\n    packedVBO[vboidx++] = 127 * normal[2];\n    packedVBO[vboidx++] = 127;\n    index += cellArrayData[index] + 1;\n  }\n  return packedVBO;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUBufferManager methods\n// ----------------------------------------------------------------------------\nfunction vtkWebGPUBufferManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUBufferManager');\n  function _createBuffer(req) {\n    // if a dataArray is provided set the nativeArray\n    if (req.dataArray && !req.nativeArray) {\n      req.nativeArray = req.dataArray.getData();\n    }\n    let buffer;\n    let gpuUsage;\n\n    // handle index buffers\n    if (req.usage === BufferUsage.Index) {\n      // todo change to FlattenedIndex to be more clear\n      buffer = vtkWebGPUIndexBuffer.newInstance({\n        label: req.label\n      });\n      buffer.setDevice(model.device);\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.buildIndexBuffer(req);\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n      buffer.setArrayInformation([{\n        format: req.format\n      }]);\n    }\n\n    // create one if not done already\n    if (!buffer) {\n      buffer = vtkWebGPUBuffer.newInstance({\n        label: req.label\n      });\n      buffer.setDevice(model.device);\n    }\n\n    // handle uniform buffers\n    if (req.usage === BufferUsage.UniformArray) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // handle storage buffers\n    if (req.usage === BufferUsage.Storage) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // handle textures\n    if (req.usage === BufferUsage.Texture) {\n      /* eslint-disable no-bitwise */\n      gpuUsage = GPUBufferUsage.COPY_SRC;\n      /* eslint-enable no-bitwise */\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n    }\n\n    // all of the below types that have gpuUsage = VERTEX require format\n    // to be provided.\n\n    // handle point data\n    if (req.usage === BufferUsage.PointArray) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      const arrayType = vtkWebGPUTypes.getNativeTypeFromBufferFormat(req.format);\n      const result = packArray(req.indexBuffer, req.dataArray.getData(), req.dataArray.getNumberOfComponents(), arrayType, {\n        packExtra: req.packExtra,\n        shift: req.shift,\n        scale: req.scale,\n        cellData: req.cellData,\n        cellOffset: req.cellOffset\n      });\n      buffer.createAndWrite(result.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format,\n        interpolation: req.cellData ? 'flat' : 'perspective'\n      }]);\n    }\n\n    // handle normals from points, snorm8x4\n    if (req.usage === BufferUsage.NormalsFromPoints) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      const arrayType = vtkWebGPUTypes.getNativeTypeFromBufferFormat(req.format);\n      const normals = generateNormals(req.cells, req.dataArray);\n      const result = packArray(req.indexBuffer, normals, 4, arrayType, {\n        cellData: true\n      });\n      buffer.createAndWrite(result.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format,\n        interpolation: 'flat'\n      }]);\n    }\n    if (req.usage === BufferUsage.RawVertex) {\n      gpuUsage = GPUBufferUsage.VERTEX;\n      buffer.createAndWrite(req.nativeArray, gpuUsage);\n      buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));\n      buffer.setArrayInformation([{\n        offset: 0,\n        format: req.format\n      }]);\n    }\n    buffer.setSourceTime(req.time);\n    return buffer;\n  }\n\n  // is the buffer already present?\n  publicAPI.hasBuffer = hash => model.device.hasCachedObject(hash);\n  publicAPI.getBuffer = req => {\n    // if we have a source the get/create/cache the buffer\n    if (req.hash) {\n      return model.device.getCachedObject(req.hash, _createBuffer, req);\n    }\n    return _createBuffer(req);\n  };\n  publicAPI.getBufferForPointArray = (dataArray, indexBuffer) => {\n    const format = _getFormatForDataArray(dataArray);\n    const buffRequest = {\n      hash: `${dataArray.getMTime()}I${indexBuffer.getMTime()}${format}`,\n      usage: BufferUsage.PointArray,\n      format,\n      dataArray,\n      indexBuffer\n    };\n    return publicAPI.getBuffer(buffRequest);\n  };\n  publicAPI.getFullScreenQuadBuffer = () => {\n    if (model.fullScreenQuadBuffer) {\n      return model.fullScreenQuadBuffer;\n    }\n    model.fullScreenQuadBuffer = vtkWebGPUBuffer.newInstance();\n    model.fullScreenQuadBuffer.setDevice(model.device);\n\n    // prettier-ignore\n    const array = new Float32Array([-1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 0.0]);\n    model.fullScreenQuadBuffer.createAndWrite(array, GPUBufferUsage.VERTEX);\n    model.fullScreenQuadBuffer.setStrideInBytes(12);\n    model.fullScreenQuadBuffer.setArrayInformation([{\n      offset: 0,\n      format: 'float32x3'\n    }]);\n    return model.fullScreenQuadBuffer;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  fullScreenQuadBuffer: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  obj(publicAPI, model);\n  setGet(publicAPI, model, ['device']);\n  vtkWebGPUBufferManager(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUBufferManager$1 = {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};\n\nexport { STATIC, vtkWebGPUBufferManager$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}