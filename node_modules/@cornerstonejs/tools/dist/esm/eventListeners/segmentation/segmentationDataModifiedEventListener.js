import { cache, getEnabledElementByIds, utilities as csUtils, } from '@cornerstonejs/core';
import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';
import SegmentationRepresentations from '../../enums/SegmentationRepresentations';
import * as SegmentationState from '../../stateManagement/segmentation/segmentationState';
import { isVolumeSegmentation } from '../../tools/segmentation/strategies/utils/stackVolumeCheck';
import { getToolGroup } from '../../store/ToolGroupManager';
const onSegmentationDataModified = function (evt) {
    const { segmentationId, modifiedSlicesToUse } = evt.detail;
    const { representationData, type } = SegmentationState.getSegmentation(segmentationId);
    const toolGroupIds = SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);
    if (type !== SegmentationRepresentations.Labelmap) {
        throw new Error(`onSegmentationDataModified: representationType ${type} not supported yet`);
    }
    if (isVolumeSegmentation(representationData[type])) {
        const segmentationVolume = cache.getVolume(representationData[type].volumeId);
        if (!segmentationVolume) {
            console.warn('segmentation not found in cache');
            return;
        }
        const { imageData, vtkOpenGLTexture } = segmentationVolume;
        let slicesToUpdate;
        if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {
            slicesToUpdate = modifiedSlicesToUse;
        }
        else {
            const numSlices = imageData.getDimensions()[2];
            slicesToUpdate = [...Array(numSlices).keys()];
        }
        slicesToUpdate.forEach((i) => {
            vtkOpenGLTexture.setUpdatedFrame(i);
        });
        imageData.modified();
    }
    else {
        toolGroupIds.forEach((toolGroupId) => {
            const toolGroupSegmentationRepresentations = SegmentationState.getSegmentationRepresentations(toolGroupId);
            const toolGroup = getToolGroup(toolGroupId);
            const viewportsInfo = toolGroup.getViewportsInfo();
            toolGroupSegmentationRepresentations.forEach((representation) => {
                if (representation.segmentationId !== segmentationId) {
                    return;
                }
                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
                    const viewport = getEnabledElementByIds(viewportId, renderingEngineId).viewport;
                    const actorEntry = viewport.getActor(representation.segmentationRepresentationUID);
                    if (!actorEntry) {
                        return;
                    }
                    const currentImageId = viewport.getCurrentImageId();
                    const segImageData = actorEntry.actor.getMapper().getInputData();
                    const { imageIdReferenceMap } = representationData[type];
                    const currentSegmentationImageId = imageIdReferenceMap.get(currentImageId);
                    const segmentationImage = cache.getImage(currentSegmentationImageId);
                    segImageData.modified();
                    csUtils.updateVTKImageDataWithCornerstoneImage(segImageData, segmentationImage);
                });
            });
        });
    }
    toolGroupIds.forEach((toolGroupId) => {
        triggerSegmentationRender(toolGroupId);
    });
};
export default onSegmentationDataModified;
//# sourceMappingURL=segmentationDataModifiedEventListener.js.map