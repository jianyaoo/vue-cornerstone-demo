{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { metaData } from \"@cornerstonejs/core\";\nimport cornerstoneDICOMImageLoader from \"@cornerstonejs/dicom-image-loader\";\n/**\n * preloads imageIds metadata in memory\n **/\nasync function prefetchMetadataInformation(imageIdsToPrefetch) {\n  for (let i = 0; i < imageIdsToPrefetch.length; i++) {\n    await cornerstoneDICOMImageLoader.wadouri.loadImage(imageIdsToPrefetch[i]).promise;\n  }\n}\nfunction getFrameInformation(imageId) {\n  if (imageId.includes(\"wadors:\")) {\n    const frameIndex = imageId.indexOf(\"/frames/\");\n    const imageIdFrameless = frameIndex > 0 ? imageId.slice(0, frameIndex + 8) : imageId;\n    return {\n      frameIndex,\n      imageIdFrameless\n    };\n  } else {\n    const frameIndex = imageId.indexOf(\"&frame=\");\n    let imageIdFrameless = frameIndex > 0 ? imageId.slice(0, frameIndex + 7) : imageId;\n    if (!imageIdFrameless.includes(\"&frame=\")) {\n      imageIdFrameless = imageIdFrameless + \"&frame=\";\n    }\n    return {\n      frameIndex,\n      imageIdFrameless\n    };\n  }\n}\n/**\n * Receives a list of imageids possibly referring to multiframe dicom images\n * and returns a list of imageid where each imageid referes to one frame.\n * For each imageId representing a multiframe image with n frames,\n * it will create n new imageids, one for each frame, and returns the new list of imageids\n * If a particular imageid no refer to a mutiframe image data, it will be just copied into the new list\n * @returns new list of imageids where each imageid represents a frame\n */\nfunction convertMultiframeImageIds(imageIds) {\n  const newImageIds = [];\n  imageIds.forEach(imageId => {\n    const {\n      imageIdFrameless\n    } = getFrameInformation(imageId);\n    const instanceMetaData = metaData.get(\"multiframeModule\", imageId);\n    if (instanceMetaData && instanceMetaData.NumberOfFrames && instanceMetaData.NumberOfFrames > 1) {\n      const NumberOfFrames = instanceMetaData.NumberOfFrames;\n      for (let i = 0; i < NumberOfFrames; i++) {\n        const newImageId = imageIdFrameless + (i + 1);\n        newImageIds.push(newImageId);\n      }\n    } else {\n      newImageIds.push(imageId);\n    }\n  });\n  return newImageIds;\n}\nexport { convertMultiframeImageIds, prefetchMetadataInformation };","map":{"version":3,"names":["metaData","cornerstoneDICOMImageLoader","prefetchMetadataInformation","imageIdsToPrefetch","i","length","wadouri","loadImage","promise","getFrameInformation","imageId","includes","frameIndex","indexOf","imageIdFrameless","slice","convertMultiframeImageIds","imageIds","newImageIds","forEach","instanceMetaData","get","NumberOfFrames","newImageId","push"],"sources":["/root/vue-cornerstone-demo/src/cornerstone/dicomwebClient/convertMultiframeImageIds.js"],"sourcesContent":["import { metaData } from \"@cornerstonejs/core\";\nimport cornerstoneDICOMImageLoader from \"@cornerstonejs/dicom-image-loader\";\n/**\n * preloads imageIds metadata in memory\n **/\nasync function prefetchMetadataInformation(imageIdsToPrefetch) {\n  for (let i = 0; i < imageIdsToPrefetch.length; i++) {\n    await cornerstoneDICOMImageLoader.wadouri.loadImage(imageIdsToPrefetch[i])\n      .promise;\n  }\n}\n\nfunction getFrameInformation(imageId) {\n  if (imageId.includes(\"wadors:\")) {\n    const frameIndex = imageId.indexOf(\"/frames/\");\n    const imageIdFrameless =\n      frameIndex > 0 ? imageId.slice(0, frameIndex + 8) : imageId;\n    return {\n      frameIndex,\n      imageIdFrameless,\n    };\n  } else {\n    const frameIndex = imageId.indexOf(\"&frame=\");\n    let imageIdFrameless =\n      frameIndex > 0 ? imageId.slice(0, frameIndex + 7) : imageId;\n    if (!imageIdFrameless.includes(\"&frame=\")) {\n      imageIdFrameless = imageIdFrameless + \"&frame=\";\n    }\n    return {\n      frameIndex,\n      imageIdFrameless,\n    };\n  }\n}\n/**\n * Receives a list of imageids possibly referring to multiframe dicom images\n * and returns a list of imageid where each imageid referes to one frame.\n * For each imageId representing a multiframe image with n frames,\n * it will create n new imageids, one for each frame, and returns the new list of imageids\n * If a particular imageid no refer to a mutiframe image data, it will be just copied into the new list\n * @returns new list of imageids where each imageid represents a frame\n */\nfunction convertMultiframeImageIds(imageIds) {\n  const newImageIds = [];\n  imageIds.forEach((imageId) => {\n    const { imageIdFrameless } = getFrameInformation(imageId);\n    const instanceMetaData = metaData.get(\"multiframeModule\", imageId);\n    if (\n      instanceMetaData &&\n      instanceMetaData.NumberOfFrames &&\n      instanceMetaData.NumberOfFrames > 1\n    ) {\n      const NumberOfFrames = instanceMetaData.NumberOfFrames;\n      for (let i = 0; i < NumberOfFrames; i++) {\n        const newImageId = imageIdFrameless + (i + 1);\n        newImageIds.push(newImageId);\n      }\n    } else {\n      newImageIds.push(imageId);\n    }\n  });\n  return newImageIds;\n}\n\nexport { convertMultiframeImageIds, prefetchMetadataInformation };\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,qBAAqB;AAC9C,OAAOC,2BAA2B,MAAM,mCAAmC;AAC3E;AACA;AACA;AACA,eAAeC,2BAA2BA,CAACC,kBAAkB,EAAE;EAC7D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,kBAAkB,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAClD,MAAMH,2BAA2B,CAACK,OAAO,CAACC,SAAS,CAACJ,kBAAkB,CAACC,CAAC,CAAC,CAAC,CACvEI,OAAO;EACZ;AACF;AAEA,SAASC,mBAAmBA,CAACC,OAAO,EAAE;EACpC,IAAIA,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;IAC/B,MAAMC,UAAU,GAAGF,OAAO,CAACG,OAAO,CAAC,UAAU,CAAC;IAC9C,MAAMC,gBAAgB,GACpBF,UAAU,GAAG,CAAC,GAAGF,OAAO,CAACK,KAAK,CAAC,CAAC,EAAEH,UAAU,GAAG,CAAC,CAAC,GAAGF,OAAO;IAC7D,OAAO;MACLE,UAAU;MACVE;IACF,CAAC;EACH,CAAC,MAAM;IACL,MAAMF,UAAU,GAAGF,OAAO,CAACG,OAAO,CAAC,SAAS,CAAC;IAC7C,IAAIC,gBAAgB,GAClBF,UAAU,GAAG,CAAC,GAAGF,OAAO,CAACK,KAAK,CAAC,CAAC,EAAEH,UAAU,GAAG,CAAC,CAAC,GAAGF,OAAO;IAC7D,IAAI,CAACI,gBAAgB,CAACH,QAAQ,CAAC,SAAS,CAAC,EAAE;MACzCG,gBAAgB,GAAGA,gBAAgB,GAAG,SAAS;IACjD;IACA,OAAO;MACLF,UAAU;MACVE;IACF,CAAC;EACH;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,yBAAyBA,CAACC,QAAQ,EAAE;EAC3C,MAAMC,WAAW,GAAG,EAAE;EACtBD,QAAQ,CAACE,OAAO,CAAET,OAAO,IAAK;IAC5B,MAAM;MAAEI;IAAiB,CAAC,GAAGL,mBAAmB,CAACC,OAAO,CAAC;IACzD,MAAMU,gBAAgB,GAAGpB,QAAQ,CAACqB,GAAG,CAAC,kBAAkB,EAAEX,OAAO,CAAC;IAClE,IACEU,gBAAgB,IAChBA,gBAAgB,CAACE,cAAc,IAC/BF,gBAAgB,CAACE,cAAc,GAAG,CAAC,EACnC;MACA,MAAMA,cAAc,GAAGF,gBAAgB,CAACE,cAAc;MACtD,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,cAAc,EAAElB,CAAC,EAAE,EAAE;QACvC,MAAMmB,UAAU,GAAGT,gBAAgB,IAAIV,CAAC,GAAG,CAAC,CAAC;QAC7Cc,WAAW,CAACM,IAAI,CAACD,UAAU,CAAC;MAC9B;IACF,CAAC,MAAM;MACLL,WAAW,CAACM,IAAI,CAACd,OAAO,CAAC;IAC3B;EACF,CAAC,CAAC;EACF,OAAOQ,WAAW;AACpB;AAEA,SAASF,yBAAyB,EAAEd,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}