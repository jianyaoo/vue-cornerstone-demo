{"ast":null,"code":"const BELOW_RANGE_COLOR_INDEX = 0;\nconst ABOVE_RANGE_COLOR_INDEX = 1;\nconst NAN_COLOR_INDEX = 2;\nfunction HSVToRGB(hue, sat, val) {\n  if (hue > 1) {\n    throw new Error('HSVToRGB expects hue < 1');\n  }\n  const rgb = [];\n  if (sat === 0) {\n    rgb[0] = val;\n    rgb[1] = val;\n    rgb[2] = val;\n    return rgb;\n  }\n  const hueCase = Math.floor(hue * 6);\n  const frac = 6 * hue - hueCase;\n  const lx = val * (1 - sat);\n  const ly = val * (1 - sat * frac);\n  const lz = val * (1 - sat * (1 - frac));\n  switch (hueCase) {\n    case 0:\n    case 6:\n      rgb[0] = val;\n      rgb[1] = lz;\n      rgb[2] = lx;\n      break;\n    case 1:\n      rgb[0] = ly;\n      rgb[1] = val;\n      rgb[2] = lx;\n      break;\n    case 2:\n      rgb[0] = lx;\n      rgb[1] = val;\n      rgb[2] = lz;\n      break;\n    case 3:\n      rgb[0] = lx;\n      rgb[1] = ly;\n      rgb[2] = val;\n      break;\n    case 4:\n      rgb[0] = lz;\n      rgb[1] = lx;\n      rgb[2] = val;\n      break;\n    case 5:\n      rgb[0] = val;\n      rgb[1] = lx;\n      rgb[2] = ly;\n      break;\n  }\n  return rgb;\n}\nfunction linearIndexLookupMain(v, p) {\n  let dIndex;\n  if (v < p.Range[0]) {\n    dIndex = p.MaxIndex + BELOW_RANGE_COLOR_INDEX + 1.5;\n  } else if (v > p.Range[1]) {\n    dIndex = p.MaxIndex + ABOVE_RANGE_COLOR_INDEX + 1.5;\n  } else {\n    dIndex = (v + p.Shift) * p.Scale;\n  }\n  return Math.floor(dIndex);\n}\nclass LookupTable {\n  constructor() {\n    this.NumberOfColors = 256;\n    this.Ramp = 'linear';\n    this.TableRange = [0, 255];\n    this.HueRange = [0, 0.66667];\n    this.SaturationRange = [1, 1];\n    this.ValueRange = [1, 1];\n    this.AlphaRange = [1, 1];\n    this.NaNColor = [128, 0, 0, 255];\n    this.BelowRangeColor = [0, 0, 0, 255];\n    this.UseBelowRangeColor = true;\n    this.AboveRangeColor = [255, 255, 255, 255];\n    this.UseAboveRangeColor = true;\n    this.InputRange = [0, 255];\n    this.Table = [];\n  }\n  setNumberOfTableValues(number) {\n    this.NumberOfColors = number;\n  }\n  setRamp(ramp) {\n    this.Ramp = ramp;\n  }\n  setTableRange(start, end) {\n    this.TableRange[0] = start;\n    this.TableRange[1] = end;\n  }\n  setHueRange(start, end) {\n    this.HueRange[0] = start;\n    this.HueRange[1] = end;\n  }\n  setSaturationRange(start, end) {\n    this.SaturationRange[0] = start;\n    this.SaturationRange[1] = end;\n  }\n  setValueRange(start, end) {\n    this.ValueRange[0] = start;\n    this.ValueRange[1] = end;\n  }\n  setRange(start, end) {\n    this.InputRange[0] = start;\n    this.InputRange[1] = end;\n  }\n  setAlphaRange(start, end) {\n    this.AlphaRange[0] = start;\n    this.AlphaRange[1] = end;\n  }\n  getColor(scalar) {\n    return this.mapValue(scalar);\n  }\n  build(force) {\n    if (this.Table.length > 1 && !force) {\n      return;\n    }\n    this.Table = [];\n    const maxIndex = this.NumberOfColors - 1;\n    let hinc, sinc, vinc, ainc;\n    if (maxIndex) {\n      hinc = (this.HueRange[1] - this.HueRange[0]) / maxIndex;\n      sinc = (this.SaturationRange[1] - this.SaturationRange[0]) / maxIndex;\n      vinc = (this.ValueRange[1] - this.ValueRange[0]) / maxIndex;\n      ainc = (this.AlphaRange[1] - this.AlphaRange[0]) / maxIndex;\n    } else {\n      hinc = sinc = vinc = ainc = 0.0;\n    }\n    for (let i = 0; i <= maxIndex; i++) {\n      const hue = this.HueRange[0] + i * hinc;\n      const sat = this.SaturationRange[0] + i * sinc;\n      const val = this.ValueRange[0] + i * vinc;\n      const alpha = this.AlphaRange[0] + i * ainc;\n      const rgb = HSVToRGB(hue, sat, val);\n      const c_rgba = [0, 0, 0, 0];\n      switch (this.Ramp) {\n        case 'scurve':\n          c_rgba[0] = Math.floor(127.5 * (1.0 + Math.cos((1.0 - rgb[0]) * Math.PI)));\n          c_rgba[1] = Math.floor(127.5 * (1.0 + Math.cos((1.0 - rgb[1]) * Math.PI)));\n          c_rgba[2] = Math.floor(127.5 * (1.0 + Math.cos((1.0 - rgb[2]) * Math.PI)));\n          c_rgba[3] = Math.floor(alpha * 255);\n          break;\n        case 'linear':\n          c_rgba[0] = Math.floor(rgb[0] * 255 + 0.5);\n          c_rgba[1] = Math.floor(rgb[1] * 255 + 0.5);\n          c_rgba[2] = Math.floor(rgb[2] * 255 + 0.5);\n          c_rgba[3] = Math.floor(alpha * 255 + 0.5);\n          break;\n        case 'sqrt':\n          c_rgba[0] = Math.floor(Math.sqrt(rgb[0]) * 255 + 0.5);\n          c_rgba[1] = Math.floor(Math.sqrt(rgb[1]) * 255 + 0.5);\n          c_rgba[2] = Math.floor(Math.sqrt(rgb[2]) * 255 + 0.5);\n          c_rgba[3] = Math.floor(Math.sqrt(alpha) * 255 + 0.5);\n          break;\n        default:\n          throw new Error(`Invalid Ramp value (${this.Ramp})`);\n      }\n      this.Table.push(c_rgba);\n    }\n    this.buildSpecialColors();\n  }\n  buildSpecialColors() {\n    const numberOfColors = this.NumberOfColors;\n    const belowRangeColorIndex = numberOfColors + BELOW_RANGE_COLOR_INDEX;\n    const aboveRangeColorIndex = numberOfColors + ABOVE_RANGE_COLOR_INDEX;\n    const nanColorIndex = numberOfColors + NAN_COLOR_INDEX;\n    if (this.UseBelowRangeColor || numberOfColors === 0) {\n      this.Table[belowRangeColorIndex] = this.BelowRangeColor;\n    } else {\n      this.Table[belowRangeColorIndex] = this.Table[0];\n    }\n    if (this.UseAboveRangeColor || numberOfColors === 0) {\n      this.Table[aboveRangeColorIndex] = this.AboveRangeColor;\n    } else {\n      this.Table[aboveRangeColorIndex] = this.Table[numberOfColors - 1];\n    }\n    this.Table[nanColorIndex] = this.NaNColor;\n  }\n  mapValue(v) {\n    const index = this.getIndex(v);\n    if (index < 0) {\n      return this.NaNColor;\n    } else if (index === 0) {\n      if (this.UseBelowRangeColor && v < this.TableRange[0]) {\n        return this.BelowRangeColor;\n      }\n    } else if (index === this.NumberOfColors - 1) {\n      if (this.UseAboveRangeColor && v > this.TableRange[1]) {\n        return this.AboveRangeColor;\n      }\n    }\n    return this.Table[index];\n  }\n  getIndex(v) {\n    const p = {\n      Range: [],\n      MaxIndex: this.NumberOfColors - 1,\n      Shift: -this.TableRange[0],\n      Scale: 1\n    };\n    if (this.TableRange[1] <= this.TableRange[0]) {\n      p.Scale = Number.MAX_VALUE;\n    } else {\n      p.Scale = p.MaxIndex / (this.TableRange[1] - this.TableRange[0]);\n    }\n    p.Range[0] = this.TableRange[0];\n    p.Range[1] = this.TableRange[1];\n    if (isNaN(v)) {\n      return -1;\n    }\n    let index = linearIndexLookupMain(v, p);\n    if (index === this.NumberOfColors + BELOW_RANGE_COLOR_INDEX) {\n      index = 0;\n    } else if (index === this.NumberOfColors + ABOVE_RANGE_COLOR_INDEX) {\n      index = this.NumberOfColors - 1;\n    }\n    return index;\n  }\n  setTableValue(index, rgba) {\n    if (arguments.length === 5) {\n      rgba = Array.prototype.slice.call(arguments, 1);\n    }\n    if (index < 0) {\n      throw new Error(`Can't set the table value for negative index (${index})`);\n    }\n    if (index >= this.NumberOfColors) {\n      new Error(`Index ${index} is greater than the number of colors ${this.NumberOfColors}`);\n    }\n    this.Table[index] = rgba;\n    if (index === 0 || index === this.NumberOfColors - 1) {\n      this.buildSpecialColors();\n    }\n  }\n}\nexport default LookupTable;","map":{"version":3,"names":["BELOW_RANGE_COLOR_INDEX","ABOVE_RANGE_COLOR_INDEX","NAN_COLOR_INDEX","HSVToRGB","hue","sat","val","Error","rgb","hueCase","Math","floor","frac","lx","ly","lz","linearIndexLookupMain","v","p","dIndex","Range","MaxIndex","Shift","Scale","LookupTable","constructor","NumberOfColors","Ramp","TableRange","HueRange","SaturationRange","ValueRange","AlphaRange","NaNColor","BelowRangeColor","UseBelowRangeColor","AboveRangeColor","UseAboveRangeColor","InputRange","Table","setNumberOfTableValues","number","setRamp","ramp","setTableRange","start","end","setHueRange","setSaturationRange","setValueRange","setRange","setAlphaRange","getColor","scalar","mapValue","build","force","length","maxIndex","hinc","sinc","vinc","ainc","i","alpha","c_rgba","cos","PI","sqrt","push","buildSpecialColors","numberOfColors","belowRangeColorIndex","aboveRangeColorIndex","nanColorIndex","index","getIndex","Number","MAX_VALUE","isNaN","setTableValue","rgba","arguments","Array","prototype","slice","call"],"sources":["../../../../../../src/RenderingEngine/helpers/cpuFallback/colors/lookupTable.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}