{"version":3,"file":"index.js","mappings":"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","sources":["webpack://cornerstoneStreamingImageVolumeLoader/webpack/universalModuleDefinition","webpack://cornerstoneStreamingImageVolumeLoader/external umd {\"root\":\"cornerstone3D\",\"commonjs\":\"@cornerstonejs/core\",\"commonjs2\":\"@cornerstonejs/core\",\"amd\":\"@cornerstonejs/core\"}","webpack://cornerstoneStreamingImageVolumeLoader/external umd {\"root\":\"window\",\"commonjs\":\"gl-matrix\",\"commonjs2\":\"gl-matrix\",\"amd\":\"gl-matrix\"}","webpack://cornerstoneStreamingImageVolumeLoader/webpack/bootstrap","webpack://cornerstoneStreamingImageVolumeLoader/webpack/runtime/define property getters","webpack://cornerstoneStreamingImageVolumeLoader/webpack/runtime/hasOwnProperty shorthand","webpack://cornerstoneStreamingImageVolumeLoader/webpack/runtime/make namespace object","webpack://cornerstoneStreamingImageVolumeLoader/../../node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://cornerstoneStreamingImageVolumeLoader/../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://cornerstoneStreamingImageVolumeLoader/../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://cornerstoneStreamingImageVolumeLoader/../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/autoLoad.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/scaleArray.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/BaseStreamingImageVolume.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/StreamingImageVolume.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/cornerstoneStreamingImageVolumeLoader.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/splitImageIdsBy4DTags.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/getVolumeInfo.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/enums/Events.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/StreamingDynamicImageVolume.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/cornerstoneStreamingDynamicImageVolumeLoader.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/index.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/getDynamicVolumeInfo.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@cornerstonejs/core\"), require(\"gl-matrix\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@cornerstonejs/core\", \"gl-matrix\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cornerstoneStreamingImageVolumeLoader\"] = factory(require(\"@cornerstonejs/core\"), require(\"gl-matrix\"));\n\telse\n\t\troot[\"cornerstoneStreamingImageVolumeLoader\"] = factory(root[\"cornerstone3D\"], root[\"window\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__953__, __WEBPACK_EXTERNAL_MODULE__976__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__953__;","module.exports = __WEBPACK_EXTERNAL_MODULE__976__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import { getRenderingEngines, utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n//import type { Types } from '@cornerstonejs/core'\n\ntype RenderingEngineAndViewportIds = {\n  renderingEngine: Types.IRenderingEngine | undefined; //Types.IRenderingEngine | undefined\n  viewportIds: Array<string>;\n};\n\n/**\n * Given a volumeId, it finds the viewports and renderingEngines that\n * include that volume, and triggers a render if renderingEngine is available.\n *\n * @param volumeId - The Id of the volume\n */\nconst autoLoad = (volumeId: string): void => {\n  const renderingEngineAndViewportIds =\n    getRenderingEngineAndViewportsContainingVolume(volumeId);\n\n  if (!renderingEngineAndViewportIds || !renderingEngineAndViewportIds.length) {\n    return;\n  }\n\n  renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n    if (!renderingEngine.hasBeenDestroyed) {\n      renderingEngine.renderViewports(viewportIds);\n    }\n  });\n};\n\nfunction getRenderingEngineAndViewportsContainingVolume(\n  volumeId: string\n): Array<RenderingEngineAndViewportIds> {\n  const renderingEnginesArray = getRenderingEngines();\n\n  const renderingEngineAndViewportIds = [];\n\n  for (let i = 0; i < renderingEnginesArray.length; i++) {\n    const renderingEngine = renderingEnginesArray[i];\n    const viewports = utilities.getViewportsWithVolumeId(\n      volumeId,\n      renderingEngine.id\n    );\n\n    if (viewports.length) {\n      renderingEngineAndViewportIds.push({\n        renderingEngine,\n        viewportIds: viewports.map((viewport) => viewport.id),\n      });\n    }\n  }\n\n  return renderingEngineAndViewportIds;\n}\n\nexport default autoLoad;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Given a pixel array, rescale the pixel values using the rescale slope and\n * intercept and if modality is PT it uses the suv values to scale the array\n * @param array - The array to be scaled.\n * @param scalingParameters - The scaling parameters\n * @returns The array is being scaled\n */\nexport default function scaleArray(\n  array: Float32Array | Uint8Array | Uint16Array | Int16Array,\n  scalingParameters: Types.ScalingParameters\n): Float32Array | Uint8Array | Uint16Array | Int16Array {\n  const arrayLength = array.length;\n  const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n\n  if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n    for (let i = 0; i < arrayLength; i++) {\n      array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n    }\n  } else {\n    for (let i = 0; i < arrayLength; i++) {\n      array[i] = array[i] * rescaleSlope + rescaleIntercept;\n    }\n  }\n\n  return array;\n}\n","import {\n  Enums,\n  eventTarget,\n  metaData,\n  imageLoadPoolManager,\n  triggerEvent,\n  ImageVolume,\n  cache,\n  imageLoader,\n  utilities as csUtils,\n  ProgressiveRetrieveImages,\n  canRenderFloatTextures,\n} from '@cornerstonejs/core';\nimport type {\n  Types,\n  IImagesLoader,\n  ImageLoadListener,\n} from '@cornerstonejs/core';\n\nimport { scaleArray, autoLoad } from './helpers';\n\nconst requestTypeDefault = Enums.RequestType.Prefetch;\nconst {\n  ProgressiveIterator,\n  imageRetrieveMetadataProvider,\n  hasFloatScalingParameters,\n} = csUtils;\nconst { ImageQualityStatus } = Enums;\n\n/**\n * Streaming Image Volume Class that extends ImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n *\n */\nexport default class BaseStreamingImageVolume\n  extends ImageVolume\n  implements IImagesLoader\n{\n  private framesLoaded = 0;\n  private framesProcessed = 0;\n  private framesUpdated = 0;\n  protected autoRenderOnLoad = true;\n  protected cachedFrames = [];\n  protected reRenderTarget = 0;\n  protected reRenderFraction = 2;\n\n  loadStatus: {\n    loaded: boolean;\n    loading: boolean;\n    cancelled: boolean;\n    callbacks: Array<(...args: unknown[]) => void>;\n  };\n  imagesLoader: IImagesLoader = this;\n\n  constructor(\n    imageVolumeProperties: Types.ImageVolumeProps,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    super(imageVolumeProperties);\n    this.loadStatus = streamingProperties.loadStatus;\n  }\n\n  protected invalidateVolume(immediate: boolean): void {\n    const { imageData, vtkOpenGLTexture } = this;\n    const { numFrames } = this;\n\n    for (let i = 0; i < numFrames; i++) {\n      vtkOpenGLTexture.setUpdatedFrame(i);\n    }\n\n    imageData.modified();\n\n    if (immediate) {\n      autoLoad(this.volumeId);\n    }\n  }\n\n  /**\n   * It cancels loading the images of the volume. It sets the loading status to false\n   * and filters any imageLoad request in the requestPoolManager that has the same\n   * volumeId\n   */\n  public cancelLoading = (): void => {\n    const { loadStatus } = this;\n\n    if (!loadStatus || !loadStatus.loading) {\n      return;\n    }\n\n    // Set to not loading.\n    loadStatus.loading = false;\n    loadStatus.cancelled = true;\n\n    // Remove all the callback listeners\n    this.clearLoadCallbacks();\n\n    // Create a filter function which only keeps requests\n    // which do not match this volume's Id\n    const filterFunction = ({ additionalDetails }) => {\n      return additionalDetails.volumeId !== this.volumeId;\n    };\n\n    // Instruct the request pool manager to filter queued\n    // requests to ensure requests we no longer need are\n    // no longer sent.\n    imageLoadPoolManager.filterRequests(filterFunction);\n  };\n\n  /**\n   * Clear the load callbacks\n   */\n  public clearLoadCallbacks(): void {\n    this.loadStatus.callbacks = [];\n  }\n\n  protected callLoadStatusCallback(evt) {\n    const { framesUpdated, framesProcessed, totalNumFrames } = evt;\n    const { volumeId, reRenderFraction, loadStatus, metadata } = this;\n    const { FrameOfReferenceUID } = metadata;\n\n    // TODO: probably don't want this here\n    if (this.autoRenderOnLoad) {\n      if (\n        framesUpdated > this.reRenderTarget ||\n        framesProcessed === totalNumFrames\n      ) {\n        this.reRenderTarget += reRenderFraction;\n        autoLoad(volumeId);\n      }\n    }\n    if (framesProcessed === totalNumFrames) {\n      loadStatus.callbacks.forEach((callback) => callback(evt));\n\n      const eventDetail = {\n        FrameOfReferenceUID,\n        volumeId: volumeId,\n      };\n\n      triggerEvent(\n        eventTarget,\n        Enums.Events.IMAGE_VOLUME_LOADING_COMPLETED,\n        eventDetail\n      );\n    }\n  }\n\n  protected updateTextureAndTriggerEvents(\n    imageIdIndex,\n    imageId,\n    imageQualityStatus = ImageQualityStatus.FULL_RESOLUTION\n  ) {\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\n    const { cachedFrames, numFrames, totalNumFrames } = this;\n    const { FrameOfReferenceUID } = this.metadata;\n    const currentStatus = cachedFrames[frameIndex];\n    if (currentStatus > imageQualityStatus) {\n      // This is common for initial versus decimated images.\n      return;\n    }\n\n    if (cachedFrames[frameIndex] === ImageQualityStatus.FULL_RESOLUTION) {\n      // Sometimes the frame can be delivered multiple times, so just return\n      // here if that happens\n      return;\n    }\n    const complete = imageQualityStatus === ImageQualityStatus.FULL_RESOLUTION;\n    cachedFrames[imageIdIndex] = imageQualityStatus;\n    this.framesUpdated++;\n    if (complete) {\n      this.framesLoaded++;\n      this.framesProcessed++;\n    }\n\n    this.vtkOpenGLTexture.setUpdatedFrame(frameIndex);\n    this.imageData.modified();\n\n    const eventDetail: Types.EventTypes.ImageVolumeModifiedEventDetail = {\n      FrameOfReferenceUID,\n      imageVolume: this,\n    };\n\n    triggerEvent(eventTarget, Enums.Events.IMAGE_VOLUME_MODIFIED, eventDetail);\n\n    if (complete && this.framesProcessed === this.totalNumFrames) {\n      this.loadStatus.loaded = true;\n      this.loadStatus.loading = false;\n    }\n\n    this.callLoadStatusCallback({\n      success: true,\n      imageIdIndex,\n      imageId,\n      framesLoaded: this.framesLoaded,\n      framesProcessed: this.framesProcessed,\n      framesUpdated: this.framesUpdated,\n      numFrames,\n      totalNumFrames,\n      complete,\n      imageQualityStatus,\n    });\n    if (this.loadStatus.loaded) {\n      this.loadStatus.callbacks = [];\n    }\n  }\n\n  public successCallback(imageId: string, image) {\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    const options = this.getLoaderImageOptions(imageId);\n    const scalarData = this.getScalarDataByImageIdIndex(imageIdIndex);\n\n    handleArrayBufferLoad(scalarData, image, options);\n\n    const { scalingParameters } = image.preScale || {};\n    const { imageQualityStatus } = image;\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\n\n    // Check if there is a cached image for the same imageURI (different\n    // data loader scheme)\n    const cachedImage = cache.getCachedImageBasedOnImageURI(imageId);\n\n    // Check if the image was already loaded by another volume and we are here\n    // since we got the imageLoadObject from the cache from the other already loaded\n    // volume\n    const cachedVolume = cache.getVolumeContainingImageId(imageId);\n\n    // check if the load was cancelled while we were waiting for the image\n    // if so we don't want to do anything\n    if (this.loadStatus.cancelled) {\n      console.warn(\n        'volume load cancelled, returning for imageIdIndex: ',\n        imageIdIndex\n      );\n      return;\n    }\n\n    // if it is not a cached image or volume\n    if (!cachedImage && !(cachedVolume && cachedVolume.volume !== this)) {\n      return this.updateTextureAndTriggerEvents(\n        imageIdIndex,\n        imageId,\n        imageQualityStatus\n      );\n    }\n\n    // it is either cachedImage or cachedVolume\n    const isFromImageCache = !!cachedImage;\n\n    if (isFromImageCache && options.targetBuffer) {\n      // put it in the imageCacheOffsetMap, since we are going to use it\n      // for cache optimization later\n      this.imageCacheOffsetMap.set(imageId, {\n        imageIdIndex,\n        frameIndex,\n        offset: options.targetBuffer?.offset || 0,\n        length: options.targetBuffer?.length,\n      });\n    }\n\n    const cachedImageOrVolume = cachedImage || cachedVolume.volume;\n\n    this.handleImageComingFromCache(\n      cachedImageOrVolume,\n      isFromImageCache,\n      scalingParameters,\n      scalarData,\n      frameIndex,\n      scalarData.buffer,\n      imageIdIndex,\n      imageId\n    );\n  }\n\n  public errorCallback(imageId, permanent, error) {\n    if (!permanent) {\n      return;\n    }\n    const { totalNumFrames, numFrames } = this;\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    this.framesProcessed++;\n\n    if (this.framesProcessed === totalNumFrames) {\n      this.loadStatus.loaded = true;\n      this.loadStatus.loading = false;\n    }\n\n    this.callLoadStatusCallback({\n      success: false,\n      imageId,\n      imageIdIndex,\n      error,\n      framesLoaded: this.framesLoaded,\n      framesProcessed: this.framesProcessed,\n      framesUpdated: this.framesUpdated,\n      numFrames,\n      totalNumFrames,\n    });\n\n    if (this.loadStatus.loaded) {\n      this.loadStatus.callbacks = [];\n    }\n\n    const eventDetail = {\n      error,\n      imageIdIndex,\n      imageId,\n    };\n\n    triggerEvent(eventTarget, Enums.Events.IMAGE_LOAD_ERROR, eventDetail);\n  }\n\n  /**\n   * It triggers a prefetch for images in the volume.\n   * @param callback - A callback function to be called when the volume is fully loaded\n   * @param priority - The priority for loading the volume images, lower number is higher priority\n   * @returns\n   */\n  public load = (callback: (...args: unknown[]) => void): void => {\n    const { imageIds, loadStatus, numFrames } = this;\n    const { transferSyntaxUID } =\n      metaData.get('transferSyntax', imageIds[0]) || {};\n    const imageRetrieveConfiguration = metaData.get(\n      imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION,\n      this.volumeId,\n      transferSyntaxUID,\n      'volume'\n    );\n\n    this.imagesLoader = imageRetrieveConfiguration\n      ? (\n          imageRetrieveConfiguration.create ||\n          ProgressiveRetrieveImages.createProgressive\n        )(imageRetrieveConfiguration)\n      : this;\n    if (loadStatus.loading === true) {\n      return; // Already loading, will get callbacks from main load.\n    }\n\n    const { loaded } = this.loadStatus;\n    const totalNumFrames = imageIds.length;\n\n    if (loaded) {\n      if (callback) {\n        callback({\n          success: true,\n          framesLoaded: totalNumFrames,\n          framesProcessed: totalNumFrames,\n          numFrames,\n          totalNumFrames,\n        });\n      }\n      return;\n    }\n\n    if (callback) {\n      this.loadStatus.callbacks.push(callback);\n    }\n\n    this._prefetchImageIds();\n  };\n\n  public getLoaderImageOptions(imageId: string) {\n    const { transferSyntaxUID: transferSyntaxUID } =\n      metaData.get('transferSyntax', imageId) || {};\n\n    const imagePlaneModule = metaData.get('imagePlaneModule', imageId) || {};\n    const { rows, columns } = imagePlaneModule;\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    const scalarData = this.getScalarDataByImageIdIndex(imageIdIndex);\n    if (!scalarData) {\n      return null;\n    }\n    const arrayBuffer = scalarData.buffer;\n    // Length of one frame in voxels: length\n    // Length of one frame in bytes: lengthInBytes\n    const { type, length, lengthInBytes } = getScalarDataType(\n      scalarData,\n      this.numFrames\n    );\n\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n\n    const generalSeriesModule =\n      metaData.get('generalSeriesModule', imageId) || {};\n\n    const scalingParameters: Types.ScalingParameters = {\n      rescaleSlope: modalityLutModule.rescaleSlope,\n      rescaleIntercept: modalityLutModule.rescaleIntercept,\n      modality: generalSeriesModule.modality,\n    };\n\n    if (scalingParameters.modality === 'PT') {\n      const suvFactor = metaData.get('scalingModule', imageId);\n\n      if (suvFactor) {\n        this._addScalingToVolume(suvFactor);\n        scalingParameters.suvbw = suvFactor.suvbw;\n      }\n    }\n\n    const isSlopeAndInterceptNumbers =\n      typeof scalingParameters.rescaleSlope === 'number' &&\n      typeof scalingParameters.rescaleIntercept === 'number';\n\n    const floatAfterScale = hasFloatScalingParameters(scalingParameters);\n    const allowFloatRendering = canRenderFloatTextures();\n\n    /**\n     * So this is has limitation right now, but we need to somehow indicate\n     * whether the volume has been scaled with the scaling parameters or not.\n     * However, each slice can have different scaling parameters but it is rare\n     * that rescale slope and intercept be unknown for one slice and known for\n     * another. So we can just check the first slice and assume that the rest\n     * of the slices have the same scaling parameters. Basically it is important\n     * that these two are numbers and that means the volume has been scaled (\n     * we do that automatically in the loader). For the suvbw, we need to\n     * somehow indicate whether the PT image has been corrected with suvbw or\n     * not, which we store it in the this.scaling.PT.suvbw.\n     */\n    this.isPreScaled = isSlopeAndInterceptNumbers;\n\n    // in case where the hardware/os does not support float rendering but the\n    // requested scaling params are not integers, we need to disable pre-scaling\n    if (!allowFloatRendering && floatAfterScale) {\n      this.isPreScaled = false;\n    }\n\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\n\n    return {\n      // WADO Image Loader\n      targetBuffer: {\n        // keeping this in the options means a large empty volume array buffer\n        // will be transferred to the worker. This is undesirable for streaming\n        // volume without shared array buffer because the target is now an empty\n        // 300-500MB volume array buffer. Instead the volume should be progressively\n        // set in the main thread.\n        arrayBuffer:\n          arrayBuffer instanceof ArrayBuffer ? undefined : arrayBuffer,\n        offset: frameIndex * lengthInBytes,\n        length,\n        type,\n        rows,\n        columns,\n      },\n      skipCreateImage: true,\n      allowFloatRendering,\n      preScale: {\n        enabled: this.isPreScaled,\n        // we need to pass in the scalingParameters here, since the streaming\n        // volume loader doesn't go through the createImage phase in the loader,\n        // and therefore doesn't have the scalingParameters\n        scalingParameters,\n      },\n      transferPixelData: true,\n      transferSyntaxUID,\n      loader: imageLoader.loadImage,\n      additionalDetails: {\n        imageId,\n        imageIdIndex,\n        volumeId: this.volumeId,\n      },\n    };\n  }\n\n  // Use loadImage because we are skipping the Cornerstone Image cache\n  // when we load directly into the Volume cache\n  callLoadImage(imageId, imageIdIndex, options) {\n    const { cachedFrames } = this;\n\n    if (cachedFrames[imageIdIndex] === ImageQualityStatus.FULL_RESOLUTION) {\n      // The request framework handles non-promise returns, so just return here\n      return;\n    }\n\n    const uncompressedIterator = ProgressiveIterator.as(\n      imageLoader.loadImage(imageId, options)\n    );\n    return uncompressedIterator.forEach((image) => {\n      // scalarData is the volume container we are progressively loading into\n      // image is the pixelData decoded from workers in cornerstoneDICOMImageLoader\n      this.successCallback(imageId, image);\n    }, this.errorCallback.bind(this, imageIdIndex, imageId));\n  }\n\n  protected getImageIdsRequests(imageIds: string[], priorityDefault: number) {\n    // SharedArrayBuffer\n    this.totalNumFrames = this.imageIds.length;\n    const autoRenderPercentage = 2;\n\n    if (this.autoRenderOnLoad) {\n      this.reRenderFraction =\n        this.totalNumFrames * (autoRenderPercentage / 100);\n      this.reRenderTarget = this.reRenderFraction;\n    }\n\n    // 4D datasets load one time point at a time and the frameIndex is\n    // the position of the imageId in the current time point while the\n    // imageIdIndex is its absolute position in the array that contains\n    // all other imageIds. In a 4D dataset the frameIndex can also be\n    // calculated as `imageIdIndex % numFrames` where numFrames is the\n    // number of frames per time point. The frameIndex and imageIdIndex\n    // will be the same when working with 3D datasets.\n    const requests = imageIds.map((imageId) => {\n      const imageIdIndex = this.getImageIdIndex(imageId);\n\n      const requestType = requestTypeDefault;\n      const priority = priorityDefault;\n      const options = this.getLoaderImageOptions(imageId);\n\n      return {\n        callLoadImage: this.callLoadImage.bind(this),\n        imageId,\n        imageIdIndex,\n        options,\n        priority,\n        requestType,\n        additionalDetails: {\n          volumeId: this.volumeId,\n        },\n      };\n    });\n\n    return requests;\n  }\n\n  private handleImageComingFromCache(\n    cachedImageOrVolume,\n    isFromImageCache: boolean,\n    scalingParameters,\n    scalarData: Types.PixelDataTypedArray,\n    frameIndex: number,\n    arrayBuffer: ArrayBufferLike,\n    imageIdIndex: number,\n    imageId: string\n  ) {\n    const imageLoadObject = isFromImageCache\n      ? cachedImageOrVolume.imageLoadObject\n      : cachedImageOrVolume.convertToCornerstoneImage(imageId, imageIdIndex);\n\n    imageLoadObject.promise\n      .then((cachedImage) => {\n        const imageScalarData = this._scaleIfNecessary(\n          cachedImage,\n          scalingParameters\n        );\n        // todo add scaling and slope\n        const { pixelsPerImage, bytesPerImage } = this.cornerstoneImageMetaData;\n        const TypedArray = scalarData.constructor;\n        let byteOffset = bytesPerImage * frameIndex;\n\n        // create a view on the volume arraybuffer\n        const bytePerPixel = bytesPerImage / pixelsPerImage;\n\n        if (scalarData.BYTES_PER_ELEMENT !== bytePerPixel) {\n          byteOffset *= scalarData.BYTES_PER_ELEMENT / bytePerPixel;\n        }\n\n        // @ts-ignore\n        const volumeBufferView = new TypedArray(\n          arrayBuffer,\n          byteOffset,\n          pixelsPerImage\n        );\n        volumeBufferView.set(imageScalarData);\n        this.updateTextureAndTriggerEvents(\n          imageIdIndex,\n          imageId,\n          cachedImage.imageQualityStatus\n        );\n      })\n      .catch((err) => {\n        this.errorCallback(imageId, true, err);\n      });\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not executes the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests(_priority: number): any[] {\n    throw new Error('Abstract method');\n  }\n\n  public getImageIdsToLoad(): string[] {\n    throw new Error('Abstract method');\n  }\n\n  /**\n   * Retrieves images using the older getImageLoadRequests method\n   * to setup all the requests.  Ensures compatibility with the custom image\n   * loaders.\n   */\n  public loadImages(imageIds: string[], listener: ImageLoadListener) {\n    this.loadStatus.loading = true;\n\n    const requests = this.getImageLoadRequests(5);\n\n    requests.reverse().forEach((request) => {\n      if (!request) {\n        // there is a cached image for the imageId and no requests will fire\n        return;\n      }\n\n      const {\n        callLoadImage,\n        imageId,\n        imageIdIndex,\n        options,\n        priority,\n        requestType,\n        additionalDetails,\n      } = request;\n\n      imageLoadPoolManager.addRequest(\n        callLoadImage.bind(this, imageId, imageIdIndex, options),\n        requestType,\n        additionalDetails,\n        priority\n      );\n    });\n    return Promise.resolve(true);\n  }\n\n  private _prefetchImageIds() {\n    // Note: here is the correct location to set the loading flag\n    // since getImageIdsRequest is just grabbing and building requests\n    // and not actually executing them\n    this.loadStatus.loading = true;\n\n    const imageIds = [...this.getImageIdsToLoad()];\n    imageIds.reverse();\n\n    this.totalNumFrames = this.imageIds.length;\n    const autoRenderPercentage = 2;\n\n    if (this.autoRenderOnLoad) {\n      this.reRenderFraction =\n        this.totalNumFrames * (autoRenderPercentage / 100);\n      this.reRenderTarget = this.reRenderFraction;\n    }\n\n    return this.imagesLoader.loadImages(imageIds, this).catch((e) => {\n      console.debug('progressive loading failed to complete', e);\n    });\n  }\n\n  /**\n   * This function decides whether or not to scale the image based on the\n   * scalingParameters. If the image is already scaled, we should take that\n   * into account when scaling the image again, so if the rescaleSlope and/or\n   * rescaleIntercept are different from the ones that were used to scale the\n   * image, we should scale the image again according to the new parameters.\n   */\n  private _scaleIfNecessary(\n    image,\n    scalingParametersToUse: Types.ScalingParameters\n  ) {\n    if (!image.preScale.enabled) {\n      return image.getPixelData().slice(0);\n    }\n\n    const imageIsAlreadyScaled = image.preScale?.scaled;\n    const noScalingParametersToUse =\n      !scalingParametersToUse ||\n      !scalingParametersToUse.rescaleIntercept ||\n      !scalingParametersToUse.rescaleSlope;\n\n    if (!imageIsAlreadyScaled && noScalingParametersToUse) {\n      // no need to scale the image\n      return image.getPixelData().slice(0);\n    }\n\n    if (\n      !imageIsAlreadyScaled &&\n      scalingParametersToUse &&\n      scalingParametersToUse.rescaleIntercept !== undefined &&\n      scalingParametersToUse.rescaleSlope !== undefined\n    ) {\n      // if not already scaled, just scale the image.\n      // copy so that it doesn't get modified\n      const pixelDataCopy = image.getPixelData().slice(0);\n      const scaledArray = scaleArray(pixelDataCopy, scalingParametersToUse);\n      return scaledArray;\n    }\n\n    // if the image is already scaled,\n    const {\n      rescaleSlope: rescaleSlopeToUse,\n      rescaleIntercept: rescaleInterceptToUse,\n      suvbw: suvbwToUse,\n    } = scalingParametersToUse;\n\n    const {\n      rescaleSlope: rescaleSlopeUsed,\n      rescaleIntercept: rescaleInterceptUsed,\n      suvbw: suvbwUsed,\n    } = image.preScale.scalingParameters;\n\n    const rescaleSlopeIsSame = rescaleSlopeToUse === rescaleSlopeUsed;\n    const rescaleInterceptIsSame =\n      rescaleInterceptToUse === rescaleInterceptUsed;\n    const suvbwIsSame = suvbwToUse === suvbwUsed;\n\n    if (rescaleSlopeIsSame && rescaleInterceptIsSame && suvbwIsSame) {\n      // if the scaling parameters are the same, we don't need to scale the image again\n      return image.getPixelData();\n    }\n\n    const pixelDataCopy = image.getPixelData().slice(0);\n    // the general formula for scaling is  scaledPixelValue = suvbw * (pixelValue * rescaleSlope) + rescaleIntercept\n    const newSuvbw = suvbwToUse / suvbwUsed;\n    const newRescaleSlope = rescaleSlopeToUse / rescaleSlopeUsed;\n    const newRescaleIntercept =\n      rescaleInterceptToUse - rescaleInterceptUsed * newRescaleSlope;\n\n    const newScalingParameters = {\n      ...scalingParametersToUse,\n      rescaleSlope: newRescaleSlope,\n      rescaleIntercept: newRescaleIntercept,\n      suvbw: newSuvbw,\n    };\n\n    const scaledArray = scaleArray(pixelDataCopy, newScalingParameters);\n    return scaledArray;\n  }\n\n  private _addScalingToVolume(suvFactor) {\n    // Todo: handle case where suvFactors are not the same for all frames\n    if (this.scaling) {\n      return;\n    }\n\n    const { suvbw, suvlbm, suvbsa } = suvFactor;\n\n    const petScaling = <Types.PTScaling>{};\n\n    if (suvlbm) {\n      petScaling.suvbwToSuvlbm = suvlbm / suvbw;\n    }\n\n    if (suvbsa) {\n      petScaling.suvbwToSuvbsa = suvbsa / suvbw;\n    }\n\n    if (suvbw) {\n      petScaling.suvbw = suvbw;\n    }\n\n    this.scaling = { PT: petScaling };\n  }\n}\n\nfunction getScalarDataType(scalarData, numFrames) {\n  let type, byteSize;\n  if (scalarData instanceof Uint8Array) {\n    type = 'Uint8Array';\n    byteSize = 1;\n  } else if (scalarData instanceof Float32Array) {\n    type = 'Float32Array';\n    byteSize = 4;\n  } else if (scalarData instanceof Uint16Array) {\n    type = 'Uint16Array';\n    byteSize = 2;\n  } else if (scalarData instanceof Int16Array) {\n    type = 'Int16Array';\n    byteSize = 2;\n  } else {\n    throw new Error('Unsupported array type');\n  }\n  const length = scalarData.length / numFrames;\n  const lengthInBytes = length * byteSize;\n  return { type, byteSize, length, lengthInBytes };\n}\n\n/**\n * Sets the scalar data at the appropriate offset to the\n * byte data from the image.\n */\nfunction handleArrayBufferLoad(scalarData, image, options) {\n  if (!(scalarData.buffer instanceof ArrayBuffer)) {\n    return;\n  }\n  const offset = options.targetBuffer.offset; // in bytes\n  const length = options.targetBuffer.length; // in frames\n  const pixelData = image.pixelData ? image.pixelData : image.getPixelData();\n\n  try {\n    if (scalarData instanceof Float32Array) {\n      const bytesInFloat = 4;\n      const floatView = new Float32Array(pixelData);\n      if (floatView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      // since set is based on the underlying type,\n      // we need to divide the offset bytes by the byte type\n      scalarData.set(floatView, offset / bytesInFloat);\n    }\n    if (scalarData instanceof Int16Array) {\n      const bytesInInt16 = 2;\n      const intView = new Int16Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInInt16);\n    }\n    if (scalarData instanceof Uint16Array) {\n      const bytesInUint16 = 2;\n      const intView = new Uint16Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInUint16);\n    }\n    if (scalarData instanceof Uint8Array) {\n      const bytesInUint8 = 1;\n      const intView = new Uint8Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInUint8);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n","import { Types } from '@cornerstonejs/core';\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\nimport ImageLoadRequests from './types/ImageLoadRequests';\n\n/**\n * Streaming Image Volume Class that extends ImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n */\nexport default class StreamingImageVolume extends BaseStreamingImageVolume {\n  constructor(\n    imageVolumeProperties: Types.ImageVolumeProps,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    // Just for fallback to the old API\n    if (!imageVolumeProperties.imageIds) {\n      imageVolumeProperties.imageIds = streamingProperties.imageIds;\n    }\n    super(imageVolumeProperties, streamingProperties);\n  }\n\n  /**\n   * Return the scalar data (buffer)\n   * @returns volume scalar data\n   */\n  public getScalarData(): Types.PixelDataTypedArray {\n    return <Types.PixelDataTypedArray>this.scalarData;\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not executes the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests(priority: number): ImageLoadRequests[] {\n    const { imageIds } = this;\n\n    return this.getImageIdsRequests(imageIds, priority);\n  }\n\n  public getImageIdsToLoad = () => {\n    const { imageIds } = this;\n    this.numFrames = imageIds.length;\n    return imageIds;\n  };\n}\n","import {\n  Enums,\n  imageLoader,\n  imageLoadPoolManager,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport StreamingImageVolume from './StreamingImageVolume';\n\ninterface IVolumeLoader {\n  promise: Promise<StreamingImageVolume>;\n  cancel: () => void;\n  decache: () => void;\n}\n\n/**\n * It handles loading of a image by streaming in its imageIds. It will be the\n * volume loader if the schema for the volumeID is `cornerstoneStreamingImageVolume`.\n * This function returns a promise that resolves to the StreamingImageVolume instance.\n *\n * In order to use the cornerstoneStreamingImageVolumeLoader you should use\n * createAndCacheVolume helper from the cornerstone-core volumeLoader module.\n *\n * @param volumeId - The ID of the volume\n * @param options - options for loading, imageIds\n * @returns a promise that resolves to a StreamingImageVolume\n */\nfunction cornerstoneStreamingImageVolumeLoader(\n  volumeId: string,\n  options: {\n    imageIds: string[];\n    progressiveRendering?: boolean | Types.IRetrieveConfiguration;\n  }\n): IVolumeLoader {\n  if (!options || !options.imageIds || !options.imageIds.length) {\n    throw new Error(\n      'ImageIds must be provided to create a streaming image volume'\n    );\n  }\n\n  async function getStreamingImageVolume() {\n    /**\n     * Check if we are using the `wadouri:` scheme, and if so, preload first,\n     * middle, and last image metadata as these are the images the current\n     * streaming image loader may explicitly request metadata from. The last image\n     * metadata would only be specifically requested if the imageId array order is\n     * reversed in the `sortImageIdsAndGetSpacing.ts` file.\n     */\n    if (options.imageIds[0].split(':')[0] === 'wadouri') {\n      const [middleImageIndex, lastImageIndex] = [\n        Math.floor(options.imageIds.length / 2),\n        options.imageIds.length - 1,\n      ];\n      const indexesToPrefetch = [0, middleImageIndex, lastImageIndex];\n      await Promise.all(\n        indexesToPrefetch.map((index) => {\n          return new Promise((resolve, reject) => {\n            const imageId = options.imageIds[index];\n            imageLoadPoolManager.addRequest(\n              async () => {\n                imageLoader\n                  .loadImage(imageId)\n                  .then(() => {\n                    console.log(`Prefetched imageId: ${imageId}`);\n                    resolve(true);\n                  })\n                  .catch((err) => {\n                    reject(err);\n                  });\n              },\n              Enums.RequestType.Prefetch,\n              { volumeId },\n              1 // priority\n            );\n          });\n        })\n      ).catch(console.error);\n    }\n\n    const {\n      dimensions,\n      spacing,\n      origin,\n      scalarData,\n      direction,\n      sizeInBytes,\n      metadata,\n      imageIds,\n    } = csUtils.generateVolumePropsFromImageIds(options.imageIds, volumeId);\n\n    const streamingImageVolume = new StreamingImageVolume(\n      // ImageVolume properties\n      {\n        volumeId,\n        metadata,\n        dimensions,\n        spacing,\n        origin,\n        direction,\n        scalarData,\n        sizeInBytes,\n        imageIds,\n      },\n      // Streaming properties\n      {\n        imageIds,\n        loadStatus: {\n          // todo: loading and loaded should be on ImageVolume\n          loaded: false,\n          loading: false,\n          cancelled: false,\n          cachedFrames: [],\n          callbacks: [],\n        },\n      }\n    );\n\n    return streamingImageVolume;\n  }\n\n  const streamingImageVolumePromise = getStreamingImageVolume();\n\n  return {\n    promise: streamingImageVolumePromise,\n    decache: () => {\n      streamingImageVolumePromise.then((streamingImageVolume) => {\n        streamingImageVolume.destroy();\n        streamingImageVolume = null;\n      });\n    },\n    cancel: () => {\n      streamingImageVolumePromise.then((streamingImageVolume) => {\n        streamingImageVolume.cancelLoading();\n      });\n    },\n  };\n}\n\nexport default cornerstoneStreamingImageVolumeLoader;\n","import { metaData } from '@cornerstonejs/core';\n\n// TODO: Test remaining implemented tags\n// Supported 4D Tags\n//   (0018,1060) Trigger Time                   [Implemented, not tested]\n//   (0018,0081) Echo Time                      [Implemented, not tested]\n//   (0018,0086) Echo Number                    [Implemented, not tested]\n//   (0020,0100) Temporal Position Identifier   [OK]\n//   (0054,1300) FrameReferenceTime             [OK]\n//   (0018,9087) Diffusion B Value              [OK]\n//   (2001,1003) Philips Diffusion B-factor     [OK]\n//   (0019,100c) Siemens Diffusion B Value      [Implemented, not tested]\n//   (0043,1039) GE Diffusion B Value           [OK]\n\ninterface MappedIPP {\n  imageId: string;\n  imagePositionPatient;\n}\n\nconst groupBy = (array, key) => {\n  return array.reduce((rv, x) => {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nfunction getIPPGroups(imageIds: string[]): { [id: string]: Array<MappedIPP> } {\n  const ippMetadata: Array<MappedIPP> = imageIds.map((imageId) => {\n    const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n    return { imageId, imagePositionPatient };\n  });\n\n  if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n    // Fail if any instances don't provide a position\n    return null;\n  }\n\n  const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n  const positions = Object.keys(positionGroups);\n  const frame_count = positionGroups[positions[0]].length;\n  if (frame_count === 1) {\n    // Single frame indicates 3D volume\n    return null;\n  }\n  const frame_count_equal = positions.every(\n    (k) => positionGroups[k].length === frame_count\n  );\n  if (!frame_count_equal) {\n    // Differences in number of frames per position group --> not a valid MV\n    return null;\n  }\n  return positionGroups;\n}\n\nfunction test4DTag(\n  IPPGroups: { [id: string]: Array<MappedIPP> },\n  value_getter: (imageId: string) => number\n) {\n  const frame_groups = {};\n  let first_frame_value_set: number[] = [];\n\n  const positions = Object.keys(IPPGroups);\n  for (let i = 0; i < positions.length; i++) {\n    const frame_value_set: Set<number> = new Set<number>();\n    const frames = IPPGroups[positions[i]];\n\n    for (let j = 0; j < frames.length; j++) {\n      const frame_value = value_getter(frames[j].imageId) || 0;\n\n      frame_groups[frame_value] = frame_groups[frame_value] || [];\n      frame_groups[frame_value].push({ imageId: frames[j].imageId });\n\n      frame_value_set.add(frame_value);\n      if (frame_value_set.size - 1 < j) {\n        return undefined;\n      }\n    }\n\n    if (i == 0) {\n      first_frame_value_set = Array.from(frame_value_set);\n    } else if (!setEquals(first_frame_value_set, frame_value_set)) {\n      return undefined;\n    }\n  }\n  return frame_groups;\n}\n\nfunction getTagValue(imageId: string, tag: string): number {\n  const value = metaData.get(tag, imageId);\n  try {\n    return parseFloat(value);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction getPhilipsPrivateBValue(imageId: string) {\n  // Philips Private Diffusion B-factor tag (2001, 1003)\n  // Private creator: Philips Imaging DD 001, VR=FL, VM=1\n  const value = metaData.get('20011003', imageId);\n  try {\n    const { InlineBinary } = value;\n    if (InlineBinary) {\n      const value_bytes = atob(InlineBinary);\n      const ary_buf = new ArrayBuffer(value_bytes.length);\n      const dv = new DataView(ary_buf);\n      for (let i = 0; i < value_bytes.length; i++) {\n        dv.setUint8(i, value_bytes.charCodeAt(i));\n      }\n      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      // For WebGL Buffers, can skip Float32Array,\n      // just return ArrayBuffer is all that's needed.\n      return new Float32Array(ary_buf)[0];\n    }\n\n    return parseFloat(value);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction getSiemensPrivateBValue(imageId: string) {\n  // Siemens Private Diffusion B-factor tag (0019, 100c)\n  // Private creator: SIEMENS MR HEADER, VR=IS, VM=1\n  let value = metaData.get('0019100c', imageId);\n\n  try {\n    const { InlineBinary } = value;\n    if (InlineBinary) {\n      value = atob(InlineBinary);\n    }\n    return parseFloat(value);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction getGEPrivateBValue(imageId: string) {\n  // GE Private Diffusion B-factor tag (0043, 1039)\n  // Private creator: GEMS_PARM_01, VR=IS, VM=4\n  let value = metaData.get('00431039', imageId);\n\n  try {\n    const { InlineBinary } = value;\n    if (InlineBinary) {\n      value = atob(InlineBinary).split('//');\n    }\n    return parseFloat(value[0]) % 100000;\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setEquals(set_a: number[], set_b: Set<number>): boolean {\n  if (set_a.length != set_b.size) {\n    return false;\n  }\n  for (let i = 0; i < set_a.length; i++) {\n    if (!set_b.has(set_a[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getPetFrameReferenceTime(imageId) {\n  const moduleInfo = metaData.get('petImageModule', imageId);\n  return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\n\n/**\n * Split the imageIds array by 4D tags into groups. Each group must have the\n * same number of imageIds or the same imageIds array passed in is returned.\n * @param imageIds - array of imageIds\n * @returns imageIds grouped by 4D tags\n */\nfunction splitImageIdsBy4DTags(imageIds: string[]): {\n  imageIdsGroups: string[][];\n  splittingTag: string | null;\n} {\n  const positionGroups = getIPPGroups(imageIds);\n  if (!positionGroups) {\n    // When no position groups are found, return the original array wrapped and indicate no tag was used\n    return { imageIdsGroups: [imageIds], splittingTag: null };\n  }\n\n  const tags = [\n    'TemporalPositionIdentifier',\n    'DiffusionBValue',\n    'TriggerTime',\n    'EchoTime',\n    'EchoNumber',\n    'PhilipsPrivateBValue',\n    'SiemensPrivateBValue',\n    'GEPrivateBValue',\n    'PetFrameReferenceTime',\n  ];\n\n  const fncList2 = [\n    (imageId) => getTagValue(imageId, tags[0]),\n    (imageId) => getTagValue(imageId, tags[1]),\n    (imageId) => getTagValue(imageId, tags[2]),\n    (imageId) => getTagValue(imageId, tags[3]),\n    (imageId) => getTagValue(imageId, tags[4]),\n    getPhilipsPrivateBValue,\n    getSiemensPrivateBValue,\n    getGEPrivateBValue,\n    getPetFrameReferenceTime,\n  ];\n\n  for (let i = 0; i < fncList2.length; i++) {\n    const frame_groups = test4DTag(positionGroups, fncList2[i]);\n    if (frame_groups) {\n      const sortedKeys = Object.keys(frame_groups)\n        .map(Number.parseFloat)\n        .sort((a, b) => a - b);\n\n      const imageIdsGroups = sortedKeys.map((key) =>\n        frame_groups[key].map((item) => item.imageId)\n      );\n      return { imageIdsGroups, splittingTag: tags[i] };\n    }\n  }\n\n  // Return the same imagesIds for non-4D volumes and indicate no tag was used\n  return { imageIdsGroups: [imageIds], splittingTag: null };\n}\n\nexport default splitImageIdsBy4DTags;\n","import { vec3 } from 'gl-matrix';\nimport { cache, utilities, Enums } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nconst { createUint8SharedArray, createFloat32SharedArray } = utilities;\n\nfunction getVolumeInfo(imageIds: string[]) {\n  const volumeMetadata = utilities.makeVolumeMetadata(imageIds);\n\n  const {\n    BitsAllocated,\n    PixelRepresentation,\n    PhotometricInterpretation,\n    ImageOrientationPatient,\n    PixelSpacing,\n    Columns,\n    Rows,\n  } = volumeMetadata;\n\n  const rowCosineVec = vec3.fromValues(\n    ImageOrientationPatient[0],\n    ImageOrientationPatient[1],\n    ImageOrientationPatient[2]\n  );\n\n  const colCosineVec = vec3.fromValues(\n    ImageOrientationPatient[3],\n    ImageOrientationPatient[4],\n    ImageOrientationPatient[5]\n  );\n\n  const scanAxisNormal = vec3.create();\n\n  vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n\n  const { zSpacing, origin, sortedImageIds } =\n    utilities.sortImageIdsAndGetSpacing(imageIds, scanAxisNormal);\n\n  const numFrames = imageIds.length;\n\n  // Spacing goes [1] then [0], as [1] is column spacing (x) and [0] is row spacing (y)\n  const spacing = <Types.Point3>[PixelSpacing[1], PixelSpacing[0], zSpacing];\n  const dimensions = <Types.Point3>[Columns, Rows, numFrames];\n  const direction = [\n    ...rowCosineVec,\n    ...colCosineVec,\n    ...scanAxisNormal,\n  ] as Types.Mat3;\n  const signed = PixelRepresentation === 1;\n\n  // Check if it fits in the cache before we allocate data\n  // TODO Improve this when we have support for more types\n  // NOTE: We use 4 bytes per voxel as we are using Float32.\n  const bytesPerVoxel = BitsAllocated === 16 ? 4 : 1;\n  const sizeInBytesPerComponent =\n    bytesPerVoxel * dimensions[0] * dimensions[1] * dimensions[2];\n\n  let numComponents = 1;\n  if (PhotometricInterpretation === 'RGB') {\n    numComponents = 3;\n  }\n\n  const sizeInBytes = sizeInBytesPerComponent * numComponents;\n\n  // check if there is enough space in unallocated + image Cache\n  const isCacheable = cache.isCacheable(sizeInBytes);\n  if (!isCacheable) {\n    throw new Error(Enums.Events.CACHE_SIZE_EXCEEDED);\n  }\n\n  cache.decacheIfNecessaryUntilBytesAvailable(sizeInBytes);\n\n  let scalarData;\n\n  switch (BitsAllocated) {\n    case 8:\n      if (signed) {\n        throw new Error(\n          '8 Bit signed images are not yet supported by this plugin.'\n        );\n      } else {\n        scalarData = createUint8SharedArray(\n          dimensions[0] * dimensions[1] * dimensions[2]\n        );\n      }\n\n      break;\n\n    case 16:\n      scalarData = createFloat32SharedArray(\n        dimensions[0] * dimensions[1] * dimensions[2]\n      );\n\n      break;\n\n    case 24:\n      // hacky because we don't support alpha channel in dicom\n      scalarData = createUint8SharedArray(\n        dimensions[0] * dimensions[1] * dimensions[2] * numComponents\n      );\n\n      break;\n  }\n\n  return {\n    metadata: volumeMetadata,\n    sortedImageIds,\n    dimensions,\n    spacing,\n    origin,\n    direction,\n    scalarData,\n    sizeInBytes,\n  };\n}\n\nexport { getVolumeInfo, getVolumeInfo as default };\n","/**\n *  The events for cornerstone streaming image volume\n *\n */\nenum Events {\n  ///////////////////////////////////////\n  //            Loading Events\n  ///////////////////////////////////////\n\n  /**\n   * Dynamic image volume time point index changed\n   */\n  DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED = 'DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED',\n}\n\nexport default Events;\n","import { eventTarget, triggerEvent, type Types } from '@cornerstonejs/core';\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\nimport { Events as StreamingEvents } from './enums';\n\ntype TimePoint = {\n  /** imageIds of each timepoint  */\n  imageIds: Array<string>;\n  /** volume scalar data  */\n  scalarData: Types.PixelDataTypedArray;\n};\n\n/**\n * Streaming Image Volume Class that extends StreamingImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n */\nexport default class StreamingDynamicImageVolume\n  extends BaseStreamingImageVolume\n  implements Types.IDynamicImageVolume\n{\n  private _numTimePoints: number;\n  private _timePoints: TimePoint[];\n  private _timePointIndex = 0;\n  private _splittingTag: string;\n\n  constructor(\n    imageVolumeProperties: Types.ImageVolumeProps & { splittingTag: string },\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    StreamingDynamicImageVolume._ensureValidData(\n      imageVolumeProperties,\n      streamingProperties\n    );\n\n    super(imageVolumeProperties, streamingProperties);\n    this._numTimePoints = (<Types.PixelDataTypedArray[]>this.scalarData).length;\n    this._timePoints = this._getTimePointsData();\n    this._splittingTag = imageVolumeProperties.splittingTag;\n  }\n\n  private static _ensureValidData(\n    imageVolumeProperties: Types.ImageVolumeProps,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ): void {\n    const imageIds = streamingProperties.imageIds;\n    const scalarDataArrays = <Types.PixelDataTypedArray[]>(\n      imageVolumeProperties.scalarData\n    );\n\n    if (imageIds.length % scalarDataArrays.length !== 0) {\n      throw new Error(\n        `Number of imageIds is not a multiple of ${scalarDataArrays.length}`\n      );\n    }\n  }\n\n  /**\n   * Use the image ids and scalar data array to create TimePoint objects\n   * and make it a bit easier to work with when loading requests\n   */\n  private _getTimePointsData(): TimePoint[] {\n    const { imageIds } = this;\n    const scalarData = <Types.PixelDataTypedArray[]>this.scalarData;\n\n    const { numFrames } = this;\n    const numTimePoints = scalarData.length;\n    const timePoints: TimePoint[] = [];\n\n    for (let i = 0; i < numTimePoints; i++) {\n      const start = i * numFrames;\n      const end = start + numFrames;\n\n      timePoints.push({\n        imageIds: imageIds.slice(start, end),\n        scalarData: scalarData[i],\n      });\n    }\n\n    return timePoints;\n  }\n\n  private _getTimePointsToLoad() {\n    const timePoints = this._timePoints;\n    const initialTimePointIndex = this._timePointIndex;\n    const timePointsToLoad = [timePoints[initialTimePointIndex]];\n\n    let leftIndex = initialTimePointIndex - 1;\n    let rightIndex = initialTimePointIndex + 1;\n\n    while (leftIndex >= 0 || rightIndex < timePoints.length) {\n      if (leftIndex >= 0) {\n        timePointsToLoad.push(timePoints[leftIndex--]);\n      }\n\n      if (rightIndex < timePoints.length) {\n        timePointsToLoad.push(timePoints[rightIndex++]);\n      }\n    }\n\n    return timePointsToLoad;\n  }\n\n  private _getTimePointRequests = (timePoint, priority: number) => {\n    const { imageIds } = timePoint;\n\n    return this.getImageIdsRequests(imageIds, priority);\n  };\n\n  private _getTimePointsRequests = (priority: number) => {\n    const timePoints = this._getTimePointsToLoad();\n    let timePointsRequests = [];\n\n    timePoints.forEach((timePoint) => {\n      const timePointRequests = this._getTimePointRequests(timePoint, priority);\n      timePointsRequests = timePointsRequests.concat(timePointRequests);\n    });\n\n    return timePointsRequests;\n  };\n\n  public getImageIdsToLoad(): string[] {\n    const timePoints = this._getTimePointsToLoad();\n    let imageIds = [];\n\n    timePoints.forEach((timePoint) => {\n      const { imageIds: timePointIds } = timePoint;\n      imageIds = imageIds.concat(timePointIds);\n    });\n\n    return imageIds;\n  }\n\n  /** return true if it is a 4D volume or false if it is 3D volume */\n  public isDynamicVolume(): boolean {\n    return true;\n  }\n\n  /**\n   * Returns the active time point index\n   * @returns active time point index\n   */\n  public get timePointIndex(): number {\n    return this._timePointIndex;\n  }\n\n  /**\n   * Set the active time point index which also updates the active scalar data\n   * @returns current time point index\n   */\n  public set timePointIndex(newTimePointIndex: number) {\n    if (newTimePointIndex < 0 || newTimePointIndex >= this.numTimePoints) {\n      throw new Error(`Invalid timePointIndex (${newTimePointIndex})`);\n    }\n\n    // Nothing to do when time point index does not change\n    if (this._timePointIndex === newTimePointIndex) {\n      return;\n    }\n\n    const { imageData } = this;\n\n    this._timePointIndex = newTimePointIndex;\n    imageData.getPointData().setActiveScalars(`timePoint-${newTimePointIndex}`);\n    this.invalidateVolume(true);\n\n    triggerEvent(\n      eventTarget,\n      StreamingEvents.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n      {\n        volumeId: this.volumeId,\n        timePointIndex: newTimePointIndex,\n        numTimePoints: this.numTimePoints,\n        splittingTag: this.splittingTag,\n      }\n    );\n  }\n\n  /**\n   * Returns the splitting tag used to split the imageIds in 4D volume\n   */\n  public get splittingTag(): string {\n    return this._splittingTag;\n  }\n\n  /**\n   * Returns the number of time points\n   * @returns number of time points\n   */\n  public get numTimePoints(): number {\n    return this._numTimePoints;\n  }\n\n  /**\n   * Return the active scalar data (buffer)\n   * @returns volume scalar data\n   */\n  public getScalarData(): Types.PixelDataTypedArray {\n    return (<Types.PixelDataTypedArray[]>this.scalarData)[this._timePointIndex];\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not execute the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests = (priority: number) => {\n    return this._getTimePointsRequests(priority);\n  };\n}\n","import { getVolumeInfo, splitImageIdsBy4DTags } from './helpers';\nimport StreamingDynamicImageVolume from './StreamingDynamicImageVolume';\n\ninterface IVolumeLoader {\n  promise: Promise<StreamingDynamicImageVolume>;\n  cancel: () => void;\n  decache: () => void;\n}\n\nfunction get4DVolumeInfo(imageIds: string[]) {\n  const { imageIdsGroups, splittingTag } = splitImageIdsBy4DTags(imageIds);\n  return {\n    volumesInfo: imageIdsGroups.map((imageIds) => getVolumeInfo(imageIds)),\n    splittingTag,\n  };\n}\n\n/**\n * It handles loading of a image by streaming in its imageIds. It will be the\n * volume loader if the schema for the volumeID is `cornerstoneStreamingImageVolume`.\n * This function returns a promise that resolves to the StreamingDynamicImageVolume instance.\n *\n * In order to use the cornerstoneStreamingDynamicImageVolumeLoader you should use\n * createAndCacheVolume helper from the cornerstone-core volumeLoader module.\n *\n * @param volumeId - The ID of the volume\n * @param options - options for loading, imageIds\n * @returns a promise that resolves to a StreamingDynamicImageVolume\n */\nfunction cornerstoneStreamingDynamicImageVolumeLoader(\n  volumeId: string,\n  options: {\n    imageIds: string[];\n  }\n): IVolumeLoader {\n  if (!options || !options.imageIds || !options.imageIds.length) {\n    throw new Error(\n      'ImageIds must be provided to create a 4D streaming image volume'\n    );\n  }\n\n  const { imageIds } = options;\n  const { volumesInfo, splittingTag } = get4DVolumeInfo(imageIds);\n\n  const {\n    metadata: volumeMetadata,\n    dimensions,\n    spacing,\n    origin,\n    direction,\n    sizeInBytes,\n  } = volumesInfo[0];\n\n  const sortedImageIdsArrays = [];\n  const scalarDataArrays = [];\n\n  volumesInfo.forEach((volumeInfo) => {\n    sortedImageIdsArrays.push(volumeInfo.sortedImageIds);\n    scalarDataArrays.push(volumeInfo.scalarData);\n  });\n\n  const sortedImageIds = sortedImageIdsArrays.flat();\n  let streamingImageVolume = new StreamingDynamicImageVolume(\n    // ImageVolume properties\n    {\n      volumeId,\n      metadata: volumeMetadata,\n      dimensions,\n      spacing,\n      origin,\n      direction,\n      scalarData: scalarDataArrays,\n      sizeInBytes,\n      imageIds: sortedImageIds,\n      splittingTag,\n    },\n    // Streaming properties\n    {\n      imageIds: sortedImageIds,\n      loadStatus: {\n        // todo: loading and loaded should be on ImageVolume\n        loaded: false,\n        loading: false,\n        cancelled: false,\n        cachedFrames: [],\n        callbacks: [],\n      },\n    }\n  );\n\n  return {\n    promise: Promise.resolve(streamingImageVolume),\n    decache: () => {\n      streamingImageVolume.destroy();\n      streamingImageVolume = null;\n    },\n    cancel: () => {\n      streamingImageVolume.cancelLoading();\n    },\n  };\n}\n\nexport default cornerstoneStreamingDynamicImageVolumeLoader;\n","import cornerstoneStreamingImageVolumeLoader from './cornerstoneStreamingImageVolumeLoader';\nimport cornerstoneStreamingDynamicImageVolumeLoader from './cornerstoneStreamingDynamicImageVolumeLoader';\nimport StreamingImageVolume from './StreamingImageVolume';\nimport StreamingDynamicImageVolume from './StreamingDynamicImageVolume';\nimport getDynamicVolumeInfo from './helpers/getDynamicVolumeInfo';\nimport * as Enums from './enums';\n\nconst helpers = {\n  getDynamicVolumeInfo,\n};\n\nexport {\n  cornerstoneStreamingImageVolumeLoader,\n  cornerstoneStreamingDynamicImageVolumeLoader,\n  StreamingImageVolume,\n  StreamingDynamicImageVolume,\n  helpers,\n  Enums,\n};\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\n\n/**\n * Get some info about 4D image sets. Time points (groups of imageIds) are\n * returned when the imageIds represents a 4D volume.\n * @param imageIds - Array of Cornerstone Image Object's imageIds\n * @returns 4D series infos\n */\nfunction getDynamicVolumeInfo(imageIds) {\n  const { imageIdsGroups: timePoints, splittingTag } =\n    splitImageIdsBy4DTags(imageIds);\n  const isDynamicVolume = timePoints.length > 1;\n\n  return { isDynamicVolume, timePoints, splittingTag };\n}\n\nexport default getDynamicVolumeInfo;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__953__","__WEBPACK_EXTERNAL_MODULE__976__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","_typeof","iterator","constructor","_defineProperty","arg","input","hint","prim","toPrimitive","res","TypeError","String","configurable","writable","volumeId","renderingEngineAndViewportIds","renderingEnginesArray","getRenderingEngines","i","length","renderingEngine","viewports","utilities","id","push","viewportIds","map","viewport","getRenderingEngineAndViewportsContainingVolume","forEach","_ref","hasBeenDestroyed","renderViewports","scaleArray","array","scalingParameters","arrayLength","rescaleSlope","rescaleIntercept","suvbw","modality","requestTypeDefault","Enums","ProgressiveIterator","imageRetrieveMetadataProvider","hasFloatScalingParameters","csUtils","ImageQualityStatus","BaseStreamingImageVolume","ImageVolume","imageVolumeProperties","streamingProperties","super","this","loadStatus","loading","cancelled","clearLoadCallbacks","imageLoadPoolManager","additionalDetails","callback","imageIds","numFrames","transferSyntaxUID","metaData","imageRetrieveConfiguration","IMAGE_RETRIEVE_CONFIGURATION","imagesLoader","create","ProgressiveRetrieveImages","loaded","totalNumFrames","success","framesLoaded","framesProcessed","callbacks","_prefetchImageIds","invalidateVolume","immediate","imageData","vtkOpenGLTexture","setUpdatedFrame","modified","autoLoad","callLoadStatusCallback","evt","framesUpdated","reRenderFraction","metadata","FrameOfReferenceUID","autoRenderOnLoad","reRenderTarget","eventDetail","triggerEvent","eventTarget","updateTextureAndTriggerEvents","imageIdIndex","imageId","imageQualityStatus","arguments","FULL_RESOLUTION","frameIndex","imageIdIndexToFrameIndex","cachedFrames","complete","imageVolume","successCallback","image","getImageIdIndex","options","getLoaderImageOptions","scalarData","getScalarDataByImageIdIndex","buffer","ArrayBuffer","offset","targetBuffer","pixelData","getPixelData","Float32Array","bytesInFloat","floatView","set","Int16Array","bytesInInt16","intView","Uint16Array","bytesInUint16","Uint8Array","bytesInUint8","e","console","error","handleArrayBufferLoad","preScale","cachedImage","cache","cachedVolume","warn","volume","isFromImageCache","_options$targetBuffer","_options$targetBuffer2","imageCacheOffsetMap","cachedImageOrVolume","handleImageComingFromCache","errorCallback","permanent","imagePlaneModule","rows","columns","arrayBuffer","type","lengthInBytes","byteSize","Error","getScalarDataType","modalityLutModule","generalSeriesModule","suvFactor","_addScalingToVolume","isSlopeAndInterceptNumbers","floatAfterScale","allowFloatRendering","canRenderFloatTextures","isPreScaled","skipCreateImage","enabled","transferPixelData","loader","imageLoader","callLoadImage","as","bind","getImageIdsRequests","priorityDefault","requestType","priority","imageLoadObject","convertToCornerstoneImage","promise","then","imageScalarData","_scaleIfNecessary","pixelsPerImage","bytesPerImage","cornerstoneImageMetaData","TypedArray","byteOffset","bytePerPixel","BYTES_PER_ELEMENT","catch","err","getImageLoadRequests","_priority","getImageIdsToLoad","loadImages","listener","reverse","request","Promise","resolve","debug","scalingParametersToUse","_image$preScale","slice","imageIsAlreadyScaled","scaled","noScalingParametersToUse","rescaleSlopeToUse","rescaleInterceptToUse","suvbwToUse","rescaleSlopeUsed","rescaleInterceptUsed","suvbwUsed","newSuvbw","newRescaleSlope","newRescaleIntercept","scaling","suvlbm","suvbsa","petScaling","suvbwToSuvlbm","suvbwToSuvbsa","PT","StreamingImageVolume","getScalarData","streamingImageVolumePromise","async","split","middleImageIndex","lastImageIndex","Math","floor","indexesToPrefetch","all","index","reject","log","concat","dimensions","spacing","origin","direction","sizeInBytes","getStreamingImageVolume","decache","streamingImageVolume","destroy","cancel","cancelLoading","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","keys","frame_value_set","Set","frames","j","frame_value","add","size","Array","from","setEquals","getTagValue","tag","parseFloat","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","dv","DataView","setUint8","charCodeAt","getSiemensPrivateBValue","getGEPrivateBValue","set_a","set_b","has","getPetFrameReferenceTime","moduleInfo","positionGroups","ippMetadata","imagePositionPatient","every","item","reduce","rv","x","frame_count","groupBy","k","getIPPGroups","imageIdsGroups","splittingTag","tags","fncList2","Number","sort","a","b","createUint8SharedArray","createFloat32SharedArray","Events","StreamingDynamicImageVolume","_ensureValidData","timePoint","timePoints","_getTimePointsToLoad","timePointsRequests","timePointRequests","_getTimePointRequests","_getTimePointsRequests","_numTimePoints","_timePoints","_getTimePointsData","_splittingTag","scalarDataArrays","numTimePoints","start","end","initialTimePointIndex","_timePointIndex","timePointsToLoad","leftIndex","rightIndex","timePointIds","isDynamicVolume","timePointIndex","newTimePointIndex","getPointData","setActiveScalars","StreamingEvents","volumesInfo","splitImageIdsBy4DTags","volumeMetadata","BitsAllocated","PixelRepresentation","PhotometricInterpretation","ImageOrientationPatient","PixelSpacing","Columns","Rows","rowCosineVec","vec3","colCosineVec","scanAxisNormal","zSpacing","sortedImageIds","signed","numComponents","getVolumeInfo","get4DVolumeInfo","sortedImageIdsArrays","volumeInfo","flat","helpers","getDynamicVolumeInfo"],"sourceRoot":""}