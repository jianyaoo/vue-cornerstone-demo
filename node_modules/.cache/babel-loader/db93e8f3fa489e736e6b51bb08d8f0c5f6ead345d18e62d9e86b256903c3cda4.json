{"ast":null,"code":"import { interpolatePoints } from './algorithms/bspline';\nfunction getContinuousUniformDistributionValues(minDistributionDistance, closedInterval) {\n  const result = [];\n  const [intervalIni, intervalEnd] = closedInterval;\n  const intervalSize = intervalEnd - intervalIni + 1;\n  const intensity = Math.floor(intervalSize / minDistributionDistance);\n  let x = 0;\n  let continuosDistributionValue = Math.round((intervalSize - 1) / (intensity - 1) * x) + intervalIni;\n  while (continuosDistributionValue <= intervalEnd) {\n    result.push(continuosDistributionValue);\n    x++;\n    continuosDistributionValue = Math.round((intervalSize - 1) / (intensity - 1) * x) + intervalIni;\n  }\n  return result;\n}\nexport default function interpolateSegmentPoints(points, iniIndex, endIndex, knotsRatioPercentage) {\n  const segmentSize = endIndex - iniIndex + 1;\n  const amountOfKnots = Math.floor(knotsRatioPercentage / 100 * segmentSize) ?? 1;\n  const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n  if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n    return points;\n  }\n  if (segmentSize / minKnotDistance < 2) {\n    return points;\n  }\n  const interpolationIniIndex = Math.max(0, iniIndex);\n  const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n  const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n  const segmentPointsUnchangedEnd = points.slice(interpolationEndIndex + 1, points.length);\n  const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [interpolationIniIndex, interpolationEndIndex]);\n  const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n  return [...segmentPointsUnchangedBeg, ...interpolatedPoints, ...segmentPointsUnchangedEnd];\n}","map":{"version":3,"names":["interpolatePoints","getContinuousUniformDistributionValues","minDistributionDistance","closedInterval","result","intervalIni","intervalEnd","intervalSize","intensity","Math","floor","x","continuosDistributionValue","round","push","interpolateSegmentPoints","points","iniIndex","endIndex","knotsRatioPercentage","segmentSize","amountOfKnots","minKnotDistance","isNaN","interpolationIniIndex","max","interpolationEndIndex","min","length","segmentPointsUnchangedBeg","slice","segmentPointsUnchangedEnd","knotsIndexes","interpolatedPoints"],"sources":["../../../../../src/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.ts"],"sourcesContent":[null],"mappings":"AACA,SAASA,iBAAiB,QAAQ,sBAAsB;AAgBxD,SAASC,sCAAsCA,CAC7CC,uBAA+B,EAC/BC,cAAgC;EAEhC,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAM,CAACC,WAAW,EAAEC,WAAW,CAAC,GAAGH,cAAc;EAEjD,MAAMI,YAAY,GAAGD,WAAW,GAAGD,WAAW,GAAG,CAAC;EAClD,MAAMG,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,GAAGL,uBAAuB,CAAC;EAEpE,IAAIS,CAAC,GAAG,CAAC;EACT,IAAIC,0BAA0B,GAC5BH,IAAI,CAACI,KAAK,CAAE,CAACN,YAAY,GAAG,CAAC,KAAKC,SAAS,GAAG,CAAC,CAAC,GAAIG,CAAC,CAAC,GAAGN,WAAW;EAEtE,OAAOO,0BAA0B,IAAIN,WAAW,EAAE;IAChDF,MAAM,CAACU,IAAI,CAACF,0BAA0B,CAAC;IACvCD,CAAC,EAAE;IACHC,0BAA0B,GACxBH,IAAI,CAACI,KAAK,CAAE,CAACN,YAAY,GAAG,CAAC,KAAKC,SAAS,GAAG,CAAC,CAAC,GAAIG,CAAC,CAAC,GAAGN,WAAW;;EAGxE,OAAOD,MAAM;AACf;AAQA,eAAc,SAAUW,wBAAwBA,CAC9CC,MAAuC,EACvCC,QAAgB,EAChBC,QAAgB,EAChBC,oBAA4B;EAE5B,MAAMC,WAAW,GAAGF,QAAQ,GAAGD,QAAQ,GAAG,CAAC;EAE3C,MAAMI,aAAa,GACjBZ,IAAI,CAACC,KAAK,CAAES,oBAAoB,GAAG,GAAG,GAAIC,WAAW,CAAC,IAAI,CAAC;EAC7D,MAAME,eAAe,GAAGb,IAAI,CAACC,KAAK,CAACU,WAAW,GAAGC,aAAa,CAAC,IAAI,CAAC;EAEpE,IAAIE,KAAK,CAACH,WAAW,CAAC,IAAI,CAACA,WAAW,IAAI,CAACE,eAAe,EAAE;IAC1D,OAAON,MAAM;;EAIf,IAAII,WAAW,GAAGE,eAAe,GAAG,CAAC,EAAE;IACrC,OAAON,MAAM;;EAGf,MAAMQ,qBAAqB,GAAGf,IAAI,CAACgB,GAAG,CAAC,CAAC,EAAER,QAAQ,CAAC;EACnD,MAAMS,qBAAqB,GAAGjB,IAAI,CAACkB,GAAG,CAACX,MAAM,CAACY,MAAM,GAAG,CAAC,EAAEV,QAAQ,CAAC;EACnE,MAAMW,yBAAyB,GAAGb,MAAM,CAACc,KAAK,CAAC,CAAC,EAAEN,qBAAqB,CAAC;EAExE,MAAMO,yBAAyB,GAAGf,MAAM,CAACc,KAAK,CAC5CJ,qBAAqB,GAAG,CAAC,EACzBV,MAAM,CAACY,MAAM,CACd;EAED,MAAMI,YAAY,GAAG/B,sCAAsC,CAACqB,eAAe,EAAE,CAC3EE,qBAAqB,EACrBE,qBAAqB,CACtB,CAAC;EAEF,MAAMO,kBAAkB,GAAGjC,iBAAiB,CAACgB,MAAM,EAAEgB,YAAY,CAAC;EAElE,OAAO,CACL,GAAGH,yBAAyB,EAC5B,GAAGI,kBAAkB,EACrB,GAAGF,yBAAyB,CAC7B;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}