"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSegmentationRepresentation = void 0;
const core_1 = require("@cornerstonejs/core");
const SegmentationConfig = __importStar(require("./config/segmentationConfig"));
const segmentationState_1 = require("./segmentationState");
const getRepresentationSpecificConfig_1 = require("./helpers/getRepresentationSpecificConfig");
const COLOR_LUT_1 = __importDefault(require("../../constants/COLOR_LUT"));
const ToolGroupManager_1 = require("../../store/ToolGroupManager");
const utilities_1 = require("../../utilities");
const enums_1 = require("../../enums");
function addSegmentationRepresentation(toolGroupId, representationInput, toolGroupSpecificConfig) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { segmentationId, options = {} } = representationInput;
        const segmentationRepresentationUID = ((_a = representationInput.options) === null || _a === void 0 ? void 0 : _a.segmentationRepresentationUID) ||
            core_1.utilities.uuidv4();
        const segmentsHidden = new Set();
        const colorLUTIndexToUse = getColorLUTIndex(options);
        const toolGroupSpecificRepresentation = {
            segmentationId,
            segmentationRepresentationUID,
            type: representationInput.type,
            segmentsHidden,
            colorLUTIndex: colorLUTIndexToUse,
            active: true,
            segmentationRepresentationSpecificConfig: {},
            segmentSpecificConfig: {},
            config: (0, getRepresentationSpecificConfig_1.getRepresentationSpecificConfig)(representationInput),
            polySeg: options.polySeg,
        };
        if (toolGroupSpecificConfig) {
            const currentToolGroupConfig = SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);
            const mergedConfig = core_1.utilities.deepMerge(currentToolGroupConfig, toolGroupSpecificConfig);
            SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {
                renderInactiveSegmentations: mergedConfig.renderInactiveSegmentations || true,
                representations: Object.assign({}, mergedConfig.representations),
            });
        }
        (0, segmentationState_1.addSegmentationRepresentation)(toolGroupId, toolGroupSpecificRepresentation);
        if (representationInput.type === enums_1.SegmentationRepresentations.Contour) {
            (0, ToolGroupManager_1.getToolGroup)(toolGroupId)
                .getViewportsInfo()
                .forEach(({ viewportId, renderingEngineId }) => {
                const renderingEngine = (0, core_1.getRenderingEngine)(renderingEngineId);
                (0, utilities_1.triggerAnnotationRenderForViewportIds)(renderingEngine, [viewportId]);
            });
        }
        return segmentationRepresentationUID;
    });
}
exports.addSegmentationRepresentation = addSegmentationRepresentation;
function getColorLUTIndex(options = {}) {
    const colorLUTOrIndexInput = options.colorLUTOrIndex;
    let colorLUTIndexToUse;
    if (typeof colorLUTOrIndexInput === 'number') {
        colorLUTIndexToUse = colorLUTOrIndexInput;
    }
    else {
        const nextIndex = (0, segmentationState_1.getNextColorLUTIndex)();
        const colorLUTToAdd = Array.isArray(colorLUTOrIndexInput)
            ? colorLUTOrIndexInput
            : COLOR_LUT_1.default;
        (0, segmentationState_1.addColorLUT)(colorLUTToAdd, nextIndex);
        colorLUTIndexToUse = nextIndex;
    }
    return colorLUTIndexToUse;
}
//# sourceMappingURL=addSegmentationRepresentation.js.map