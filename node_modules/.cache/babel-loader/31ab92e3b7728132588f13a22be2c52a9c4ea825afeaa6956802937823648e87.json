{"ast":null,"code":"import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","map":{"version":3,"names":["glMatrix","quat","mat4","create","dq","ARRAY_TYPE","Float32Array","clone","a","fromValues","x1","y1","z1","w1","x2","y2","z2","w2","fromRotationTranslationValues","ax","ay","az","fromRotationTranslation","out","q","t","bx","by","bz","bw","fromTranslation","fromRotation","fromMat4","outer","getRotation","getTranslation","copy","identity","set","getReal","getDual","setReal","setDual","aw","translate","v","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateX","rad","rotateY","rotateZ","rotateByQuatAppend","qx","qy","qz","qw","rotateByQuatPrepend","rotateAroundAxis","axis","Math","abs","EPSILON","axisLength","hypot","s","sin","cos","add","b","multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mul","scale","dot","lerp","mt","invert","sqlen","squaredLength","conjugate","length","len","sqrLen","normalize","magnitude","sqrt","a0","a1","a2","a3","b0","b1","b2","b3","a_dot_b","str","exactEquals","equals","a4","a5","a6","a7","b4","b5","b6","b7","max"],"sources":["/root/vue-cornerstone-demo/node_modules/gl-matrix/esm/quat2.js"],"sourcesContent":["import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}