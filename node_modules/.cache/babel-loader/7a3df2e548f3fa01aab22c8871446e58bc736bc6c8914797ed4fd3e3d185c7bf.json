{"ast":null,"code":"import { StackViewport } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst EPSILON = 1e-3;\nconst getSubPixelSpacingAndXYDirections = (viewport, subPixelResolution) => {\n  let spacing;\n  let xDir;\n  let yDir;\n  if (viewport instanceof StackViewport) {\n    const imageData = viewport.getImageData();\n    xDir = imageData.direction.slice(0, 3);\n    yDir = imageData.direction.slice(3, 6);\n    spacing = imageData.spacing;\n  } else {\n    const imageData = viewport.getImageData();\n    const {\n      direction,\n      spacing: volumeSpacing\n    } = imageData;\n    const {\n      viewPlaneNormal,\n      viewUp\n    } = viewport.getCamera();\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const absViewRightDotI = Math.abs(vec3.dot(viewRight, iVector));\n    const absViewRightDotJ = Math.abs(vec3.dot(viewRight, jVector));\n    const absViewRightDotK = Math.abs(vec3.dot(viewRight, kVector));\n    let xSpacing;\n    if (Math.abs(1 - absViewRightDotI) < EPSILON) {\n      xSpacing = volumeSpacing[0];\n      xDir = iVector;\n    } else if (Math.abs(1 - absViewRightDotJ) < EPSILON) {\n      xSpacing = volumeSpacing[1];\n      xDir = jVector;\n    } else if (Math.abs(1 - absViewRightDotK) < EPSILON) {\n      xSpacing = volumeSpacing[2];\n      xDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n    const absViewUpDotI = Math.abs(vec3.dot(viewUp, iVector));\n    const absViewUpDotJ = Math.abs(vec3.dot(viewUp, jVector));\n    const absViewUpDotK = Math.abs(vec3.dot(viewUp, kVector));\n    let ySpacing;\n    if (Math.abs(1 - absViewUpDotI) < EPSILON) {\n      ySpacing = volumeSpacing[0];\n      yDir = iVector;\n    } else if (Math.abs(1 - absViewUpDotJ) < EPSILON) {\n      ySpacing = volumeSpacing[1];\n      yDir = jVector;\n    } else if (Math.abs(1 - absViewUpDotK) < EPSILON) {\n      ySpacing = volumeSpacing[2];\n      yDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n    spacing = [xSpacing, ySpacing];\n  }\n  const subPixelSpacing = [spacing[0] / subPixelResolution, spacing[1] / subPixelResolution];\n  return {\n    spacing: subPixelSpacing,\n    xDir,\n    yDir\n  };\n};\nexport default getSubPixelSpacingAndXYDirections;","map":{"version":3,"names":["StackViewport","vec3","EPSILON","getSubPixelSpacingAndXYDirections","viewport","subPixelResolution","spacing","xDir","yDir","imageData","getImageData","direction","slice","volumeSpacing","viewPlaneNormal","viewUp","getCamera","iVector","jVector","kVector","viewRight","create","cross","absViewRightDotI","Math","abs","dot","absViewRightDotJ","absViewRightDotK","xSpacing","Error","absViewUpDotI","absViewUpDotJ","absViewUpDotK","ySpacing","subPixelSpacing"],"sources":["../../../../../src/utilities/math/polyline/getSubPixelSpacingAndXYDirections.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}