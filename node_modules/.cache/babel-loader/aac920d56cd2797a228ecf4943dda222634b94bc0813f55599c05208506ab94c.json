{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as Comlink from 'comlink';\nimport { RequestType } from '../enums/';\nimport { RequestPoolManager } from '../requestPool/requestPoolManager';\nclass CentralizedWorkerManager {\n  constructor() {\n    this.workerRegistry = {};\n    this.workerPoolManager = new RequestPoolManager('webworker');\n    this.checkIntervalForIdleWorkers = 1000;\n  }\n  setCheckIntervalForIdleWorkers(value) {\n    this.checkIntervalForIdleWorkers = value;\n  }\n  registerWorker(workerName, workerFn, options = {}) {\n    const {\n      maxWorkerInstances = 1,\n      overwrite = false,\n      autoTerminateOnIdle = false\n    } = options;\n    if (this.workerRegistry[workerName] && !overwrite) {\n      console.warn(`Worker type '${workerName}' is already registered...`);\n      return;\n    }\n    if (overwrite && this.workerRegistry[workerName]?.idleCheckIntervalId) {\n      clearInterval(this.workerRegistry[workerName].idleCheckIntervalId);\n    }\n    const workerProperties = {\n      workerFn: null,\n      idleCheckIntervalId: null,\n      instances: [],\n      loadCounters: [],\n      lastActiveTime: [],\n      nativeWorkers: []\n    };\n    if (autoTerminateOnIdle && !workerProperties.idleCheckIntervalId || overwrite) {\n      const idleCheckIntervalId = setInterval(() => {\n        this.terminateIdleWorkers(workerName, autoTerminateOnIdle);\n      }, this.checkIntervalForIdleWorkers);\n      workerProperties.idleCheckIntervalId = idleCheckIntervalId;\n    }\n    workerProperties.loadCounters = Array(maxWorkerInstances).fill(0);\n    workerProperties.lastActiveTime = Array(maxWorkerInstances).fill(null);\n    for (let i = 0; i < maxWorkerInstances; i++) {\n      const worker = workerFn();\n      workerProperties.instances.push(Comlink.wrap(worker));\n      workerProperties.nativeWorkers.push(worker);\n      workerProperties.workerFn = workerFn;\n    }\n    this.workerRegistry[workerName] = workerProperties;\n  }\n  getNextWorkerAPI(workerName) {\n    const workerProperties = this.workerRegistry[workerName];\n    if (!workerProperties) {\n      console.error(`Worker type '${workerName}' is not registered.`);\n      return null;\n    }\n    const workerInstances = workerProperties.instances.filter(instance => instance !== null);\n    let minLoadIndex = 0;\n    let minLoadValue = workerProperties.loadCounters[0] || 0;\n    for (let i = 1; i < workerInstances.length; i++) {\n      const currentLoadValue = workerProperties.loadCounters[i] || 0;\n      if (currentLoadValue < minLoadValue) {\n        minLoadIndex = i;\n        minLoadValue = currentLoadValue;\n      }\n    }\n    if (workerProperties.instances[minLoadIndex] === null) {\n      const worker = workerProperties.workerFn();\n      workerProperties.instances[minLoadIndex] = Comlink.wrap(worker);\n      workerProperties.nativeWorkers[minLoadIndex] = worker;\n    }\n    workerProperties.loadCounters[minLoadIndex] += 1;\n    return {\n      api: workerProperties.instances[minLoadIndex],\n      index: minLoadIndex\n    };\n  }\n  executeTask(workerName, methodName, args = {}, {\n    requestType = RequestType.Compute,\n    priority = 0,\n    options = {}\n  } = {}) {\n    return new Promise((resolve, reject) => {\n      const requestFn = async () => {\n        const {\n          api,\n          index\n        } = this.getNextWorkerAPI(workerName);\n        if (!api) {\n          const error = new Error(`No available worker instance for '${workerName}'`);\n          console.error(error);\n          reject(error);\n          return;\n        }\n        try {\n          const results = await api[methodName](args);\n          const workerProperties = this.workerRegistry[workerName];\n          workerProperties.lastActiveTime[index] = Date.now();\n          resolve(results);\n        } catch (err) {\n          console.error(`Error executing method '${methodName}' on worker '${workerName}':`, err);\n          reject(err);\n        } finally {\n          this.workerRegistry[workerName].loadCounters[index]--;\n        }\n      };\n      this.workerPoolManager.addRequest(requestFn, requestType, options, priority);\n    });\n  }\n  terminateIdleWorkers(workerName, idleTimeThreshold) {\n    const workerProperties = this.workerRegistry[workerName];\n    const now = Date.now();\n    workerProperties.instances.forEach((workerInstance, index) => {\n      if (workerProperties.lastActiveTime[index] == null) {\n        return;\n      }\n      const idleTime = now - workerProperties.lastActiveTime[index];\n      if (idleTime > idleTimeThreshold && workerInstance !== null) {\n        workerInstance[Comlink.releaseProxy]();\n        workerProperties.nativeWorkers[index].terminate();\n        workerProperties.instances[index] = null;\n        workerProperties.lastActiveTime[index] = null;\n      }\n    });\n  }\n  terminate(workerName) {\n    const workerProperties = this.workerRegistry[workerName];\n    if (!workerProperties) {\n      console.error(`Worker type '${workerName}' is not registered.`);\n      return;\n    }\n    workerProperties.instances.forEach(workerInstance => {\n      workerInstance[Comlink.releaseProxy]();\n    });\n    workerProperties.nativeWorkers.forEach(worker => {\n      worker.terminate();\n    });\n  }\n}\nexport default CentralizedWorkerManager;","map":{"version":3,"names":["Comlink","RequestType","RequestPoolManager","CentralizedWorkerManager","constructor","workerRegistry","workerPoolManager","checkIntervalForIdleWorkers","setCheckIntervalForIdleWorkers","value","registerWorker","workerName","workerFn","options","maxWorkerInstances","overwrite","autoTerminateOnIdle","console","warn","idleCheckIntervalId","clearInterval","workerProperties","instances","loadCounters","lastActiveTime","nativeWorkers","setInterval","terminateIdleWorkers","Array","fill","i","worker","push","wrap","getNextWorkerAPI","error","workerInstances","filter","instance","minLoadIndex","minLoadValue","length","currentLoadValue","api","index","executeTask","methodName","args","requestType","Compute","priority","Promise","resolve","reject","requestFn","Error","results","Date","now","err","addRequest","idleTimeThreshold","forEach","workerInstance","idleTime","releaseProxy","terminate"],"sources":["../../../src/webWorkerManager/webWorkerManager.js"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}