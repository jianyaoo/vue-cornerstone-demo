"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pointInShapeCallback_1 = __importDefault(require("../../../../utilities/pointInShapeCallback"));
const StrategyCallbacks_1 = __importDefault(require("../../../../enums/StrategyCallbacks"));
exports.default = {
    [StrategyCallbacks_1.default.Initialize]: (operationData) => {
        const { strategySpecificConfiguration } = operationData;
        if (!strategySpecificConfiguration) {
            return;
        }
        const { centerSegmentIndex } = strategySpecificConfiguration;
        if (centerSegmentIndex) {
            operationData.segmentIndex = centerSegmentIndex.segmentIndex;
        }
    },
    [StrategyCallbacks_1.default.OnInteractionStart]: (operationData) => {
        const { segmentIndex, previewSegmentIndex, segmentationVoxelManager: segmentationVoxelManager, centerIJK, strategySpecificConfiguration, imageVoxelManager: imageVoxelManager, segmentationImageData, preview, } = operationData;
        if (!(strategySpecificConfiguration === null || strategySpecificConfiguration === void 0 ? void 0 : strategySpecificConfiguration.useCenterSegmentIndex)) {
            return;
        }
        delete strategySpecificConfiguration.centerSegmentIndex;
        let hasSegmentIndex = false;
        let hasPreviewIndex = false;
        const callback = ({ value }) => {
            hasSegmentIndex || (hasSegmentIndex = value === segmentIndex);
            hasPreviewIndex || (hasPreviewIndex = value === previewSegmentIndex);
        };
        (0, pointInShapeCallback_1.default)(segmentationImageData, imageVoxelManager.isInObject, callback, segmentationVoxelManager.boundsIJK);
        if (!hasSegmentIndex && !hasPreviewIndex) {
            return;
        }
        let existingValue = segmentationVoxelManager.getAtIJKPoint(centerIJK);
        if (existingValue === previewSegmentIndex) {
            if (preview) {
                existingValue = preview.segmentIndex;
            }
            else {
                return;
            }
        }
        else if (hasPreviewIndex) {
            existingValue = null;
        }
        operationData.segmentIndex = existingValue;
        strategySpecificConfiguration.centerSegmentIndex = {
            segmentIndex: existingValue,
        };
    },
};
//# sourceMappingURL=determineSegmentIndex.js.map