import { BlendModes, InterpolationType, OrientationAxis } from '../enums';
import type { FlipDirection, IImageData, IVolumeInput, OrientationVectors, Point2, Point3, VolumeViewportProperties, ViewReferenceSpecifier, ReferenceCompatibleOptions, ViewReference, IVolumeViewport } from '../types';
import { VoiModifiedEventDetail } from '../types/EventTypes';
import type { ViewportInput } from '../types/IViewport';
import Viewport from './Viewport';
declare abstract class BaseVolumeViewport extends Viewport implements IVolumeViewport {
    useCPURendering: boolean;
    useNativeDataType: boolean;
    private _FrameOfReferenceUID;
    protected initialTransferFunctionNodes: any;
    private globalDefaultProperties;
    private perVolumeIdDefaultProperties;
    protected initialViewUp: Point3;
    protected viewportProperties: VolumeViewportProperties;
    constructor(props: ViewportInput);
    static get useCustomRenderingPipeline(): boolean;
    resetCamera(resetPan?: boolean, resetZoom?: boolean, resetToCenter?: boolean, resetRotation?: boolean, supressEvents?: boolean, resetOrientation?: boolean): boolean;
    protected applyViewOrientation(orientation: OrientationAxis | OrientationVectors, resetCamera?: boolean): void;
    private initializeVolumeNewImageEventDispatcher;
    protected resetVolumeViewportClippingRange(): void;
    private setVOILUTFunction;
    private setColormap;
    private setOpacity;
    private setInvert;
    protected getVOIModifiedEventDetail(volumeId: string): VoiModifiedEventDetail;
    private _getOrCreateColorTransferFunction;
    protected setInterpolationType(interpolationType: InterpolationType, volumeId?: string): void;
    private setVOI;
    protected setRotation: (rotation: number) => void;
    private rotateCamera;
    setDefaultProperties(ViewportProperties: VolumeViewportProperties, volumeId?: string): void;
    clearDefaultProperties(volumeId?: string): void;
    getViewReference(viewRefSpecifier?: ViewReferenceSpecifier): ViewReference;
    isReferenceViewable(viewRef: ViewReference, options?: ReferenceCompatibleOptions): boolean;
    scroll(delta?: number): void;
    setViewReference(viewRef: ViewReference): void;
    setProperties({ voiRange, VOILUTFunction, invert, colormap, preset, interpolationType, slabThickness, rotation, }?: VolumeViewportProperties, volumeId?: string, suppressEvents?: boolean): void;
    resetToDefaultProperties(volumeId: string): void;
    private setPreset;
    getDefaultProperties: (volumeId?: string) => VolumeViewportProperties;
    getProperties: (volumeId?: string) => VolumeViewportProperties;
    private getColormap;
    setVolumes(volumeInputArray: Array<IVolumeInput>, immediate?: boolean, suppressEvents?: boolean): Promise<void>;
    addVolumes(volumeInputArray: Array<IVolumeInput>, immediate?: boolean, suppressEvents?: boolean): Promise<void>;
    removeVolumeActors(actorUIDs: Array<string>, immediate?: boolean): void;
    setOrientation(_orientation: OrientationAxis | OrientationVectors, _immediate?: boolean): void;
    private initializeColorTransferFunction;
    private _getApplicableVolumeActor;
    private _isValidVolumeInputArray;
    getRotation: () => number;
    getBounds(): number[];
    flip(flipDirection: FlipDirection): void;
    getFrameOfReferenceUID: () => string;
    hasVolumeId(volumeId: string): boolean;
    getImageData(volumeId?: string): IImageData | undefined;
    private _setVolumeActors;
    canvasToWorld: (canvasPos: Point2) => Point3;
    worldToCanvas: (worldPos: Point3) => Point2;
    hasImageURI: (imageURI: string) => boolean;
    protected _getOrientationVectors(orientation: OrientationAxis | OrientationVectors): OrientationVectors;
    getSlabThickness(): number;
    getIntensityFromWorld(point: Point3): number;
    getImageIds: (volumeId?: string) => Array<string>;
    abstract getCurrentImageId(): string;
    protected getVolumeId(specifier?: ViewReferenceSpecifier): string;
    getReferenceId(specifier?: ViewReferenceSpecifier): string;
    abstract setBlendMode(blendMode: BlendModes, filterActorUIDs?: Array<string>, immediate?: boolean): void;
    abstract setSlabThickness(slabThickness: number, filterActorUIDs?: Array<string>): void;
    abstract resetSlabThickness(): void;
    abstract resetProperties(volumeId?: string): void;
}
export default BaseVolumeViewport;
//# sourceMappingURL=BaseVolumeViewport.d.ts.map