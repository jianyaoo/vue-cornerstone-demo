{"ast":null,"code":"// See https://github.com/OHIF/Viewers/blob/94a9067fe3d291d30e25a1bda5913511388edea2/platform/core/src/utils/metadataProvider/getPixelSpacingInformation.js\n\nexport default function getPixelSpacingInformation(instance) {\n  // See http://gdcm.sourceforge.net/wiki/index.php/Imager_Pixel_Spacing\n\n  // TODO: Add Ultrasound region spacing\n  // TODO: Add manual calibration\n\n  // TODO: Use ENUMS from dcmjs\n  const projectionRadiographSOPClassUIDs = [\"1.2.840.10008.5.1.4.1.1.1\",\n  //\tCR Image Storage\n  \"1.2.840.10008.5.1.4.1.1.1.1\",\n  //\tDigital X-Ray Image Storage – for Presentation\n  \"1.2.840.10008.5.1.4.1.1.1.1.1\",\n  //\tDigital X-Ray Image Storage – for Processing\n  \"1.2.840.10008.5.1.4.1.1.1.2\",\n  //\tDigital Mammography X-Ray Image Storage – for Presentation\n  \"1.2.840.10008.5.1.4.1.1.1.2.1\",\n  //\tDigital Mammography X-Ray Image Storage – for Processing\n  \"1.2.840.10008.5.1.4.1.1.1.3\",\n  //\tDigital Intra – oral X-Ray Image Storage – for Presentation\n  \"1.2.840.10008.5.1.4.1.1.1.3.1\",\n  //\tDigital Intra – oral X-Ray Image Storage – for Processing\n  \"1.2.840.10008.5.1.4.1.1.12.1\",\n  //\tX-Ray Angiographic Image Storage\n  \"1.2.840.10008.5.1.4.1.1.12.1.1\",\n  //\tEnhanced XA Image Storage\n  \"1.2.840.10008.5.1.4.1.1.12.2\",\n  //\tX-Ray Radiofluoroscopic Image Storage\n  \"1.2.840.10008.5.1.4.1.1.12.2.1\",\n  //\tEnhanced XRF Image Storage\n  \"1.2.840.10008.5.1.4.1.1.12.3\" // X-Ray Angiographic Bi-plane Image Storage\tRetired\n  ];\n  const {\n    PixelSpacing,\n    ImagerPixelSpacing,\n    SOPClassUID,\n    PixelSpacingCalibrationType,\n    PixelSpacingCalibrationDescription,\n    EstimatedRadiographicMagnificationFactor,\n    SequenceOfUltrasoundRegions\n  } = instance;\n  const isProjection = projectionRadiographSOPClassUIDs.includes(SOPClassUID);\n  const TYPES = {\n    NOT_APPLICABLE: \"NOT_APPLICABLE\",\n    UNKNOWN: \"UNKNOWN\",\n    CALIBRATED: \"CALIBRATED\",\n    DETECTOR: \"DETECTOR\"\n  };\n  if (!isProjection) {\n    return PixelSpacing;\n  }\n  if (isProjection && !ImagerPixelSpacing) {\n    // If only Pixel Spacing is present, and this is a projection radiograph,\n    // PixelSpacing should be used, but the user should be informed that\n    // what it means is unknown\n    return {\n      PixelSpacing,\n      type: TYPES.UNKNOWN,\n      isProjection\n    };\n  } else if (PixelSpacing && ImagerPixelSpacing && PixelSpacing === ImagerPixelSpacing) {\n    // If Imager Pixel Spacing and Pixel Spacing are present and they have the same values,\n    // then the user should be informed that the measurements are at the detector plane\n    return {\n      PixelSpacing,\n      type: TYPES.DETECTOR,\n      isProjection\n    };\n  } else if (PixelSpacing && ImagerPixelSpacing && PixelSpacing !== ImagerPixelSpacing) {\n    // If Imager Pixel Spacing and Pixel Spacing are present and they have different values,\n    // then the user should be informed that these are \"calibrated\"\n    // (in some unknown manner if Pixel Spacing Calibration Type and/or\n    // Pixel Spacing Calibration Description are absent)\n    return {\n      PixelSpacing,\n      type: TYPES.CALIBRATED,\n      isProjection,\n      PixelSpacingCalibrationType,\n      PixelSpacingCalibrationDescription\n    };\n  } else if (!PixelSpacing && ImagerPixelSpacing) {\n    let CorrectedImagerPixelSpacing = ImagerPixelSpacing;\n    if (EstimatedRadiographicMagnificationFactor) {\n      // Note that in IHE Mammo profile compliant displays, the value of Imager Pixel Spacing is required to be corrected by\n      // Estimated Radiographic Magnification Factor and the user informed of that.\n      // TODO: should this correction be done before all of this logic?\n      CorrectedImagerPixelSpacing = ImagerPixelSpacing.map(pixelSpacing => pixelSpacing / EstimatedRadiographicMagnificationFactor);\n    } else {\n      console.warn(\"EstimatedRadiographicMagnificationFactor was not present. Unable to correct ImagerPixelSpacing.\");\n    }\n    return {\n      PixelSpacing: CorrectedImagerPixelSpacing,\n      isProjection\n    };\n  } else if (SequenceOfUltrasoundRegions && typeof SequenceOfUltrasoundRegions === \"object\") {\n    const {\n      PhysicalDeltaX,\n      PhysicalDeltaY\n    } = SequenceOfUltrasoundRegions;\n    const USPixelSpacing = [PhysicalDeltaX * 10, PhysicalDeltaY * 10];\n    return {\n      PixelSpacing: USPixelSpacing\n    };\n  } else if (SequenceOfUltrasoundRegions && Array.isArray(SequenceOfUltrasoundRegions) && SequenceOfUltrasoundRegions.length > 1) {\n    console.warn(\"Sequence of Ultrasound Regions > one entry. This is not yet implemented, all measurements will be shown in pixels.\");\n  } else if (isProjection === false && !ImagerPixelSpacing) {\n    // If only Pixel Spacing is present, and this is not a projection radiograph,\n    // we can stop here\n    return {\n      PixelSpacing,\n      type: TYPES.NOT_APPLICABLE,\n      isProjection\n    };\n  }\n  console.warn(\"Unknown combination of PixelSpacing and ImagerPixelSpacing identified. Unable to determine spacing.\");\n}","map":{"version":3,"names":["getPixelSpacingInformation","instance","projectionRadiographSOPClassUIDs","PixelSpacing","ImagerPixelSpacing","SOPClassUID","PixelSpacingCalibrationType","PixelSpacingCalibrationDescription","EstimatedRadiographicMagnificationFactor","SequenceOfUltrasoundRegions","isProjection","includes","TYPES","NOT_APPLICABLE","UNKNOWN","CALIBRATED","DETECTOR","type","CorrectedImagerPixelSpacing","map","pixelSpacing","console","warn","PhysicalDeltaX","PhysicalDeltaY","USPixelSpacing","Array","isArray","length"],"sources":["/Users/yzy/Documents/Playground/vue-cornerstone-demo/src/cornerstone/dicomwebClient/getPixelSpacingInformation.js"],"sourcesContent":["// See https://github.com/OHIF/Viewers/blob/94a9067fe3d291d30e25a1bda5913511388edea2/platform/core/src/utils/metadataProvider/getPixelSpacingInformation.js\n\nexport default function getPixelSpacingInformation(instance) {\n  // See http://gdcm.sourceforge.net/wiki/index.php/Imager_Pixel_Spacing\n\n  // TODO: Add Ultrasound region spacing\n  // TODO: Add manual calibration\n\n  // TODO: Use ENUMS from dcmjs\n  const projectionRadiographSOPClassUIDs = [\n    \"1.2.840.10008.5.1.4.1.1.1\", //\tCR Image Storage\n    \"1.2.840.10008.5.1.4.1.1.1.1\", //\tDigital X-Ray Image Storage – for Presentation\n    \"1.2.840.10008.5.1.4.1.1.1.1.1\", //\tDigital X-Ray Image Storage – for Processing\n    \"1.2.840.10008.5.1.4.1.1.1.2\", //\tDigital Mammography X-Ray Image Storage – for Presentation\n    \"1.2.840.10008.5.1.4.1.1.1.2.1\", //\tDigital Mammography X-Ray Image Storage – for Processing\n    \"1.2.840.10008.5.1.4.1.1.1.3\", //\tDigital Intra – oral X-Ray Image Storage – for Presentation\n    \"1.2.840.10008.5.1.4.1.1.1.3.1\", //\tDigital Intra – oral X-Ray Image Storage – for Processing\n    \"1.2.840.10008.5.1.4.1.1.12.1\", //\tX-Ray Angiographic Image Storage\n    \"1.2.840.10008.5.1.4.1.1.12.1.1\", //\tEnhanced XA Image Storage\n    \"1.2.840.10008.5.1.4.1.1.12.2\", //\tX-Ray Radiofluoroscopic Image Storage\n    \"1.2.840.10008.5.1.4.1.1.12.2.1\", //\tEnhanced XRF Image Storage\n    \"1.2.840.10008.5.1.4.1.1.12.3\", // X-Ray Angiographic Bi-plane Image Storage\tRetired\n  ];\n\n  const {\n    PixelSpacing,\n    ImagerPixelSpacing,\n    SOPClassUID,\n    PixelSpacingCalibrationType,\n    PixelSpacingCalibrationDescription,\n    EstimatedRadiographicMagnificationFactor,\n    SequenceOfUltrasoundRegions,\n  } = instance;\n\n  const isProjection = projectionRadiographSOPClassUIDs.includes(SOPClassUID);\n\n  const TYPES = {\n    NOT_APPLICABLE: \"NOT_APPLICABLE\",\n    UNKNOWN: \"UNKNOWN\",\n    CALIBRATED: \"CALIBRATED\",\n    DETECTOR: \"DETECTOR\",\n  };\n\n  if (!isProjection) {\n    return PixelSpacing;\n  }\n\n  if (isProjection && !ImagerPixelSpacing) {\n    // If only Pixel Spacing is present, and this is a projection radiograph,\n    // PixelSpacing should be used, but the user should be informed that\n    // what it means is unknown\n    return {\n      PixelSpacing,\n      type: TYPES.UNKNOWN,\n      isProjection,\n    };\n  } else if (\n    PixelSpacing &&\n    ImagerPixelSpacing &&\n    PixelSpacing === ImagerPixelSpacing\n  ) {\n    // If Imager Pixel Spacing and Pixel Spacing are present and they have the same values,\n    // then the user should be informed that the measurements are at the detector plane\n    return {\n      PixelSpacing,\n      type: TYPES.DETECTOR,\n      isProjection,\n    };\n  } else if (\n    PixelSpacing &&\n    ImagerPixelSpacing &&\n    PixelSpacing !== ImagerPixelSpacing\n  ) {\n    // If Imager Pixel Spacing and Pixel Spacing are present and they have different values,\n    // then the user should be informed that these are \"calibrated\"\n    // (in some unknown manner if Pixel Spacing Calibration Type and/or\n    // Pixel Spacing Calibration Description are absent)\n    return {\n      PixelSpacing,\n      type: TYPES.CALIBRATED,\n      isProjection,\n      PixelSpacingCalibrationType,\n      PixelSpacingCalibrationDescription,\n    };\n  } else if (!PixelSpacing && ImagerPixelSpacing) {\n    let CorrectedImagerPixelSpacing = ImagerPixelSpacing;\n    if (EstimatedRadiographicMagnificationFactor) {\n      // Note that in IHE Mammo profile compliant displays, the value of Imager Pixel Spacing is required to be corrected by\n      // Estimated Radiographic Magnification Factor and the user informed of that.\n      // TODO: should this correction be done before all of this logic?\n      CorrectedImagerPixelSpacing = ImagerPixelSpacing.map(\n        (pixelSpacing) =>\n          pixelSpacing / EstimatedRadiographicMagnificationFactor\n      );\n    } else {\n      console.warn(\n        \"EstimatedRadiographicMagnificationFactor was not present. Unable to correct ImagerPixelSpacing.\"\n      );\n    }\n\n    return {\n      PixelSpacing: CorrectedImagerPixelSpacing,\n      isProjection,\n    };\n  } else if (\n    SequenceOfUltrasoundRegions &&\n    typeof SequenceOfUltrasoundRegions === \"object\"\n  ) {\n    const { PhysicalDeltaX, PhysicalDeltaY } = SequenceOfUltrasoundRegions;\n    const USPixelSpacing = [PhysicalDeltaX * 10, PhysicalDeltaY * 10];\n\n    return {\n      PixelSpacing: USPixelSpacing,\n    };\n  } else if (\n    SequenceOfUltrasoundRegions &&\n    Array.isArray(SequenceOfUltrasoundRegions) &&\n    SequenceOfUltrasoundRegions.length > 1\n  ) {\n    console.warn(\n      \"Sequence of Ultrasound Regions > one entry. This is not yet implemented, all measurements will be shown in pixels.\"\n    );\n  } else if (isProjection === false && !ImagerPixelSpacing) {\n    // If only Pixel Spacing is present, and this is not a projection radiograph,\n    // we can stop here\n    return {\n      PixelSpacing,\n      type: TYPES.NOT_APPLICABLE,\n      isProjection,\n    };\n  }\n\n  console.warn(\n    \"Unknown combination of PixelSpacing and ImagerPixelSpacing identified. Unable to determine spacing.\"\n  );\n}\n"],"mappings":"AAAA;;AAEA,eAAe,SAASA,0BAA0BA,CAACC,QAAQ,EAAE;EAC3D;;EAEA;EACA;;EAEA;EACA,MAAMC,gCAAgC,GAAG,CACvC,2BAA2B;EAAE;EAC7B,6BAA6B;EAAE;EAC/B,+BAA+B;EAAE;EACjC,6BAA6B;EAAE;EAC/B,+BAA+B;EAAE;EACjC,6BAA6B;EAAE;EAC/B,+BAA+B;EAAE;EACjC,8BAA8B;EAAE;EAChC,gCAAgC;EAAE;EAClC,8BAA8B;EAAE;EAChC,gCAAgC;EAAE;EAClC,8BAA8B,CAAE;EAAA,CACjC;EAED,MAAM;IACJC,YAAY;IACZC,kBAAkB;IAClBC,WAAW;IACXC,2BAA2B;IAC3BC,kCAAkC;IAClCC,wCAAwC;IACxCC;EACF,CAAC,GAAGR,QAAQ;EAEZ,MAAMS,YAAY,GAAGR,gCAAgC,CAACS,QAAQ,CAACN,WAAW,CAAC;EAE3E,MAAMO,KAAK,GAAG;IACZC,cAAc,EAAE,gBAAgB;IAChCC,OAAO,EAAE,SAAS;IAClBC,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE;EACZ,CAAC;EAED,IAAI,CAACN,YAAY,EAAE;IACjB,OAAOP,YAAY;EACrB;EAEA,IAAIO,YAAY,IAAI,CAACN,kBAAkB,EAAE;IACvC;IACA;IACA;IACA,OAAO;MACLD,YAAY;MACZc,IAAI,EAAEL,KAAK,CAACE,OAAO;MACnBJ;IACF,CAAC;EACH,CAAC,MAAM,IACLP,YAAY,IACZC,kBAAkB,IAClBD,YAAY,KAAKC,kBAAkB,EACnC;IACA;IACA;IACA,OAAO;MACLD,YAAY;MACZc,IAAI,EAAEL,KAAK,CAACI,QAAQ;MACpBN;IACF,CAAC;EACH,CAAC,MAAM,IACLP,YAAY,IACZC,kBAAkB,IAClBD,YAAY,KAAKC,kBAAkB,EACnC;IACA;IACA;IACA;IACA;IACA,OAAO;MACLD,YAAY;MACZc,IAAI,EAAEL,KAAK,CAACG,UAAU;MACtBL,YAAY;MACZJ,2BAA2B;MAC3BC;IACF,CAAC;EACH,CAAC,MAAM,IAAI,CAACJ,YAAY,IAAIC,kBAAkB,EAAE;IAC9C,IAAIc,2BAA2B,GAAGd,kBAAkB;IACpD,IAAII,wCAAwC,EAAE;MAC5C;MACA;MACA;MACAU,2BAA2B,GAAGd,kBAAkB,CAACe,GAAG,CACjDC,YAAY,IACXA,YAAY,GAAGZ,wCACnB,CAAC;IACH,CAAC,MAAM;MACLa,OAAO,CAACC,IAAI,CACV,iGACF,CAAC;IACH;IAEA,OAAO;MACLnB,YAAY,EAAEe,2BAA2B;MACzCR;IACF,CAAC;EACH,CAAC,MAAM,IACLD,2BAA2B,IAC3B,OAAOA,2BAA2B,KAAK,QAAQ,EAC/C;IACA,MAAM;MAAEc,cAAc;MAAEC;IAAe,CAAC,GAAGf,2BAA2B;IACtE,MAAMgB,cAAc,GAAG,CAACF,cAAc,GAAG,EAAE,EAAEC,cAAc,GAAG,EAAE,CAAC;IAEjE,OAAO;MACLrB,YAAY,EAAEsB;IAChB,CAAC;EACH,CAAC,MAAM,IACLhB,2BAA2B,IAC3BiB,KAAK,CAACC,OAAO,CAAClB,2BAA2B,CAAC,IAC1CA,2BAA2B,CAACmB,MAAM,GAAG,CAAC,EACtC;IACAP,OAAO,CAACC,IAAI,CACV,oHACF,CAAC;EACH,CAAC,MAAM,IAAIZ,YAAY,KAAK,KAAK,IAAI,CAACN,kBAAkB,EAAE;IACxD;IACA;IACA,OAAO;MACLD,YAAY;MACZc,IAAI,EAAEL,KAAK,CAACC,cAAc;MAC1BH;IACF,CAAC;EACH;EAEAW,OAAO,CAACC,IAAI,CACV,qGACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}