{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations } from '../stateManagement/annotation/annotationState';\nimport { drawPolyline } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n  constructor(toolProps = {}, defaultToolProps = {\n    configuration: {\n      opacity: 0.5\n    }\n  }) {\n    super(toolProps, defaultToolProps);\n    this._init = () => {\n      const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n      if (!viewportsInfo?.length) {\n        console.warn(this.getToolName() + 'Tool: No viewports found');\n        return;\n      }\n      const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n      if (!firstViewport) {\n        return;\n      }\n      const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n      const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n      if (!annotations?.length) {\n        const actorsWorldPointsMap = new Map();\n        calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n        const newAnnotation = {\n          highlighted: true,\n          invalidated: true,\n          metadata: {\n            toolName: this.getToolName(),\n            FrameOfReferenceUID: frameOfReferenceUID,\n            referencedImageId: null\n          },\n          data: {\n            actorsWorldPointsMap\n          }\n        };\n        addAnnotation(newAnnotation, frameOfReferenceUID);\n      }\n      triggerAnnotationRenderForViewportIds(getRenderingEngine(viewportsInfo[0].renderingEngineId), viewportsInfo.map(({\n        viewportId\n      }) => viewportId));\n    };\n    this.onSetToolEnabled = () => {\n      this._init();\n    };\n    this.onCameraModified = evt => {\n      this._init();\n    };\n    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n      const {\n        viewport,\n        FrameOfReferenceUID\n      } = enabledElement;\n      let renderStatus = false;\n      const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n      if (!annotations?.length) {\n        return renderStatus;\n      }\n      const annotation = annotations[0];\n      const {\n        annotationUID\n      } = annotation;\n      const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n      calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n      const actorEntries = viewport.getActors();\n      const cacheId = getCacheId(viewport);\n      actorEntries.forEach(actorEntry => {\n        if (!actorEntry?.clippingFilter) {\n          return;\n        }\n        const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointMap) {\n          return;\n        }\n        if (!actorWorldPointMap.get(cacheId)) {\n          return;\n        }\n        let polyLineIdx = 1;\n        const {\n          worldPointsSet,\n          color\n        } = actorWorldPointMap.get(cacheId);\n        for (let i = 0; i < worldPointsSet.length; i++) {\n          const worldPoints = worldPointsSet[i];\n          const canvasPoints = worldPoints.map(point => viewport.worldToCanvas(point));\n          const options = {\n            color: color,\n            fillColor: color,\n            fillOpacity: this.configuration.opacity,\n            connectLastToFirst: true\n          };\n          const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n          drawPolyline(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n          polyLineIdx++;\n        }\n      });\n      renderStatus = true;\n      return renderStatus;\n    };\n  }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n  viewportsInfo.forEach(({\n    viewportId,\n    renderingEngineId\n  }) => {\n    const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n    calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n  });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n  const actorEntries = viewport.getActors();\n  const cacheId = getCacheId(viewport);\n  actorEntries.forEach(actorEntry => {\n    if (!actorEntry?.clippingFilter) {\n      return;\n    }\n    let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n    if (!actorWorldPointsMap) {\n      actorWorldPointsMap = new Map();\n      actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n    }\n    if (!actorWorldPointsMap.get(cacheId)) {\n      const polyData = actorEntry.clippingFilter.getOutputData();\n      const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n      if (!worldPointsSet) {\n        return;\n      }\n      const colorArray = actorEntry.actor.getProperty().getColor();\n      const color = colorToString(colorArray);\n      actorWorldPointsMap.set(cacheId, {\n        worldPointsSet,\n        color\n      });\n    }\n  });\n}\nfunction getCacheId(viewport) {\n  const {\n    viewPlaneNormal\n  } = viewport.getCamera();\n  const imageIndex = viewport.getCurrentImageIdIndex();\n  return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n  function colorComponentToString(component) {\n    let componentString = Math.floor(component * 255).toString(16);\n    if (componentString.length === 1) {\n      componentString = '0' + componentString;\n    }\n    return componentString;\n  }\n  return '#' + colorComponentToString(colorArray[0]) + colorComponentToString(colorArray[1]) + colorComponentToString(colorArray[2]);\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n  return worldPointsSet.map(worldPoints => {\n    const canvasPoints = worldPoints.map(point => {\n      const canvasPoint = viewport.worldToCanvas(point);\n      return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n    });\n    let lastPoint;\n    const newWorldPoints = [];\n    let newCanvasPoints = [];\n    for (let i = 0; i < worldPoints.length; i++) {\n      if (lastPoint) {\n        if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n          newWorldPoints.push(worldPoints[i]);\n          newCanvasPoints.push(canvasPoints[i]);\n        }\n      }\n      lastPoint = canvasPoints[i];\n    }\n    const firstPoint = newCanvasPoints[0];\n    for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n      if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n        newCanvasPoints = newCanvasPoints.slice(0, j);\n        return newWorldPoints.slice(0, j);\n      }\n    }\n    return newWorldPoints;\n  });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;","map":{"version":3,"names":["getRenderingEngine","addAnnotation","getAnnotations","drawPolyline","getToolGroup","triggerAnnotationRenderForViewportIds","AnnotationDisplayTool","distanceToPoint","pointToString","polyDataUtils","SegmentationIntersectionTool","constructor","toolProps","defaultToolProps","configuration","opacity","_init","viewportsInfo","toolGroupId","length","console","warn","getToolName","firstViewport","renderingEngineId","getViewport","viewportId","frameOfReferenceUID","getFrameOfReferenceUID","annotations","actorsWorldPointsMap","Map","calculateSurfaceSegmentationIntersections","newAnnotation","highlighted","invalidated","metadata","toolName","FrameOfReferenceUID","referencedImageId","data","map","onSetToolEnabled","onCameraModified","evt","renderAnnotation","enabledElement","svgDrawingHelper","viewport","renderStatus","annotation","annotationUID","calculateSurfaceSegmentationIntersectionsForViewport","actorEntries","getActors","cacheId","getCacheId","forEach","actorEntry","clippingFilter","actorWorldPointMap","get","uid","polyLineIdx","worldPointsSet","color","i","worldPoints","canvasPoints","point","worldToCanvas","options","fillColor","fillOpacity","connectLastToFirst","polyLineUID","actorWorldPointsMap","set","polyData","getOutputData","getPolyDataPoints","colorArray","actor","getProperty","getColor","colorToString","viewPlaneNormal","getCamera","imageIndex","getCurrentImageIdIndex","id","colorComponentToString","component","componentString","Math","floor","toString","removeExtraPoints","canvasPoint","lastPoint","newWorldPoints","newCanvasPoints","push","firstPoint","j","min","slice"],"sources":["../../../src/tools/SegmentationIntersectionTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}