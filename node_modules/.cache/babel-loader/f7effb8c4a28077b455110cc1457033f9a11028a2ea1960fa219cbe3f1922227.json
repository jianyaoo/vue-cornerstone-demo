{"ast":null,"code":"function floodFill(getter, seed, options = {}) {\n  const onFlood = options.onFlood;\n  const onBoundary = options.onBoundary;\n  const equals = options.equals || defaultEquals;\n  const diagonals = options.diagonals || false;\n  const startNode = get(seed);\n  const permutations = prunedPermutations();\n  const stack = [];\n  const flooded = [];\n  const visits = {};\n  const bounds = {};\n  stack.push({\n    currentArgs: seed\n  });\n  while (stack.length > 0) {\n    flood(stack.pop());\n  }\n  return {\n    flooded,\n    boundaries: boundaries()\n  };\n  function flood(job) {\n    const getArgs = job.currentArgs;\n    const prevArgs = job.previousArgs;\n    if (visited(getArgs)) {\n      return;\n    }\n    markAsVisited(getArgs);\n    if (member(getArgs)) {\n      markAsFlooded(getArgs);\n      pushAdjacent(getArgs);\n    } else {\n      markAsBoundary(prevArgs);\n    }\n  }\n  function visited(key) {\n    return visits[key] === true;\n  }\n  function markAsVisited(key) {\n    visits[key] = true;\n  }\n  function member(getArgs) {\n    const node = safely(get, [getArgs]);\n    return safely(equals, [node, startNode]);\n  }\n  function markAsFlooded(getArgs) {\n    flooded.push(getArgs);\n    if (onFlood) {\n      onFlood(...getArgs);\n    }\n  }\n  function markAsBoundary(prevArgs) {\n    bounds[prevArgs] = prevArgs;\n    if (onBoundary) {\n      onBoundary(...prevArgs);\n    }\n  }\n  function pushAdjacent(getArgs) {\n    for (let i = 0; i < permutations.length; i += 1) {\n      const perm = permutations[i];\n      const nextArgs = getArgs.slice(0);\n      for (let j = 0; j < getArgs.length; j += 1) {\n        nextArgs[j] += perm[j];\n      }\n      stack.push({\n        currentArgs: nextArgs,\n        previousArgs: getArgs\n      });\n    }\n  }\n  function get(getArgs) {\n    return getter(...getArgs);\n  }\n  function safely(f, args) {\n    try {\n      return f(...args);\n    } catch (error) {\n      return;\n    }\n  }\n  function prunedPermutations() {\n    const permutations = permute(seed.length);\n    return permutations.filter(function (perm) {\n      const count = countNonZeroes(perm);\n      return count !== 0 && (count === 1 || diagonals);\n    });\n  }\n  function permute(length) {\n    const perms = [];\n    const permutation = function (string) {\n      return string.split('').map(function (c) {\n        return parseInt(c, 10) - 1;\n      });\n    };\n    for (let i = 0; i < Math.pow(3, length); i += 1) {\n      const string = lpad(i.toString(3), '0', length);\n      perms.push(permutation(string));\n    }\n    return perms;\n  }\n  function boundaries() {\n    const array = [];\n    for (const key in bounds) {\n      if (bounds[key] !== undefined) {\n        array.unshift(bounds[key]);\n      }\n    }\n    return array;\n  }\n}\nfunction defaultEquals(a, b) {\n  return a === b;\n}\nfunction countNonZeroes(array) {\n  let count = 0;\n  for (let i = 0; i < array.length; i += 1) {\n    if (array[i] !== 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\nfunction lpad(string, character, length) {\n  const array = new Array(length + 1);\n  const pad = array.join(character);\n  return (pad + string).slice(-length);\n}\nexport default floodFill;","map":{"version":3,"names":["floodFill","getter","seed","options","onFlood","onBoundary","equals","defaultEquals","diagonals","startNode","get","permutations","prunedPermutations","stack","flooded","visits","bounds","push","currentArgs","length","flood","pop","boundaries","job","getArgs","prevArgs","previousArgs","visited","markAsVisited","member","markAsFlooded","pushAdjacent","markAsBoundary","key","node","safely","i","perm","nextArgs","slice","j","f","args","error","permute","filter","count","countNonZeroes","perms","permutation","string","split","map","c","parseInt","Math","pow","lpad","toString","array","undefined","unshift","a","b","character","Array","pad","join"],"sources":["../../../../src/utilities/segmentation/floodFill.ts"],"sourcesContent":[null],"mappings":"AA0BA,SAASA,SAASA,CAChBC,MAAuB,EACvBC,IAAiC,EACjCC,OAAA,GAA4B,EAAE;EAE9B,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO;EAC/B,MAAMC,UAAU,GAAGF,OAAO,CAACE,UAAU;EACrC,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAM,IAAIC,aAAa;EAC9C,MAAMC,SAAS,GAAGL,OAAO,CAACK,SAAS,IAAI,KAAK;EAC5C,MAAMC,SAAS,GAAGC,GAAG,CAACR,IAAI,CAAC;EAC3B,MAAMS,YAAY,GAAGC,kBAAkB,EAAE;EACzC,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,MAAM,GAAG,EAAE;EAEjBH,KAAK,CAACI,IAAI,CAAC;IAAEC,WAAW,EAAEhB;EAAI,CAAE,CAAC;EAEjC,OAAOW,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;IACvBC,KAAK,CAACP,KAAK,CAACQ,GAAG,EAAE,CAAC;;EAGpB,OAAO;IACLP,OAAO;IACPQ,UAAU,EAAEA,UAAU;GACvB;EAED,SAASF,KAAKA,CAACG,GAAG;IAChB,MAAMC,OAAO,GAAGD,GAAG,CAACL,WAAW;IAC/B,MAAMO,QAAQ,GAAGF,GAAG,CAACG,YAAY;IAEjC,IAAIC,OAAO,CAACH,OAAO,CAAC,EAAE;MACpB;;IAEFI,aAAa,CAACJ,OAAO,CAAC;IAEtB,IAAIK,MAAM,CAACL,OAAO,CAAC,EAAE;MACnBM,aAAa,CAACN,OAAO,CAAC;MACtBO,YAAY,CAACP,OAAO,CAAC;KACtB,MAAM;MACLQ,cAAc,CAACP,QAAQ,CAAC;;EAE5B;EAEA,SAASE,OAAOA,CAACM,GAAG;IAClB,OAAOlB,MAAM,CAACkB,GAAG,CAAC,KAAK,IAAI;EAC7B;EAEA,SAASL,aAAaA,CAACK,GAAG;IACxBlB,MAAM,CAACkB,GAAG,CAAC,GAAG,IAAI;EACpB;EAEA,SAASJ,MAAMA,CAACL,OAAO;IACrB,MAAMU,IAAI,GAAGC,MAAM,CAACzB,GAAG,EAAE,CAACc,OAAO,CAAC,CAAC;IAEnC,OAAOW,MAAM,CAAC7B,MAAM,EAAE,CAAC4B,IAAI,EAAEzB,SAAS,CAAC,CAAC;EAC1C;EAEA,SAASqB,aAAaA,CAACN,OAAO;IAC5BV,OAAO,CAACG,IAAI,CAACO,OAAO,CAAC;IACrB,IAAIpB,OAAO,EAAE;MAEXA,OAAO,CAAC,GAAGoB,OAAO,CAAC;;EAEvB;EAEA,SAASQ,cAAcA,CAACP,QAAQ;IAC9BT,MAAM,CAACS,QAAQ,CAAC,GAAGA,QAAQ;IAC3B,IAAIpB,UAAU,EAAE;MAEdA,UAAU,CAAC,GAAGoB,QAAQ,CAAC;;EAE3B;EAEA,SAASM,YAAYA,CAACP,OAAO;IAC3B,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,YAAY,CAACQ,MAAM,EAAEiB,CAAC,IAAI,CAAC,EAAE;MAC/C,MAAMC,IAAI,GAAG1B,YAAY,CAACyB,CAAC,CAAC;MAC5B,MAAME,QAAQ,GAAGd,OAAO,CAACe,KAAK,CAAC,CAAC,CAAC;MAEjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,OAAO,CAACL,MAAM,EAAEqB,CAAC,IAAI,CAAC,EAAE;QAC1CF,QAAQ,CAACE,CAAC,CAAC,IAAIH,IAAI,CAACG,CAAC,CAAC;;MAGxB3B,KAAK,CAACI,IAAI,CAAC;QACTC,WAAW,EAAEoB,QAAQ;QACrBZ,YAAY,EAAEF;OACf,CAAC;;EAEN;EAEA,SAASd,GAAGA,CAACc,OAAO;IAElB,OAAOvB,MAAM,CAAC,GAAGuB,OAAO,CAAC;EAC3B;EAEA,SAASW,MAAMA,CAACM,CAAC,EAAEC,IAAI;IACrB,IAAI;MACF,OAAOD,CAAC,CAAC,GAAGC,IAAI,CAAC;KAClB,CAAC,OAAOC,KAAK,EAAE;MACd;;EAEJ;EAEA,SAAS/B,kBAAkBA,CAAA;IACzB,MAAMD,YAAY,GAAGiC,OAAO,CAAC1C,IAAI,CAACiB,MAAM,CAAC;IAEzC,OAAOR,YAAY,CAACkC,MAAM,CAAC,UAAUR,IAAI;MACvC,MAAMS,KAAK,GAAGC,cAAc,CAACV,IAAI,CAAC;MAElC,OAAOS,KAAK,KAAK,CAAC,KAAKA,KAAK,KAAK,CAAC,IAAItC,SAAS,CAAC;IAClD,CAAC,CAAC;EACJ;EAEA,SAASoC,OAAOA,CAACzB,MAAM;IACrB,MAAM6B,KAAK,GAAG,EAAE;IAEhB,MAAMC,WAAW,GAAG,SAAAA,CAAUC,MAAM;MAClC,OAAOA,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAAUC,CAAC;QACrC,OAAOC,QAAQ,CAACD,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;MAC5B,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErC,MAAM,CAAC,EAAEiB,CAAC,IAAI,CAAC,EAAE;MAC/C,MAAMc,MAAM,GAAGO,IAAI,CAACrB,CAAC,CAACsB,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAEvC,MAAM,CAAC;MAE/C6B,KAAK,CAAC/B,IAAI,CAACgC,WAAW,CAACC,MAAM,CAAC,CAAC;;IAGjC,OAAOF,KAAK;EACd;EAEA,SAAS1B,UAAUA,CAAA;IACjB,MAAMqC,KAAK,GAAG,EAAE;IAEhB,KAAK,MAAM1B,GAAG,IAAIjB,MAAM,EAAE;MACxB,IAAIA,MAAM,CAACiB,GAAG,CAAC,KAAK2B,SAAS,EAAE;QAC7BD,KAAK,CAACE,OAAO,CAAC7C,MAAM,CAACiB,GAAG,CAAC,CAAC;;;IAI9B,OAAO0B,KAAK;EACd;AACF;AAEA,SAASpD,aAAaA,CAACuD,CAAC,EAAEC,CAAC;EACzB,OAAOD,CAAC,KAAKC,CAAC;AAChB;AAEA,SAAShB,cAAcA,CAACY,KAAK;EAC3B,IAAIb,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuB,KAAK,CAACxC,MAAM,EAAEiB,CAAC,IAAI,CAAC,EAAE;IACxC,IAAIuB,KAAK,CAACvB,CAAC,CAAC,KAAK,CAAC,EAAE;MAClBU,KAAK,IAAI,CAAC;;;EAId,OAAOA,KAAK;AACd;AAEA,SAASW,IAAIA,CAACP,MAAM,EAAEc,SAAS,EAAE7C,MAAM;EACrC,MAAMwC,KAAK,GAAG,IAAIM,KAAK,CAAC9C,MAAM,GAAG,CAAC,CAAC;EACnC,MAAM+C,GAAG,GAAGP,KAAK,CAACQ,IAAI,CAACH,SAAS,CAAC;EAEjC,OAAO,CAACE,GAAG,GAAGhB,MAAM,EAAEX,KAAK,CAAC,CAACpB,MAAM,CAAC;AACtC;AAEA,eAAenB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}