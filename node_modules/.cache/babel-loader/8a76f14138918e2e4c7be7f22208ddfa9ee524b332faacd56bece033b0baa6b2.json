{"ast":null,"code":"import getModalityLut from './getModalityLut';\nimport getVOILUT from './getVOILut';\nexport default function (image, windowWidth, windowCenter, invert, modalityLUT, voiLUT) {\n  const maxPixelValue = image.maxPixelValue;\n  const minPixelValue = image.minPixelValue;\n  const offset = Math.min(minPixelValue, 0);\n  if (image.cachedLut === undefined) {\n    const length = maxPixelValue - offset + 1;\n    image.cachedLut = {};\n    image.cachedLut.lutArray = new Uint8ClampedArray(length);\n  }\n  const lut = image.cachedLut.lutArray;\n  const mlutfn = getModalityLut(image.slope, image.intercept, modalityLUT);\n  const vlutfn = getVOILUT(windowWidth, windowCenter, voiLUT);\n  if (image.isPreScaled) {\n    if (invert === true) {\n      for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n        lut[storedValue + -offset] = 255 - vlutfn(storedValue);\n      }\n    } else {\n      for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n        lut[storedValue + -offset] = vlutfn(storedValue);\n      }\n    }\n  } else {\n    if (invert === true) {\n      for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n        lut[storedValue + -offset] = 255 - vlutfn(mlutfn(storedValue));\n      }\n    } else {\n      for (let storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {\n        lut[storedValue + -offset] = vlutfn(mlutfn(storedValue));\n      }\n    }\n  }\n  return lut;\n}","map":{"version":3,"names":["getModalityLut","getVOILUT","image","windowWidth","windowCenter","invert","modalityLUT","voiLUT","maxPixelValue","minPixelValue","offset","Math","min","cachedLut","undefined","length","lutArray","Uint8ClampedArray","lut","mlutfn","slope","intercept","vlutfn","isPreScaled","storedValue"],"sources":["../../../../../../src/RenderingEngine/helpers/cpuFallback/rendering/generateLut.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,SAAS,MAAM,aAAa;AAgBnC,eAAc,UACZC,KAAa,EACbC,WAAmB,EACnBC,YAAoB,EACpBC,MAAe,EACfC,WAA2B,EAC3BC,MAAsB;EAEtB,MAAMC,aAAa,GAAGN,KAAK,CAACM,aAAa;EACzC,MAAMC,aAAa,GAAGP,KAAK,CAACO,aAAa;EACzC,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACH,aAAa,EAAE,CAAC,CAAC;EAEzC,IAAIP,KAAK,CAACW,SAAS,KAAKC,SAAS,EAAE;IACjC,MAAMC,MAAM,GAAGP,aAAa,GAAGE,MAAM,GAAG,CAAC;IAEzCR,KAAK,CAACW,SAAS,GAAG,EAAE;IACpBX,KAAK,CAACW,SAAS,CAACG,QAAQ,GAAG,IAAIC,iBAAiB,CAACF,MAAM,CAAC;;EAG1D,MAAMG,GAAG,GAAGhB,KAAK,CAACW,SAAS,CAACG,QAAQ;EAEpC,MAAMG,MAAM,GAAGnB,cAAc,CAACE,KAAK,CAACkB,KAAK,EAAElB,KAAK,CAACmB,SAAS,EAAEf,WAAW,CAAC;EACxE,MAAMgB,MAAM,GAAGrB,SAAS,CAACE,WAAW,EAAEC,YAAY,EAAEG,MAAM,CAAC;EAE3D,IAAIL,KAAK,CAACqB,WAAW,EAAE;IAGrB,IAAIlB,MAAM,KAAK,IAAI,EAAE;MACnB,KACE,IAAImB,WAAW,GAAGf,aAAa,EAC/Be,WAAW,IAAIhB,aAAa,EAC5BgB,WAAW,EAAE,EACb;QACAN,GAAG,CAACM,WAAW,GAAG,CAACd,MAAM,CAAC,GAAG,GAAG,GAAGY,MAAM,CAACE,WAAW,CAAC;;KAEzD,MAAM;MACL,KACE,IAAIA,WAAW,GAAGf,aAAa,EAC/Be,WAAW,IAAIhB,aAAa,EAC5BgB,WAAW,EAAE,EACb;QACAN,GAAG,CAACM,WAAW,GAAG,CAACd,MAAM,CAAC,GAAGY,MAAM,CAACE,WAAW,CAAC;;;GAGrD,MAAM;IACL,IAAInB,MAAM,KAAK,IAAI,EAAE;MACnB,KACE,IAAImB,WAAW,GAAGf,aAAa,EAC/Be,WAAW,IAAIhB,aAAa,EAC5BgB,WAAW,EAAE,EACb;QACAN,GAAG,CAACM,WAAW,GAAG,CAACd,MAAM,CAAC,GAAG,GAAG,GAAGY,MAAM,CAACH,MAAM,CAACK,WAAW,CAAC,CAAC;;KAEjE,MAAM;MACL,KACE,IAAIA,WAAW,GAAGf,aAAa,EAC/Be,WAAW,IAAIhB,aAAa,EAC5BgB,WAAW,EAAE,EACb;QACAN,GAAG,CAACM,WAAW,GAAG,CAACd,MAAM,CAAC,GAAGY,MAAM,CAACH,MAAM,CAACK,WAAW,CAAC,CAAC;;;;EAK9D,OAAON,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}