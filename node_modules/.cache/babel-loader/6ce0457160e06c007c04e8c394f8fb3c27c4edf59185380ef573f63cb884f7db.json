{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport { F as createUninitializedBounds, C as clampValue, H as floor } from '../../Common/Core/Math/index.js';\nimport Constants from './VolumeMapper/Constants.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkPiecewiseFunction from '../../Common/DataModel/PiecewiseFunction.js';\nconst {\n  BlendMode,\n  FilterMode\n} = Constants;\nfunction createRadonTransferFunction(firstAbsorbentMaterialHounsfieldValue, firstAbsorbentMaterialAbsorption, maxAbsorbentMaterialHounsfieldValue, maxAbsorbentMaterialAbsorption, outputTransferFunction) {\n  let ofun = null;\n  if (outputTransferFunction) {\n    ofun = outputTransferFunction;\n    ofun.removeAllPoints();\n  } else {\n    ofun = vtkPiecewiseFunction.newInstance();\n  }\n  ofun.addPointLong(-1024, 0, 1, 1); // air (i.e. material with no absorption)\n  ofun.addPoint(firstAbsorbentMaterialHounsfieldValue, firstAbsorbentMaterialAbsorption);\n  ofun.addPoint(maxAbsorbentMaterialHounsfieldValue, maxAbsorbentMaterialAbsorption);\n  return ofun;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  createRadonTransferFunction\n};\n\n// ----------------------------------------------------------------------------\n// vtkVolumeMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolumeMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolumeMapper');\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getBounds = () => {\n    const input = publicAPI.getInputData();\n    if (!input) {\n      model.bounds = createUninitializedBounds();\n    } else {\n      if (!model.static) {\n        publicAPI.update();\n      }\n      model.bounds = input.getBounds();\n    }\n    return model.bounds;\n  };\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n  publicAPI.setBlendModeToComposite = () => {\n    publicAPI.setBlendMode(BlendMode.COMPOSITE_BLEND);\n  };\n  publicAPI.setBlendModeToMaximumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MAXIMUM_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToMinimumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MINIMUM_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToAverageIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.AVERAGE_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToAdditiveIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.ADDITIVE_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToRadonTransform = () => {\n    publicAPI.setBlendMode(BlendMode.RADON_TRANSFORM_BLEND);\n  };\n  publicAPI.getBlendModeAsString = () => macro.enumToString(BlendMode, model.blendMode);\n  publicAPI.setAverageIPScalarRange = (min, max) => {\n    console.warn('setAverageIPScalarRange is deprecated use setIpScalarRange');\n    publicAPI.setIpScalarRange(min, max);\n  };\n  publicAPI.getFilterModeAsString = () => macro.enumToString(FilterMode, model.filterMode);\n  publicAPI.setFilterModeToOff = () => {\n    publicAPI.setFilterMode(FilterMode.OFF);\n  };\n  publicAPI.setFilterModeToNormalized = () => {\n    publicAPI.setFilterMode(FilterMode.NORMALIZED);\n  };\n  publicAPI.setFilterModeToRaw = () => {\n    publicAPI.setFilterMode(FilterMode.RAW);\n  };\n  publicAPI.setGlobalIlluminationReach = gl => superClass.setGlobalIlluminationReach(clampValue(gl, 0.0, 1.0));\n  publicAPI.setVolumetricScatteringBlending = vsb => superClass.setVolumetricScatteringBlending(clampValue(vsb, 0.0, 1.0));\n  publicAPI.setVolumeShadowSamplingDistFactor = vsdf => superClass.setVolumeShadowSamplingDistFactor(vsdf >= 1.0 ? vsdf : 1.0);\n  publicAPI.setAnisotropy = at => superClass.setAnisotropy(clampValue(at, -0.99, 0.99));\n  publicAPI.setLAOKernelSize = ks => superClass.setLAOKernelSize(floor(clampValue(ks, 1, 32)));\n  publicAPI.setLAOKernelRadius = kr => superClass.setLAOKernelRadius(kr >= 1 ? kr : 1);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n// TODO: what values to use for averageIPScalarRange to get GLSL to use max / min values like [-Math.inf, Math.inf]?\nconst DEFAULT_VALUES = {\n  bounds: [1, -1, 1, -1, 1, -1],\n  sampleDistance: 1.0,\n  imageSampleDistance: 1.0,\n  maximumSamplesPerRay: 1000,\n  autoAdjustSampleDistances: true,\n  initialInteractionScale: 1.0,\n  interactionSampleDistanceFactor: 1.0,\n  blendMode: BlendMode.COMPOSITE_BLEND,\n  ipScalarRange: [-1000000.0, 1000000.0],\n  filterMode: FilterMode.OFF,\n  // ignored by WebGL so no behavior change\n  preferSizeOverAccuracy: false,\n  // Whether to use halfFloat representation of float, when it is inaccurate\n  computeNormalFromOpacity: false,\n  // volume shadow parameters\n  volumetricScatteringBlending: 0.0,\n  globalIlluminationReach: 0.0,\n  volumeShadowSamplingDistFactor: 5.0,\n  anisotropy: 0.0,\n  // local ambient occlusion\n  localAmbientOcclusion: false,\n  LAOKernelSize: 15,\n  LAOKernelRadius: 7\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['sampleDistance', 'imageSampleDistance', 'maximumSamplesPerRay', 'autoAdjustSampleDistances', 'initialInteractionScale', 'interactionSampleDistanceFactor', 'blendMode', 'filterMode', 'preferSizeOverAccuracy', 'computeNormalFromOpacity', 'volumetricScatteringBlending', 'globalIlluminationReach', 'volumeShadowSamplingDistFactor', 'anisotropy', 'localAmbientOcclusion', 'LAOKernelSize', 'LAOKernelRadius']);\n  macro.setGetArray(publicAPI, model, ['ipScalarRange'], 2);\n  macro.event(publicAPI, model, 'lightingActivated');\n\n  // Object methods\n  vtkVolumeMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkVolumeMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkVolumeMapper$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\nexport { STATIC, vtkVolumeMapper$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","F","createUninitializedBounds","C","clampValue","H","floor","Constants","vtkAbstractMapper","vtkPiecewiseFunction","BlendMode","FilterMode","createRadonTransferFunction","firstAbsorbentMaterialHounsfieldValue","firstAbsorbentMaterialAbsorption","maxAbsorbentMaterialHounsfieldValue","maxAbsorbentMaterialAbsorption","outputTransferFunction","ofun","removeAllPoints","newInstance","addPointLong","addPoint","STATIC","vtkVolumeMapper","publicAPI","model","classHierarchy","push","superClass","getBounds","input","getInputData","bounds","static","update","setBlendModeToComposite","setBlendMode","COMPOSITE_BLEND","setBlendModeToMaximumIntensity","MAXIMUM_INTENSITY_BLEND","setBlendModeToMinimumIntensity","MINIMUM_INTENSITY_BLEND","setBlendModeToAverageIntensity","AVERAGE_INTENSITY_BLEND","setBlendModeToAdditiveIntensity","ADDITIVE_INTENSITY_BLEND","setBlendModeToRadonTransform","RADON_TRANSFORM_BLEND","getBlendModeAsString","enumToString","blendMode","setAverageIPScalarRange","min","max","console","warn","setIpScalarRange","getFilterModeAsString","filterMode","setFilterModeToOff","setFilterMode","OFF","setFilterModeToNormalized","NORMALIZED","setFilterModeToRaw","RAW","setGlobalIlluminationReach","gl","setVolumetricScatteringBlending","vsb","setVolumeShadowSamplingDistFactor","vsdf","setAnisotropy","at","setLAOKernelSize","ks","setLAOKernelRadius","kr","DEFAULT_VALUES","sampleDistance","imageSampleDistance","maximumSamplesPerRay","autoAdjustSampleDistances","initialInteractionScale","interactionSampleDistanceFactor","ipScalarRange","preferSizeOverAccuracy","computeNormalFromOpacity","volumetricScatteringBlending","globalIlluminationReach","volumeShadowSamplingDistFactor","anisotropy","localAmbientOcclusion","LAOKernelSize","LAOKernelRadius","extend","initialValues","arguments","length","undefined","Object","assign","setGet","setGetArray","event","vtkVolumeMapper$1","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/Core/VolumeMapper.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport { F as createUninitializedBounds, C as clampValue, H as floor } from '../../Common/Core/Math/index.js';\nimport Constants from './VolumeMapper/Constants.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkPiecewiseFunction from '../../Common/DataModel/PiecewiseFunction.js';\n\nconst {\n  BlendMode,\n  FilterMode\n} = Constants;\nfunction createRadonTransferFunction(firstAbsorbentMaterialHounsfieldValue, firstAbsorbentMaterialAbsorption, maxAbsorbentMaterialHounsfieldValue, maxAbsorbentMaterialAbsorption, outputTransferFunction) {\n  let ofun = null;\n  if (outputTransferFunction) {\n    ofun = outputTransferFunction;\n    ofun.removeAllPoints();\n  } else {\n    ofun = vtkPiecewiseFunction.newInstance();\n  }\n  ofun.addPointLong(-1024, 0, 1, 1); // air (i.e. material with no absorption)\n  ofun.addPoint(firstAbsorbentMaterialHounsfieldValue, firstAbsorbentMaterialAbsorption);\n  ofun.addPoint(maxAbsorbentMaterialHounsfieldValue, maxAbsorbentMaterialAbsorption);\n  return ofun;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  createRadonTransferFunction\n};\n\n// ----------------------------------------------------------------------------\n// vtkVolumeMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolumeMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolumeMapper');\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getBounds = () => {\n    const input = publicAPI.getInputData();\n    if (!input) {\n      model.bounds = createUninitializedBounds();\n    } else {\n      if (!model.static) {\n        publicAPI.update();\n      }\n      model.bounds = input.getBounds();\n    }\n    return model.bounds;\n  };\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n  publicAPI.setBlendModeToComposite = () => {\n    publicAPI.setBlendMode(BlendMode.COMPOSITE_BLEND);\n  };\n  publicAPI.setBlendModeToMaximumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MAXIMUM_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToMinimumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MINIMUM_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToAverageIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.AVERAGE_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToAdditiveIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.ADDITIVE_INTENSITY_BLEND);\n  };\n  publicAPI.setBlendModeToRadonTransform = () => {\n    publicAPI.setBlendMode(BlendMode.RADON_TRANSFORM_BLEND);\n  };\n  publicAPI.getBlendModeAsString = () => macro.enumToString(BlendMode, model.blendMode);\n  publicAPI.setAverageIPScalarRange = (min, max) => {\n    console.warn('setAverageIPScalarRange is deprecated use setIpScalarRange');\n    publicAPI.setIpScalarRange(min, max);\n  };\n  publicAPI.getFilterModeAsString = () => macro.enumToString(FilterMode, model.filterMode);\n  publicAPI.setFilterModeToOff = () => {\n    publicAPI.setFilterMode(FilterMode.OFF);\n  };\n  publicAPI.setFilterModeToNormalized = () => {\n    publicAPI.setFilterMode(FilterMode.NORMALIZED);\n  };\n  publicAPI.setFilterModeToRaw = () => {\n    publicAPI.setFilterMode(FilterMode.RAW);\n  };\n  publicAPI.setGlobalIlluminationReach = gl => superClass.setGlobalIlluminationReach(clampValue(gl, 0.0, 1.0));\n  publicAPI.setVolumetricScatteringBlending = vsb => superClass.setVolumetricScatteringBlending(clampValue(vsb, 0.0, 1.0));\n  publicAPI.setVolumeShadowSamplingDistFactor = vsdf => superClass.setVolumeShadowSamplingDistFactor(vsdf >= 1.0 ? vsdf : 1.0);\n  publicAPI.setAnisotropy = at => superClass.setAnisotropy(clampValue(at, -0.99, 0.99));\n  publicAPI.setLAOKernelSize = ks => superClass.setLAOKernelSize(floor(clampValue(ks, 1, 32)));\n  publicAPI.setLAOKernelRadius = kr => superClass.setLAOKernelRadius(kr >= 1 ? kr : 1);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n// TODO: what values to use for averageIPScalarRange to get GLSL to use max / min values like [-Math.inf, Math.inf]?\nconst DEFAULT_VALUES = {\n  bounds: [1, -1, 1, -1, 1, -1],\n  sampleDistance: 1.0,\n  imageSampleDistance: 1.0,\n  maximumSamplesPerRay: 1000,\n  autoAdjustSampleDistances: true,\n  initialInteractionScale: 1.0,\n  interactionSampleDistanceFactor: 1.0,\n  blendMode: BlendMode.COMPOSITE_BLEND,\n  ipScalarRange: [-1000000.0, 1000000.0],\n  filterMode: FilterMode.OFF,\n  // ignored by WebGL so no behavior change\n  preferSizeOverAccuracy: false,\n  // Whether to use halfFloat representation of float, when it is inaccurate\n  computeNormalFromOpacity: false,\n  // volume shadow parameters\n  volumetricScatteringBlending: 0.0,\n  globalIlluminationReach: 0.0,\n  volumeShadowSamplingDistFactor: 5.0,\n  anisotropy: 0.0,\n  // local ambient occlusion\n  localAmbientOcclusion: false,\n  LAOKernelSize: 15,\n  LAOKernelRadius: 7\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['sampleDistance', 'imageSampleDistance', 'maximumSamplesPerRay', 'autoAdjustSampleDistances', 'initialInteractionScale', 'interactionSampleDistanceFactor', 'blendMode', 'filterMode', 'preferSizeOverAccuracy', 'computeNormalFromOpacity', 'volumetricScatteringBlending', 'globalIlluminationReach', 'volumeShadowSamplingDistFactor', 'anisotropy', 'localAmbientOcclusion', 'LAOKernelSize', 'LAOKernelRadius']);\n  macro.setGetArray(publicAPI, model, ['ipScalarRange'], 2);\n  macro.event(publicAPI, model, 'lightingActivated');\n\n  // Object methods\n  vtkVolumeMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkVolumeMapper');\n\n// ----------------------------------------------------------------------------\n\nvar vtkVolumeMapper$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkVolumeMapper$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}