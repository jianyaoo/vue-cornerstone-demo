{"ast":null,"code":"import { mat4 } from 'gl-matrix';\nimport { n as newInstance$1, e as setGet, o as obj, c as macro } from '../../macros2.js';\nimport vtkHelper from './Helper.js';\nimport vtkMapper2D from '../Core/Mapper2D.js';\nimport vtkPoints from '../../Common/Core/Points.js';\nimport { v as vtkPolyData2DFS } from './glsl/vtkPolyData2DFS.glsl.js';\nimport { v as vtkPolyData2DVS } from './glsl/vtkPolyData2DVS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { M as round } from '../../Common/Core/Math/index.js';\nimport { DisplayLocation } from '../Core/Property2D/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat3, mat4, vec3 } from 'gl-matrix';\nconst {\n  primTypes\n} = vtkHelper;\nconst {\n  ScalarMode\n} = vtkMapper2D;\nconst {\n  vtkErrorMacro\n} = macro;\nconst StartEvent = {\n  type: 'StartEvent'\n};\nconst EndEvent = {\n  type: 'EndEvent'\n};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLPolyDataMapper2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLPolyDataMapper2D');\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.openGLActor2D = publicAPI.getFirstAncestorOfType('vtkOpenGLActor2D');\n      model._openGLRenderer = model.openGLActor2D.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(model._openGLRenderer.getRenderable().getActiveCamera());\n    }\n  };\n  publicAPI.overlayPass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkPolyData2DVS;\n    shaders.Fragment = vtkPolyData2DFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.render = () => {\n    const ctx = model._openGLRenderWindow.getContext();\n    if (model.context !== ctx) {\n      model.context = ctx;\n      for (let i = primTypes.Start; i < primTypes.End; i++) {\n        model.primitives[i].setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n    }\n    const actor = model.openGLActor2D.getRenderable();\n    const ren = model._openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n  publicAPI.renderPiece = (ren, actor) => {\n    publicAPI.invokeEvent(StartEvent);\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent(EndEvent);\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n\n    // if there are no points then we are done\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.renderPieceStart = (ren, actor) => {\n    model.primitiveIDOffset = 0;\n    if (model._openGLRenderer.getSelector()) {\n      switch (model._openGLRenderer.getSelector().getCurrentPass()) {\n        default:\n          model._openGLRenderer.getSelector().renderProp(actor);\n      }\n    }\n    // make sure the BOs are up to date\n    publicAPI.updateBufferObjects(ren, actor);\n\n    // Bind the OpenGL, this is shared between the different primitive/cell types.\n    model.lastBoundBO = null;\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    if (cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.updateBufferObjects = (ren, actor) => {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    const vmtime = model.VBOBuildTime.getMTime();\n    if (vmtime < publicAPI.getMTime() || vmtime < model._openGLRenderWindow.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime() || model.renderable.getTransformCoordinate() && vmtime < ren.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const poly = model.currentInput;\n    if (poly === null) {\n      return;\n    }\n    model.renderable.mapScalars(poly, actor.getProperty().getOpacity());\n    const c = model.renderable.getColorMapColors();\n    model.haveCellScalars = false;\n    const scalarMode = model.renderable.getScalarMode();\n    if (model.renderable.getScalarVisibility()) {\n      // We must figure out how the scalars should be mapped to the polydata.\n      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n        model.haveCellScalars = true;\n      }\n    }\n    const representation = actor.getProperty().getRepresentation();\n    let tcoords = poly.getPointData().getTCoords();\n    if (!model.openGLActor2D.getActiveTextures()) {\n      tcoords = null;\n    }\n    const transformCoordinate = model.renderable.getTransformCoordinate();\n    const view = ren.getRenderWindow().getViews()[0];\n    const vsize = view.getViewportSize(ren);\n    const toString = `${poly.getMTime()}A${representation}B${poly.getMTime()}` + `C${c ? c.getMTime() : 1}` + `D${tcoords ? tcoords.getMTime() : 1}` + `E${transformCoordinate ? ren.getMTime() : 1}` + `F${vsize}`;\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      let points = poly.getPoints();\n      if (transformCoordinate) {\n        const p = vtkPoints.newInstance();\n        const numPts = points.getNumberOfPoints();\n        p.setNumberOfPoints(numPts);\n        const point = [];\n        for (let i = 0; i < numPts; ++i) {\n          points.getPoint(i, point);\n          transformCoordinate.setValue(point);\n          const v = transformCoordinate.getComputedDoubleViewportValue(ren);\n          p.setPoint(i, v[0], v[1], 0.0);\n        }\n        points = p;\n      }\n      const options = {\n        points,\n        tcoords,\n        colors: c,\n        cellOffset: 0,\n        haveCellScalars: model.haveCellSCalars,\n        customAttributes: model.renderable.getCustomShaderAttributes().map(arrayName => poly.getPointData().getArrayByName(arrayName))\n      };\n      options.cellOffset += model.primitives[primTypes.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);\n      options.cellOffset += model.primitives[primTypes.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);\n      options.cellOffset += model.primitives[primTypes.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);\n      options.cellOffset += model.primitives[primTypes.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);\n      model.VBOBuildTime.modified();\n      model.VBOBuildString = toString;\n    }\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const representation = actor.getProperty().getRepresentation();\n    const gl = model.context;\n    gl.depthMask(true);\n\n    // for every primitive type\n    for (let i = primTypes.Start; i < primTypes.End; i++) {\n      // if there are entries\n      const cabo = model.primitives[i].getCABO();\n      if (cabo.getElementCount()) {\n        model.lastBoundBO = model.primitives[i];\n        model.primitiveIDOffset += model.primitives[i].drawArrays(ren, actor, representation, publicAPI);\n      }\n    }\n  };\n  publicAPI.renderPieceFinish = (ren, actor) => {\n    if (model.lastBoundBO) {\n      model.lastBoundBO.getVAO().release();\n    }\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    publicAPI.replaceShaderColor(shaders, ren, actor);\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPicking(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderColor = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let GSSource = shaders.Geometry;\n    let FSSource = shaders.Fragment;\n    if (model.haveCellScalars) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform samplerBuffer texture1;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = texelFetchBuffer(texture1, gl_PrimitiveID + PrimitiveIDOffset);']).result;\n    }\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['in vec4 diffuseColor;', 'out vec4 fcolorVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['fcolorVSOutput = diffuseColor;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput[];\\n', 'out vec4 fcolorGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['fcolorGSOutput = fcolorVSOutput[i];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = fcolorVSOutput;']).result;\n    } else {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform vec4 diffuseColor;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = diffuseColor;']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderTCoord = (shaders, ren, actor) => {\n    if (model.lastBoundBO.getCABO().getTCoordOffset()) {\n      let VSSource = shaders.Vertex;\n      let GSSource = shaders.Geometry;\n      let FSSource = shaders.Fragment;\n      const tcdim = model.lastBoundBO.getCABO().getTCoordComponents();\n      if (tcdim === 1) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in float tcoordMC;', 'out float tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput[];\\n', 'out float tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, ['//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, vec2(tcoordVCVSOutput,0));']).result;\n      } else if (tcdim === 2) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordMC;', 'out vec2 tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];\\n', 'out vec2 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', ['tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, tcoordVCVSOutput.st);']).result;\n      }\n      if (model.haveCellScalars) {\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PrimID::Impl', ['gl_PrimitiveID = gl_PrimitiveIDIn;']).result;\n      }\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n  publicAPI.replaceShaderPicking = (shaders, ren, actor) => {\n    let FSSource = shaders.Fragment;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderPositionVC = (shaders, ren, actor) => {\n    // replace common shader code\n    model.lastBoundBO.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.invokeShaderCallbacks = (cellBO, ren, actor) => {\n    const listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;\n    if (listCallbacks) {\n      listCallbacks.forEach(object => {\n        object.callback(object.userData, cellBO, ren, actor);\n      });\n    }\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    // Now to update the VAO too, if necessary.\n    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {\n      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);\n    }\n    if (cellBO.getProgram().isAttributeUsed('vertexWC')) {\n      if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexWC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n        vtkErrorMacro('Error setting vertexWC in shader VAO.');\n      }\n    }\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      model.renderable.getCustomShaderAttributes().forEach((attrName, idx) => {\n        if (cellBO.getProgram().isAttributeUsed(`${attrName}MC`)) {\n          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), `${attrName}MC`, cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {\n            vtkErrorMacro(`Error setting ${attrName}MC in shader VAO.`);\n          }\n        }\n      });\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('tcoordMC');\n      }\n      if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {\n        cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());\n      }\n      const tus = model.openGLActor2D.getActiveTextures();\n      if (tus) {\n        for (let index = 0; index < tus.length; ++index) {\n          const tex = tus[index];\n          const texUnit = tex.getTextureUnit();\n          const tname = `texture${texUnit + 1}`;\n          if (cellBO.getProgram().isUniformUsed(tname)) {\n            cellBO.getProgram().setUniformi(tname, texUnit);\n          }\n        }\n      }\n\n      // handle wide lines\n      cellBO.setMapperShaderParameters(ren, actor, model._openGLRenderer.getTiledSizeAndOrigin());\n      const selector = model._openGLRenderer.getSelector();\n      cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);\n      cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);\n    }\n  };\n  publicAPI.setPropertyShaderParameters = (cellBO, ren, actor) => {\n    const c = model.renderable.getColorMapColors();\n    if (!c || c.getNumberOfComponents() === 0) {\n      const program = cellBO.getProgram();\n      const ppty = actor.getProperty();\n      const opacity = ppty.getOpacity();\n      const dColor = ppty.getColor();\n      const diffuseColor = [dColor[0], dColor[1], dColor[2], opacity];\n      program.setUniform4f('diffuseColor', diffuseColor);\n    }\n  };\n  publicAPI.setLightingShaderParameters = (cellBO, ren, actor) => {\n    // no-op\n  };\n  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n    matrixType.identity(tmpMat);\n    return matrixArray.reduce((res, matrix, index) => {\n      if (index === 0) {\n        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n      }\n      return matrix ? matrixType.multiply(res, res, matrix) : res;\n    }, tmpMat);\n  }\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    const inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n\n    // Get the position of the actor\n    const view = ren.getRenderWindow().getViews()[0];\n    const size = view.getViewportSize(ren);\n    const vport = ren.getViewport();\n    const actorPos = actor.getActualPositionCoordinate().getComputedDoubleViewportValue(ren);\n\n    // Get the window info\n    // Assume tile viewport is 0 1 based on vtkOpenGLRenderer\n    const tileViewport = [0.0, 0.0, 1.0, 1.0];\n    const visVP = [0.0, 0.0, 1.0, 1.0];\n    visVP[0] = vport[0] >= tileViewport[0] ? vport[0] : tileViewport[0];\n    visVP[1] = vport[1] >= tileViewport[1] ? vport[1] : tileViewport[1];\n    visVP[2] = vport[2] <= tileViewport[2] ? vport[2] : tileViewport[2];\n    visVP[3] = vport[3] <= tileViewport[3] ? vport[3] : tileViewport[3];\n    if (visVP[0] >= visVP[2]) {\n      return;\n    }\n    if (visVP[1] >= visVP[3]) {\n      return;\n    }\n    size[0] = round(size[0] * (visVP[2] - visVP[0]) / (vport[2] - vport[0]));\n    size[1] = round(size[1] * (visVP[3] - visVP[1]) / (vport[3] - vport[1]));\n    const winSize = model._openGLRenderer.getParent().getSize();\n    const xoff = round(actorPos[0] - (visVP[0] - vport[0]) * winSize[0]);\n    const yoff = round(actorPos[1] - (visVP[1] - vport[1]) * winSize[1]);\n\n    // set ortho projection\n    const left = -xoff;\n    let right = -xoff + size[0];\n    const bottom = -yoff;\n    let top = -yoff + size[1];\n\n    // it's an error to call glOrtho with\n    // either left==right or top==bottom\n    if (left === right) {\n      right = left + 1.0;\n    }\n    if (bottom === top) {\n      top = bottom + 1.0;\n    }\n\n    // compute the combined ModelView matrix and send it down to save time in the shader\n    const tmpMat4 = mat4.identity(new Float64Array(16));\n    tmpMat4[0] = 2.0 / (right - left);\n    tmpMat4[1 * 4 + 1] = 2.0 / (top - bottom);\n    tmpMat4[0 * 4 + 3] = -1.0 * (right + left) / (right - left);\n    tmpMat4[1 * 4 + 3] = -1.0 * (top + bottom) / (top - bottom);\n    tmpMat4[2 * 4 + 2] = 0.0;\n    tmpMat4[2 * 4 + 3] = actor.getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? -1.0 : 1.0;\n    tmpMat4[3 * 4 + 3] = 1.0;\n    mat4.transpose(tmpMat4, tmpMat4);\n    program.setUniformMatrix('WCVCMatrix', safeMatrixMultiply([tmpMat4, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n  };\n  publicAPI.getAllocatedGPUMemoryInBytes = () => {\n    let memUsed = 0;\n    model.primitives.forEach(prim => {\n      memUsed += prim.getAllocatedGPUMemoryInBytes();\n    });\n    // Return in MB\n    return memUsed;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  primitives: null,\n  primTypes: null,\n  shaderRebuildString: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.primitives = [];\n  model.primTypes = primTypes;\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  for (let i = primTypes.Start; i < primTypes.End; i++) {\n    model.primitives[i] = vtkHelper.newInstance();\n    model.primitives[i].setPrimitiveType(i);\n    model.primitives[i].set({\n      lastLightComplexity: 0,\n      lastLightCount: 0,\n      lastSelectionPass: false\n    }, true);\n  }\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n\n  // Object methods\n  vtkOpenGLPolyDataMapper2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLPolyDataMapper2D');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPolyDataMapper2D = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkMapper2D', newInstance);\nexport { vtkPolyDataMapper2D as default, extend, newInstance };","map":{"version":3,"names":["mat4","n","newInstance$1","e","setGet","o","obj","c","macro","vtkHelper","vtkMapper2D","vtkPoints","v","vtkPolyData2DFS","vtkPolyData2DVS","vtkReplacementShaderMapper","vtkShaderProgram","vtkViewNode","M","round","DisplayLocation","registerOverride","primTypes","ScalarMode","vtkErrorMacro","StartEvent","type","EndEvent","vtkOpenGLPolyDataMapper2D","publicAPI","model","classHierarchy","push","buildPass","prepass","openGLActor2D","getFirstAncestorOfType","_openGLRenderer","_openGLRenderWindow","getParent","openGLCamera","getViewNodeFor","getRenderable","getActiveCamera","overlayPass","render","getShaderTemplate","shaders","ren","actor","Vertex","Fragment","Geometry","ctx","getContext","context","i","Start","End","primitives","setOpenGLRenderWindow","renderPiece","invokeEvent","renderable","getStatic","update","currentInput","getInputData","getPoints","getNumberOfValues","renderPieceStart","renderPieceDraw","renderPieceFinish","primitiveIDOffset","getSelector","getCurrentPass","renderProp","updateBufferObjects","lastBoundBO","getNeedToRebuildShaders","cellBO","getShaderSourceTime","getMTime","getNeedToRebuildBufferObjects","buildBufferObjects","vmtime","VBOBuildTime","getTransformCoordinate","poly","mapScalars","getProperty","getOpacity","getColorMapColors","haveCellScalars","scalarMode","getScalarMode","getScalarVisibility","USE_CELL_DATA","USE_CELL_FIELD_DATA","USE_FIELD_DATA","getPointData","getScalars","USE_POINT_FIELD_DATA","representation","getRepresentation","tcoords","getTCoords","getActiveTextures","transformCoordinate","view","getRenderWindow","getViews","vsize","getViewportSize","toString","VBOBuildString","points","p","newInstance","numPts","getNumberOfPoints","setNumberOfPoints","point","getPoint","setValue","getComputedDoubleViewportValue","setPoint","options","colors","cellOffset","haveCellSCalars","customAttributes","getCustomShaderAttributes","map","arrayName","getArrayByName","Points","getCABO","createVBO","getVerts","Lines","getLines","Tris","getPolys","TriStrips","getStrips","modified","gl","depthMask","cabo","getElementCount","drawArrays","getVAO","release","replaceShaderValues","replaceShaderColor","replaceShaderTCoord","replaceShaderPicking","replaceShaderPositionVC","VSSource","GSSource","FSSource","substitute","result","getColorComponents","getTCoordOffset","tcdim","getTCoordComponents","invokeShaderCallbacks","listCallbacks","getViewSpecificProperties","ShadersCallbacks","forEach","object","callback","userData","setMapperShaderParameters","getProgram","isUniformUsed","setUniformi","isAttributeUsed","addAttributeArray","getVertexOffset","getStride","FLOAT","getAttributeUpdateTime","attrName","idx","getCustomData","offset","components","removeAttributeArray","internalColorTexture","getTextureUnit","tus","index","length","tex","texUnit","tname","getTiledSizeAndOrigin","selector","setUniform3fArray","getPropColorValue","setPropertyShaderParameters","getNumberOfComponents","program","ppty","opacity","dColor","getColor","diffuseColor","setUniform4f","setLightingShaderParameters","safeMatrixMultiply","matrixArray","matrixType","tmpMat","identity","reduce","res","matrix","copy","multiply","setCameraShaderParameters","shiftScaleEnabled","getCoordShiftAndScaleEnabled","inverseShiftScaleMatrix","getInverseShiftAndScaleMatrix","size","vport","getViewport","actorPos","getActualPositionCoordinate","tileViewport","visVP","winSize","getSize","xoff","yoff","left","right","bottom","top","tmpMat4","Float64Array","getDisplayLocation","FOREGROUND","transpose","setUniformMatrix","getAllocatedGPUMemoryInBytes","memUsed","prim","DEFAULT_VALUES","shaderRebuildString","extend","initialValues","arguments","undefined","Object","assign","implementReplaceShaderCoincidentOffset","implementBuildShadersWithReplacements","setPrimitiveType","set","lastLightComplexity","lastLightCount","lastSelectionPass","mtime","vtkPolyDataMapper2D","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/OpenGL/PolyDataMapper2D.js"],"sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { n as newInstance$1, e as setGet, o as obj, c as macro } from '../../macros2.js';\nimport vtkHelper from './Helper.js';\nimport vtkMapper2D from '../Core/Mapper2D.js';\nimport vtkPoints from '../../Common/Core/Points.js';\nimport { v as vtkPolyData2DFS } from './glsl/vtkPolyData2DFS.glsl.js';\nimport { v as vtkPolyData2DVS } from './glsl/vtkPolyData2DVS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { M as round } from '../../Common/Core/Math/index.js';\nimport { DisplayLocation } from '../Core/Property2D/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat3, mat4, vec3 } from 'gl-matrix';\nconst {\n  primTypes\n} = vtkHelper;\nconst {\n  ScalarMode\n} = vtkMapper2D;\nconst {\n  vtkErrorMacro\n} = macro;\nconst StartEvent = {\n  type: 'StartEvent'\n};\nconst EndEvent = {\n  type: 'EndEvent'\n};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLPolyDataMapper2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLPolyDataMapper2D');\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.openGLActor2D = publicAPI.getFirstAncestorOfType('vtkOpenGLActor2D');\n      model._openGLRenderer = model.openGLActor2D.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(model._openGLRenderer.getRenderable().getActiveCamera());\n    }\n  };\n  publicAPI.overlayPass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.getShaderTemplate = (shaders, ren, actor) => {\n    shaders.Vertex = vtkPolyData2DVS;\n    shaders.Fragment = vtkPolyData2DFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.render = () => {\n    const ctx = model._openGLRenderWindow.getContext();\n    if (model.context !== ctx) {\n      model.context = ctx;\n      for (let i = primTypes.Start; i < primTypes.End; i++) {\n        model.primitives[i].setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n    }\n    const actor = model.openGLActor2D.getRenderable();\n    const ren = model._openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n  publicAPI.renderPiece = (ren, actor) => {\n    publicAPI.invokeEvent(StartEvent);\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent(EndEvent);\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n\n    // if there are no points then we are done\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.renderPieceStart = (ren, actor) => {\n    model.primitiveIDOffset = 0;\n    if (model._openGLRenderer.getSelector()) {\n      switch (model._openGLRenderer.getSelector().getCurrentPass()) {\n        default:\n          model._openGLRenderer.getSelector().renderProp(actor);\n      }\n    }\n    // make sure the BOs are up to date\n    publicAPI.updateBufferObjects(ren, actor);\n\n    // Bind the OpenGL, this is shared between the different primitive/cell types.\n    model.lastBoundBO = null;\n  };\n  publicAPI.getNeedToRebuildShaders = (cellBO, ren, actor) => {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    if (cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.updateBufferObjects = (ren, actor) => {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = (ren, actor) => {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    const vmtime = model.VBOBuildTime.getMTime();\n    if (vmtime < publicAPI.getMTime() || vmtime < model._openGLRenderWindow.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime() || model.renderable.getTransformCoordinate() && vmtime < ren.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = (ren, actor) => {\n    const poly = model.currentInput;\n    if (poly === null) {\n      return;\n    }\n    model.renderable.mapScalars(poly, actor.getProperty().getOpacity());\n    const c = model.renderable.getColorMapColors();\n    model.haveCellScalars = false;\n    const scalarMode = model.renderable.getScalarMode();\n    if (model.renderable.getScalarVisibility()) {\n      // We must figure out how the scalars should be mapped to the polydata.\n      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n        model.haveCellScalars = true;\n      }\n    }\n    const representation = actor.getProperty().getRepresentation();\n    let tcoords = poly.getPointData().getTCoords();\n    if (!model.openGLActor2D.getActiveTextures()) {\n      tcoords = null;\n    }\n    const transformCoordinate = model.renderable.getTransformCoordinate();\n    const view = ren.getRenderWindow().getViews()[0];\n    const vsize = view.getViewportSize(ren);\n    const toString = `${poly.getMTime()}A${representation}B${poly.getMTime()}` + `C${c ? c.getMTime() : 1}` + `D${tcoords ? tcoords.getMTime() : 1}` + `E${transformCoordinate ? ren.getMTime() : 1}` + `F${vsize}`;\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      let points = poly.getPoints();\n      if (transformCoordinate) {\n        const p = vtkPoints.newInstance();\n        const numPts = points.getNumberOfPoints();\n        p.setNumberOfPoints(numPts);\n        const point = [];\n        for (let i = 0; i < numPts; ++i) {\n          points.getPoint(i, point);\n          transformCoordinate.setValue(point);\n          const v = transformCoordinate.getComputedDoubleViewportValue(ren);\n          p.setPoint(i, v[0], v[1], 0.0);\n        }\n        points = p;\n      }\n      const options = {\n        points,\n        tcoords,\n        colors: c,\n        cellOffset: 0,\n        haveCellScalars: model.haveCellSCalars,\n        customAttributes: model.renderable.getCustomShaderAttributes().map(arrayName => poly.getPointData().getArrayByName(arrayName))\n      };\n      options.cellOffset += model.primitives[primTypes.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);\n      options.cellOffset += model.primitives[primTypes.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);\n      options.cellOffset += model.primitives[primTypes.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);\n      options.cellOffset += model.primitives[primTypes.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);\n      model.VBOBuildTime.modified();\n      model.VBOBuildString = toString;\n    }\n  };\n  publicAPI.renderPieceDraw = (ren, actor) => {\n    const representation = actor.getProperty().getRepresentation();\n    const gl = model.context;\n    gl.depthMask(true);\n\n    // for every primitive type\n    for (let i = primTypes.Start; i < primTypes.End; i++) {\n      // if there are entries\n      const cabo = model.primitives[i].getCABO();\n      if (cabo.getElementCount()) {\n        model.lastBoundBO = model.primitives[i];\n        model.primitiveIDOffset += model.primitives[i].drawArrays(ren, actor, representation, publicAPI);\n      }\n    }\n  };\n  publicAPI.renderPieceFinish = (ren, actor) => {\n    if (model.lastBoundBO) {\n      model.lastBoundBO.getVAO().release();\n    }\n  };\n  publicAPI.replaceShaderValues = (shaders, ren, actor) => {\n    publicAPI.replaceShaderColor(shaders, ren, actor);\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPicking(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderColor = (shaders, ren, actor) => {\n    let VSSource = shaders.Vertex;\n    let GSSource = shaders.Geometry;\n    let FSSource = shaders.Fragment;\n    if (model.haveCellScalars) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform samplerBuffer texture1;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = texelFetchBuffer(texture1, gl_PrimitiveID + PrimitiveIDOffset);']).result;\n    }\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['in vec4 diffuseColor;', 'out vec4 fcolorVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['fcolorVSOutput = diffuseColor;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput[];\\n', 'out vec4 fcolorGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['fcolorGSOutput = fcolorVSOutput[i];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = fcolorVSOutput;']).result;\n    } else {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform vec4 diffuseColor;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = diffuseColor;']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderTCoord = (shaders, ren, actor) => {\n    if (model.lastBoundBO.getCABO().getTCoordOffset()) {\n      let VSSource = shaders.Vertex;\n      let GSSource = shaders.Geometry;\n      let FSSource = shaders.Fragment;\n      const tcdim = model.lastBoundBO.getCABO().getTCoordComponents();\n      if (tcdim === 1) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in float tcoordMC;', 'out float tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput[];\\n', 'out float tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, ['//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, vec2(tcoordVCVSOutput,0));']).result;\n      } else if (tcdim === 2) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordMC;', 'out vec2 tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];\\n', 'out vec2 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', ['tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, tcoordVCVSOutput.st);']).result;\n      }\n      if (model.haveCellScalars) {\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PrimID::Impl', ['gl_PrimitiveID = gl_PrimitiveIDIn;']).result;\n      }\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n  publicAPI.replaceShaderPicking = (shaders, ren, actor) => {\n    let FSSource = shaders.Fragment;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderPositionVC = (shaders, ren, actor) => {\n    // replace common shader code\n    model.lastBoundBO.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.invokeShaderCallbacks = (cellBO, ren, actor) => {\n    const listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;\n    if (listCallbacks) {\n      listCallbacks.forEach(object => {\n        object.callback(object.userData, cellBO, ren, actor);\n      });\n    }\n  };\n  publicAPI.setMapperShaderParameters = (cellBO, ren, actor) => {\n    // Now to update the VAO too, if necessary.\n    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {\n      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);\n    }\n    if (cellBO.getProgram().isAttributeUsed('vertexWC')) {\n      if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexWC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n        vtkErrorMacro('Error setting vertexWC in shader VAO.');\n      }\n    }\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      model.renderable.getCustomShaderAttributes().forEach((attrName, idx) => {\n        if (cellBO.getProgram().isAttributeUsed(`${attrName}MC`)) {\n          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), `${attrName}MC`, cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {\n            vtkErrorMacro(`Error setting ${attrName}MC in shader VAO.`);\n          }\n        }\n      });\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('tcoordMC');\n      }\n      if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {\n        cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());\n      }\n      const tus = model.openGLActor2D.getActiveTextures();\n      if (tus) {\n        for (let index = 0; index < tus.length; ++index) {\n          const tex = tus[index];\n          const texUnit = tex.getTextureUnit();\n          const tname = `texture${texUnit + 1}`;\n          if (cellBO.getProgram().isUniformUsed(tname)) {\n            cellBO.getProgram().setUniformi(tname, texUnit);\n          }\n        }\n      }\n\n      // handle wide lines\n      cellBO.setMapperShaderParameters(ren, actor, model._openGLRenderer.getTiledSizeAndOrigin());\n      const selector = model._openGLRenderer.getSelector();\n      cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);\n      cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);\n    }\n  };\n  publicAPI.setPropertyShaderParameters = (cellBO, ren, actor) => {\n    const c = model.renderable.getColorMapColors();\n    if (!c || c.getNumberOfComponents() === 0) {\n      const program = cellBO.getProgram();\n      const ppty = actor.getProperty();\n      const opacity = ppty.getOpacity();\n      const dColor = ppty.getColor();\n      const diffuseColor = [dColor[0], dColor[1], dColor[2], opacity];\n      program.setUniform4f('diffuseColor', diffuseColor);\n    }\n  };\n  publicAPI.setLightingShaderParameters = (cellBO, ren, actor) => {\n    // no-op\n  };\n  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n    matrixType.identity(tmpMat);\n    return matrixArray.reduce((res, matrix, index) => {\n      if (index === 0) {\n        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n      }\n      return matrix ? matrixType.multiply(res, res, matrix) : res;\n    }, tmpMat);\n  }\n  publicAPI.setCameraShaderParameters = (cellBO, ren, actor) => {\n    const program = cellBO.getProgram();\n    const shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    const inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n\n    // Get the position of the actor\n    const view = ren.getRenderWindow().getViews()[0];\n    const size = view.getViewportSize(ren);\n    const vport = ren.getViewport();\n    const actorPos = actor.getActualPositionCoordinate().getComputedDoubleViewportValue(ren);\n\n    // Get the window info\n    // Assume tile viewport is 0 1 based on vtkOpenGLRenderer\n    const tileViewport = [0.0, 0.0, 1.0, 1.0];\n    const visVP = [0.0, 0.0, 1.0, 1.0];\n    visVP[0] = vport[0] >= tileViewport[0] ? vport[0] : tileViewport[0];\n    visVP[1] = vport[1] >= tileViewport[1] ? vport[1] : tileViewport[1];\n    visVP[2] = vport[2] <= tileViewport[2] ? vport[2] : tileViewport[2];\n    visVP[3] = vport[3] <= tileViewport[3] ? vport[3] : tileViewport[3];\n    if (visVP[0] >= visVP[2]) {\n      return;\n    }\n    if (visVP[1] >= visVP[3]) {\n      return;\n    }\n    size[0] = round(size[0] * (visVP[2] - visVP[0]) / (vport[2] - vport[0]));\n    size[1] = round(size[1] * (visVP[3] - visVP[1]) / (vport[3] - vport[1]));\n    const winSize = model._openGLRenderer.getParent().getSize();\n    const xoff = round(actorPos[0] - (visVP[0] - vport[0]) * winSize[0]);\n    const yoff = round(actorPos[1] - (visVP[1] - vport[1]) * winSize[1]);\n\n    // set ortho projection\n    const left = -xoff;\n    let right = -xoff + size[0];\n    const bottom = -yoff;\n    let top = -yoff + size[1];\n\n    // it's an error to call glOrtho with\n    // either left==right or top==bottom\n    if (left === right) {\n      right = left + 1.0;\n    }\n    if (bottom === top) {\n      top = bottom + 1.0;\n    }\n\n    // compute the combined ModelView matrix and send it down to save time in the shader\n    const tmpMat4 = mat4.identity(new Float64Array(16));\n    tmpMat4[0] = 2.0 / (right - left);\n    tmpMat4[1 * 4 + 1] = 2.0 / (top - bottom);\n    tmpMat4[0 * 4 + 3] = -1.0 * (right + left) / (right - left);\n    tmpMat4[1 * 4 + 3] = -1.0 * (top + bottom) / (top - bottom);\n    tmpMat4[2 * 4 + 2] = 0.0;\n    tmpMat4[2 * 4 + 3] = actor.getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? -1.0 : 1.0;\n    tmpMat4[3 * 4 + 3] = 1.0;\n    mat4.transpose(tmpMat4, tmpMat4);\n    program.setUniformMatrix('WCVCMatrix', safeMatrixMultiply([tmpMat4, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n  };\n  publicAPI.getAllocatedGPUMemoryInBytes = () => {\n    let memUsed = 0;\n    model.primitives.forEach(prim => {\n      memUsed += prim.getAllocatedGPUMemoryInBytes();\n    });\n    // Return in MB\n    return memUsed;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  primitives: null,\n  primTypes: null,\n  shaderRebuildString: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.primitives = [];\n  model.primTypes = primTypes;\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  for (let i = primTypes.Start; i < primTypes.End; i++) {\n    model.primitives[i] = vtkHelper.newInstance();\n    model.primitives[i].setPrimitiveType(i);\n    model.primitives[i].set({\n      lastLightComplexity: 0,\n      lastLightCount: 0,\n      lastSelectionPass: false\n    }, true);\n  }\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n\n  // Object methods\n  vtkOpenGLPolyDataMapper2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLPolyDataMapper2D');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPolyDataMapper2D = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkMapper2D', newInstance);\n\nexport { vtkPolyDataMapper2D as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}