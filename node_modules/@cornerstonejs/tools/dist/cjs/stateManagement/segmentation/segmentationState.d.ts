import type { Types } from '@cornerstonejs/core';
import type { RepresentationConfig, Segmentation, SegmentationPublicInput, SegmentationRepresentationConfig, SegmentSpecificRepresentationConfig, ToolGroupSpecificRepresentation, ToolGroupSpecificRepresentations } from '../../types/SegmentationStateTypes';
declare function getDefaultSegmentationStateManager(): import("./SegmentationStateManager").default;
declare function getSegmentation(segmentationId: string): Segmentation | undefined;
declare function getSegmentations(): Segmentation[] | [];
declare function addSegmentation(segmentationInput: SegmentationPublicInput, suppressEvents?: boolean): void;
declare function getSegmentationRepresentations(toolGroupId: string): ToolGroupSpecificRepresentations | [];
declare function getAllSegmentationRepresentations(): Record<string, ToolGroupSpecificRepresentation[]>;
declare function getSegmentationIdRepresentations(segmentationId: any): any[];
declare function findSegmentationRepresentationByUID(segmentationRepresentationUID: string): {
    toolGroupId: string;
    segmentationRepresentation: ToolGroupSpecificRepresentation;
};
declare function getToolGroupIdsWithSegmentation(segmentationId: string): string[];
declare function getToolGroupSpecificConfig(toolGroupId: string): SegmentationRepresentationConfig;
declare function setToolGroupSpecificConfig(toolGroupId: string, config: SegmentationRepresentationConfig, suppressEvents?: boolean): void;
declare function setSegmentationRepresentationSpecificConfig(toolGroupId: string, segmentationRepresentationUID: string, config: RepresentationConfig, suppressEvents?: boolean): void;
declare function getSegmentationRepresentationSpecificConfig(toolGroupId: string, segmentationRepresentationUID: string): RepresentationConfig;
declare function getSegmentSpecificRepresentationConfig(toolGroupId: string, segmentationRepresentationUID: string, segmentIndex: number): RepresentationConfig;
declare function setSegmentSpecificRepresentationConfig(toolGroupId: string, segmentationRepresentationUID: string, config: SegmentSpecificRepresentationConfig, suppressEvents?: boolean): void;
declare function getToolGroupIdFromSegmentationRepresentationUID(segmentationRepresentationUID: string): string;
declare function addSegmentationRepresentation(toolGroupId: string, segmentationRepresentation: ToolGroupSpecificRepresentation, suppressEvents?: boolean): void;
declare function getGlobalConfig(): SegmentationRepresentationConfig;
declare function setGlobalConfig(config: SegmentationRepresentationConfig, suppressEvents?: boolean): void;
declare function getSegmentationRepresentationByUID(toolGroupId: string, segmentationRepresentationUID: string): ToolGroupSpecificRepresentation | undefined;
declare function removeSegmentation(segmentationId: string): void;
declare function removeSegmentationRepresentation(toolGroupId: string, segmentationRepresentationUID: string): void;
declare function removeSegmentationRepresentations(toolGroupId: string): void;
declare function removeColorLUT(colorLUTIndex: number): void;
declare function getColorLUT(index: number): Types.ColorLUT | undefined;
declare function getNextColorLUTIndex(): number;
declare function addColorLUT(colorLUT: Types.ColorLUT, index: number): void;
export { getDefaultSegmentationStateManager, getSegmentation, getSegmentations, addSegmentation, removeSegmentation, getSegmentationRepresentations, addSegmentationRepresentation, removeSegmentationRepresentation, removeSegmentationRepresentations, getToolGroupSpecificConfig, setToolGroupSpecificConfig, getGlobalConfig, setGlobalConfig, getSegmentationRepresentationSpecificConfig, setSegmentationRepresentationSpecificConfig, getSegmentSpecificRepresentationConfig, setSegmentSpecificRepresentationConfig, getToolGroupIdsWithSegmentation, getAllSegmentationRepresentations, getSegmentationRepresentationByUID, getSegmentationIdRepresentations, addColorLUT, getColorLUT, getNextColorLUTIndex, removeColorLUT, findSegmentationRepresentationByUID, getToolGroupIdFromSegmentationRepresentationUID, };
