"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const StrategyCallbacks_1 = __importDefault(require("../../../../enums/StrategyCallbacks"));
exports.default = {
    [StrategyCallbacks_1.default.Initialize]: (operationData) => {
        const { centerIJK, strategySpecificConfiguration, segmentationVoxelManager: segmentationVoxelManager, imageVoxelManager: imageVoxelManager, segmentIndex, } = operationData;
        const { THRESHOLD } = strategySpecificConfiguration;
        if (!(THRESHOLD === null || THRESHOLD === void 0 ? void 0 : THRESHOLD.isDynamic) || !centerIJK || !segmentIndex) {
            return;
        }
        const { boundsIJK } = segmentationVoxelManager;
        const { threshold: oldThreshold, dynamicRadius = 0 } = THRESHOLD;
        const useDelta = oldThreshold ? 0 : dynamicRadius;
        const nestedBounds = boundsIJK.map((ijk, idx) => {
            const [min, max] = ijk;
            return [
                Math.max(min, centerIJK[idx] - useDelta),
                Math.min(max, centerIJK[idx] + useDelta),
            ];
        });
        const threshold = oldThreshold || [Infinity, -Infinity];
        const callback = ({ value }) => {
            threshold[0] = Math.min(value, threshold[0]);
            threshold[1] = Math.max(value, threshold[1]);
        };
        imageVoxelManager.forEach(callback, { boundsIJK: nestedBounds });
        operationData.strategySpecificConfiguration.THRESHOLD.threshold = threshold;
    },
    [StrategyCallbacks_1.default.OnInteractionStart]: (operationData) => {
        var _a;
        const { strategySpecificConfiguration, preview } = operationData;
        if (!((_a = strategySpecificConfiguration === null || strategySpecificConfiguration === void 0 ? void 0 : strategySpecificConfiguration.THRESHOLD) === null || _a === void 0 ? void 0 : _a.isDynamic) && !preview) {
            return;
        }
        strategySpecificConfiguration.THRESHOLD.threshold = null;
    },
};
//# sourceMappingURL=dynamicThreshold.js.map