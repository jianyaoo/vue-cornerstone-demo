{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { vec3 } from 'gl-matrix';\nimport cache from '../cache';\nimport { MPR_CAMERA_VALUES, RENDERING_DEFAULTS, VIEWPORT_PRESETS } from '../constants';\nimport { Events, ViewportStatus, VOILUTFunctionType } from '../enums';\nimport ViewportType from '../enums/ViewportType';\nimport eventTarget from '../eventTarget';\nimport { getShouldUseCPURendering } from '../init';\nimport { loadVolume } from '../loaders/volumeLoader';\nimport { actorIsA, applyPreset, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, imageIdToURI, invertRgbTransferFunction, triggerEvent, colormap as colormapUtils } from '../utilities';\nimport { createVolumeActor } from './helpers';\nimport volumeNewImageEventDispatcher, { resetVolumeNewImageState } from './helpers/volumeNewImageEventDispatcher';\nimport Viewport from './Viewport';\nimport vtkSlabCamera from './vtkClasses/vtkSlabCamera';\nimport transformWorldToIndex from '../utilities/transformWorldToIndex';\nimport { getTransferFunctionNodes } from '../utilities/transferFunctionUtils';\nclass BaseVolumeViewport extends Viewport {\n  constructor(props) {\n    super(props);\n    this.useCPURendering = false;\n    this.useNativeDataType = false;\n    this.perVolumeIdDefaultProperties = new Map();\n    this.viewportProperties = {};\n    this.getDefaultProperties = volumeId => {\n      let volumeProperties;\n      if (volumeId !== undefined) {\n        volumeProperties = this.perVolumeIdDefaultProperties.get(volumeId);\n      }\n      if (volumeProperties !== undefined) {\n        return volumeProperties;\n      }\n      return {\n        ...this.globalDefaultProperties\n      };\n    };\n    this.getProperties = volumeId => {\n      const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n      if (!applicableVolumeActorInfo) {\n        return;\n      }\n      const {\n        colormap,\n        VOILUTFunction,\n        interpolationType,\n        invert,\n        slabThickness,\n        rotation\n      } = this.viewportProperties;\n      const voiRanges = this.getActors().map(actorEntry => {\n        const volumeActor = actorEntry.actor;\n        const volumeId = actorEntry.uid;\n        const volume = cache.getVolume(volumeId);\n        if (!volume) {\n          return null;\n        }\n        const cfun = volumeActor.getProperty().getRGBTransferFunction(0);\n        const [lower, upper] = this.viewportProperties?.VOILUTFunction === 'SIGMOID' ? getVoiFromSigmoidRGBTransferFunction(cfun) : cfun.getRange();\n        return {\n          volumeId,\n          voiRange: {\n            lower,\n            upper\n          }\n        };\n      }).filter(Boolean);\n      const voiRange = voiRanges.length ? voiRanges[0].voiRange : null;\n      return {\n        colormap: colormap,\n        voiRange: voiRange,\n        VOILUTFunction: VOILUTFunction,\n        interpolationType: interpolationType,\n        invert: invert,\n        slabThickness: slabThickness,\n        rotation: rotation\n      };\n    };\n    this.getRotation = () => {\n      const {\n        viewUp: currentViewUp,\n        viewPlaneNormal,\n        flipVertical\n      } = this.getCamera();\n      const initialViewUp = flipVertical ? vec3.negate(vec3.create(), this.initialViewUp) : this.initialViewUp;\n      if (!initialViewUp) {\n        return 0;\n      }\n      const initialToCurrentViewUpAngle = vec3.angle(initialViewUp, currentViewUp) * 180 / Math.PI;\n      const initialToCurrentViewUpCross = vec3.cross(vec3.create(), initialViewUp, currentViewUp);\n      const normalDot = vec3.dot(initialToCurrentViewUpCross, viewPlaneNormal);\n      const value = normalDot >= 0 ? initialToCurrentViewUpAngle : (360 - initialToCurrentViewUpAngle) % 360;\n      return value;\n    };\n    this.getFrameOfReferenceUID = () => {\n      return this._FrameOfReferenceUID;\n    };\n    this.canvasToWorld = canvasPos => {\n      const vtkCamera = this.getVtkActiveCamera();\n      vtkCamera.setIsPerformingCoordinateTransformation?.(true);\n      const renderer = this.getRenderer();\n      const offscreenMultiRenderWindow = this.getRenderingEngine().offscreenMultiRenderWindow;\n      const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n      const size = openGLRenderWindow.getSize();\n      const devicePixelRatio = window.devicePixelRatio || 1;\n      const canvasPosWithDPR = [canvasPos[0] * devicePixelRatio, canvasPos[1] * devicePixelRatio];\n      const displayCoord = [canvasPosWithDPR[0] + this.sx, canvasPosWithDPR[1] + this.sy];\n      displayCoord[1] = size[1] - displayCoord[1];\n      const worldCoord = openGLRenderWindow.displayToWorld(displayCoord[0], displayCoord[1], 0, renderer);\n      vtkCamera.setIsPerformingCoordinateTransformation?.(false);\n      return [worldCoord[0], worldCoord[1], worldCoord[2]];\n    };\n    this.worldToCanvas = worldPos => {\n      const vtkCamera = this.getVtkActiveCamera();\n      vtkCamera.setIsPerformingCoordinateTransformation?.(true);\n      const renderer = this.getRenderer();\n      const offscreenMultiRenderWindow = this.getRenderingEngine().offscreenMultiRenderWindow;\n      const openGLRenderWindow = offscreenMultiRenderWindow.getOpenGLRenderWindow();\n      const size = openGLRenderWindow.getSize();\n      const displayCoord = openGLRenderWindow.worldToDisplay(...worldPos, renderer);\n      displayCoord[1] = size[1] - displayCoord[1];\n      const canvasCoord = [displayCoord[0] - this.sx, displayCoord[1] - this.sy];\n      const devicePixelRatio = window.devicePixelRatio || 1;\n      const canvasCoordWithDPR = [canvasCoord[0] / devicePixelRatio, canvasCoord[1] / devicePixelRatio];\n      vtkCamera.setIsPerformingCoordinateTransformation?.(false);\n      return canvasCoordWithDPR;\n    };\n    this.hasImageURI = imageURI => {\n      const volumeActors = this.getActors().filter(actorEntry => actorIsA(actorEntry, 'vtkVolume'));\n      return volumeActors.some(({\n        uid\n      }) => {\n        const volume = cache.getVolume(uid);\n        if (!volume || !volume.imageIds) {\n          return false;\n        }\n        const volumeImageURIs = volume.imageIds.map(imageIdToURI);\n        return volumeImageURIs.includes(imageURI);\n      });\n    };\n    this.getImageIds = volumeId => {\n      const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n      if (!applicableVolumeActorInfo) {\n        throw new Error(`No actor found for the given volumeId: ${volumeId}`);\n      }\n      const volumeIdToUse = applicableVolumeActorInfo.volumeId;\n      const imageVolume = cache.getVolume(volumeIdToUse);\n      if (!imageVolume) {\n        throw new Error(`imageVolume with id: ${volumeIdToUse} does not exist in cache`);\n      }\n      return imageVolume.imageIds;\n    };\n    this.useCPURendering = getShouldUseCPURendering();\n    this.useNativeDataType = this._shouldUseNativeDataType();\n    if (this.useCPURendering) {\n      throw new Error('VolumeViewports cannot be used whilst CPU Fallback Rendering is enabled.');\n    }\n    const renderer = this.getRenderer();\n    const camera = vtkSlabCamera.newInstance();\n    renderer.setActiveCamera(camera);\n    switch (this.type) {\n      case ViewportType.ORTHOGRAPHIC:\n        camera.setParallelProjection(true);\n        break;\n      case ViewportType.VOLUME_3D:\n        camera.setParallelProjection(true);\n        break;\n      case ViewportType.PERSPECTIVE:\n        camera.setParallelProjection(false);\n        break;\n      default:\n        throw new Error(`Unrecognized viewport type: ${this.type}`);\n    }\n    this.initializeVolumeNewImageEventDispatcher();\n  }\n  static get useCustomRenderingPipeline() {\n    return false;\n  }\n  applyViewOrientation(orientation) {\n    const {\n      viewPlaneNormal,\n      viewUp\n    } = this._getOrientationVectors(orientation);\n    const camera = this.getVtkActiveCamera();\n    camera.setDirectionOfProjection(-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]);\n    camera.setViewUpFrom(viewUp);\n    this.initialViewUp = viewUp;\n    this.resetCamera();\n  }\n  initializeVolumeNewImageEventDispatcher() {\n    const volumeNewImageHandlerBound = volumeNewImageHandler.bind(this);\n    const volumeNewImageCleanUpBound = volumeNewImageCleanUp.bind(this);\n    function volumeNewImageHandler(cameraEvent) {\n      const {\n        viewportId\n      } = cameraEvent.detail;\n      if (viewportId !== this.id || this.isDisabled) {\n        return;\n      }\n      const viewportImageData = this.getImageData();\n      if (!viewportImageData) {\n        return;\n      }\n      volumeNewImageEventDispatcher(cameraEvent);\n    }\n    function volumeNewImageCleanUp(evt) {\n      const {\n        viewportId\n      } = evt.detail;\n      if (viewportId !== this.id) {\n        return;\n      }\n      this.element.removeEventListener(Events.CAMERA_MODIFIED, volumeNewImageHandlerBound);\n      eventTarget.removeEventListener(Events.ELEMENT_DISABLED, volumeNewImageCleanUpBound);\n      resetVolumeNewImageState(viewportId);\n    }\n    this.element.removeEventListener(Events.CAMERA_MODIFIED, volumeNewImageHandlerBound);\n    this.element.addEventListener(Events.CAMERA_MODIFIED, volumeNewImageHandlerBound);\n    eventTarget.addEventListener(Events.ELEMENT_DISABLED, volumeNewImageCleanUpBound);\n  }\n  resetVolumeViewportClippingRange() {\n    const activeCamera = this.getVtkActiveCamera();\n    if (activeCamera.getParallelProjection()) {\n      activeCamera.setClippingRange(-RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE, RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE);\n    } else {\n      activeCamera.setClippingRange(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, RENDERING_DEFAULTS.MAXIMUM_RAY_DISTANCE);\n    }\n  }\n  setVOILUTFunction(voiLUTFunction, volumeId, suppressEvents) {\n    if (Object.values(VOILUTFunctionType).indexOf(voiLUTFunction) === -1) {\n      voiLUTFunction = VOILUTFunctionType.LINEAR;\n    }\n    const {\n      voiRange\n    } = this.getProperties();\n    this.setVOI(voiRange, volumeId, suppressEvents);\n    this.viewportProperties.VOILUTFunction = voiLUTFunction;\n  }\n  setColormap(colormap, volumeId, suppressEvents) {\n    const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n    if (!applicableVolumeActorInfo) {\n      return;\n    }\n    const {\n      volumeActor\n    } = applicableVolumeActorInfo;\n    const mapper = volumeActor.getMapper();\n    mapper.setSampleDistance(1.0);\n    const cfun = vtkColorTransferFunction.newInstance();\n    let colormapObj = colormapUtils.getColormap(colormap.name);\n    const {\n      name\n    } = colormap;\n    if (!colormapObj) {\n      colormapObj = vtkColorMaps.getPresetByName(name);\n    }\n    if (!colormapObj) {\n      throw new Error(`Colormap ${colormap} not found`);\n    }\n    const range = volumeActor.getProperty().getRGBTransferFunction(0).getRange();\n    cfun.applyColorMap(colormapObj);\n    cfun.setMappingRange(range[0], range[1]);\n    volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n    this.viewportProperties.colormap = colormap;\n  }\n  setOpacity(colormap, volumeId) {\n    const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n    if (!applicableVolumeActorInfo) {\n      return;\n    }\n    const {\n      volumeActor\n    } = applicableVolumeActorInfo;\n    const ofun = vtkPiecewiseFunction.newInstance();\n    if (typeof colormap.opacity === 'number') {\n      const range = volumeActor.getProperty().getRGBTransferFunction(0).getRange();\n      ofun.addPoint(range[0], colormap.opacity);\n      ofun.addPoint(range[1], colormap.opacity);\n    } else {\n      colormap.opacity.forEach(({\n        opacity,\n        value\n      }) => {\n        ofun.addPoint(value, opacity);\n      });\n    }\n    volumeActor.getProperty().setScalarOpacity(0, ofun);\n    this.viewportProperties.colormap.opacity = colormap.opacity;\n  }\n  setInvert(inverted, volumeId, suppressEvents) {\n    const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n    if (!applicableVolumeActorInfo) {\n      return;\n    }\n    const volumeIdToUse = applicableVolumeActorInfo.volumeId;\n    const cfun = this._getOrCreateColorTransferFunction(volumeIdToUse);\n    invertRgbTransferFunction(cfun);\n    const {\n      voiRange,\n      VOILUTFunction,\n      invert\n    } = this.getProperties(volumeIdToUse);\n    this.viewportProperties.invert = invert;\n    if (!suppressEvents) {\n      const eventDetail = {\n        viewportId: this.id,\n        range: voiRange,\n        volumeId: volumeIdToUse,\n        VOILUTFunction: VOILUTFunction,\n        invert: invert,\n        invertStateChanged: true\n      };\n      triggerEvent(this.element, Events.VOI_MODIFIED, eventDetail);\n    }\n  }\n  _getOrCreateColorTransferFunction(volumeId) {\n    const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n    if (!applicableVolumeActorInfo) {\n      return null;\n    }\n    const {\n      volumeActor\n    } = applicableVolumeActorInfo;\n    const rgbTransferFunction = volumeActor.getProperty().getRGBTransferFunction(0);\n    if (rgbTransferFunction) {\n      return rgbTransferFunction;\n    }\n    const newRGBTransferFunction = vtkColorTransferFunction.newInstance();\n    volumeActor.getProperty().setRGBTransferFunction(0, newRGBTransferFunction);\n    return newRGBTransferFunction;\n  }\n  setInterpolationType(interpolationType, volumeId) {\n    const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n    if (!applicableVolumeActorInfo) {\n      return;\n    }\n    const {\n      volumeActor\n    } = applicableVolumeActorInfo;\n    const volumeProperty = volumeActor.getProperty();\n    volumeProperty.setInterpolationType(interpolationType);\n    this.viewportProperties.interpolationType = interpolationType;\n  }\n  setVOI(voiRange, volumeId, suppressEvents = false) {\n    const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n    if (!applicableVolumeActorInfo) {\n      return;\n    }\n    const {\n      volumeActor\n    } = applicableVolumeActorInfo;\n    const volumeIdToUse = applicableVolumeActorInfo.volumeId;\n    let voiRangeToUse = voiRange;\n    if (typeof voiRangeToUse === 'undefined') {\n      const imageData = volumeActor.getMapper().getInputData();\n      const range = imageData.getPointData().getScalars().getRange();\n      const maxVoiRange = {\n        lower: range[0],\n        upper: range[1]\n      };\n      voiRangeToUse = maxVoiRange;\n    }\n    const {\n      VOILUTFunction\n    } = this.getProperties(volumeIdToUse);\n    if (VOILUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n      const cfun = createSigmoidRGBTransferFunction(voiRangeToUse);\n      volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n    } else {\n      const {\n        lower,\n        upper\n      } = voiRangeToUse;\n      volumeActor.getProperty().getRGBTransferFunction(0).setRange(lower, upper);\n      if (!this.initialTransferFunctionNodes) {\n        const transferFunction = volumeActor.getProperty().getRGBTransferFunction(0);\n        this.initialTransferFunctionNodes = getTransferFunctionNodes(transferFunction);\n      }\n    }\n    if (!suppressEvents) {\n      const eventDetail = {\n        viewportId: this.id,\n        range: voiRange,\n        volumeId: volumeIdToUse,\n        VOILUTFunction: VOILUTFunction\n      };\n      triggerEvent(this.element, Events.VOI_MODIFIED, eventDetail);\n    }\n    this.viewportProperties.voiRange = voiRangeToUse;\n  }\n  setRotation(rotation) {\n    const previousCamera = this.getCamera();\n    this.rotateCamera(rotation);\n    const camera = this.getCamera();\n    const eventDetail = {\n      previousCamera,\n      camera,\n      element: this.element,\n      viewportId: this.id,\n      renderingEngineId: this.renderingEngineId,\n      rotation\n    };\n    triggerEvent(this.element, Events.CAMERA_MODIFIED, eventDetail);\n    this.viewportProperties.rotation = rotation;\n  }\n  rotateCamera(rotation) {\n    const rotationToApply = rotation - this.getRotation();\n    this.getVtkActiveCamera().roll(-rotationToApply);\n  }\n  setDefaultProperties(ViewportProperties, volumeId) {\n    if (volumeId == null) {\n      this.globalDefaultProperties = ViewportProperties;\n    } else {\n      this.perVolumeIdDefaultProperties.set(volumeId, ViewportProperties);\n    }\n  }\n  clearDefaultProperties(volumeId) {\n    if (volumeId == null) {\n      this.globalDefaultProperties = {};\n      this.resetProperties();\n    } else {\n      this.perVolumeIdDefaultProperties.delete(volumeId);\n      this.resetToDefaultProperties(volumeId);\n    }\n  }\n  setProperties({\n    voiRange,\n    VOILUTFunction,\n    invert,\n    colormap,\n    preset,\n    interpolationType,\n    slabThickness,\n    rotation\n  } = {}, volumeId, suppressEvents = false) {\n    if (this.globalDefaultProperties == null) {\n      this.setDefaultProperties({\n        voiRange,\n        VOILUTFunction,\n        invert,\n        colormap,\n        preset,\n        slabThickness,\n        rotation\n      });\n    }\n    if (colormap?.name) {\n      this.setColormap(colormap, volumeId, suppressEvents);\n    }\n    if (colormap?.opacity != null) {\n      this.setOpacity(colormap, volumeId);\n    }\n    if (voiRange !== undefined) {\n      this.setVOI(voiRange, volumeId, suppressEvents);\n    }\n    if (typeof interpolationType !== 'undefined') {\n      this.setInterpolationType(interpolationType);\n    }\n    if (VOILUTFunction !== undefined) {\n      this.setVOILUTFunction(VOILUTFunction, volumeId, suppressEvents);\n    }\n    if (invert !== undefined && this.viewportProperties.invert !== invert) {\n      this.setInvert(invert, volumeId, suppressEvents);\n    }\n    if (preset !== undefined) {\n      this.setPreset(preset, volumeId, suppressEvents);\n    }\n    if (slabThickness !== undefined) {\n      this.setSlabThickness(slabThickness);\n      this.viewportProperties.slabThickness = slabThickness;\n    }\n    if (rotation !== undefined) {\n      this.setRotation(rotation);\n    }\n  }\n  resetToDefaultProperties(volumeId) {\n    const properties = this.globalDefaultProperties;\n    if (properties.colormap?.name) {\n      this.setColormap(properties.colormap, volumeId);\n    }\n    if (properties.colormap?.opacity != null) {\n      this.setOpacity(properties.colormap, volumeId);\n    }\n    if (properties.voiRange !== undefined) {\n      this.setVOI(properties.voiRange, volumeId);\n    }\n    if (properties.VOILUTFunction !== undefined) {\n      this.setVOILUTFunction(properties.VOILUTFunction, volumeId);\n    }\n    if (properties.invert !== undefined) {\n      this.setInvert(properties.invert, volumeId);\n    }\n    if (properties.slabThickness !== undefined) {\n      this.setSlabThickness(properties.slabThickness);\n      this.viewportProperties.slabThickness = properties.slabThickness;\n    }\n    if (properties.rotation !== undefined) {\n      this.setRotation(properties.rotation);\n    }\n    this.render();\n  }\n  setPreset(presetName, volumeId, suppressEvents) {\n    const applicableVolumeActorInfo = this._getApplicableVolumeActor(volumeId);\n    if (!applicableVolumeActorInfo) {\n      return;\n    }\n    const {\n      volumeActor\n    } = applicableVolumeActorInfo;\n    const preset = VIEWPORT_PRESETS.find(preset => {\n      return preset.name === presetName;\n    });\n    if (!preset) {\n      return;\n    }\n    applyPreset(volumeActor, preset);\n    this.viewportProperties.preset = presetName;\n  }\n  async setVolumes(volumeInputArray, immediate = false, suppressEvents = false) {\n    const firstImageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n    if (!firstImageVolume) {\n      throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist`);\n    }\n    const FrameOfReferenceUID = firstImageVolume.metadata.FrameOfReferenceUID;\n    await this._isValidVolumeInputArray(volumeInputArray, FrameOfReferenceUID);\n    this._FrameOfReferenceUID = FrameOfReferenceUID;\n    const volumeActors = [];\n    for (let i = 0; i < volumeInputArray.length; i++) {\n      const {\n        volumeId,\n        actorUID,\n        slabThickness\n      } = volumeInputArray[i];\n      const actor = await createVolumeActor(volumeInputArray[i], this.element, this.id, suppressEvents, this.useNativeDataType);\n      const uid = actorUID || volumeId;\n      volumeActors.push({\n        uid,\n        actor,\n        slabThickness,\n        referenceId: volumeId\n      });\n    }\n    this._setVolumeActors(volumeActors);\n    this.viewportStatus = ViewportStatus.PRE_RENDER;\n    triggerEvent(this.element, Events.VOLUME_VIEWPORT_NEW_VOLUME, {\n      viewportId: this.id,\n      volumeActors\n    });\n    if (immediate) {\n      this.render();\n    }\n  }\n  async addVolumes(volumeInputArray, immediate = false, suppressEvents = false) {\n    const firstImageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n    if (!firstImageVolume) {\n      throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist`);\n    }\n    const volumeActors = [];\n    await this._isValidVolumeInputArray(volumeInputArray, this._FrameOfReferenceUID);\n    for (let i = 0; i < volumeInputArray.length; i++) {\n      const {\n        volumeId,\n        visibility,\n        actorUID,\n        slabThickness\n      } = volumeInputArray[i];\n      const actor = await createVolumeActor(volumeInputArray[i], this.element, this.id, suppressEvents, this.useNativeDataType);\n      if (visibility === false) {\n        actor.setVisibility(false);\n      }\n      const uid = actorUID || volumeId;\n      volumeActors.push({\n        uid,\n        actor,\n        slabThickness,\n        referenceId: volumeId\n      });\n    }\n    this.addActors(volumeActors);\n    if (immediate) {\n      this.render();\n    }\n  }\n  removeVolumeActors(actorUIDs, immediate = false) {\n    this.removeActors(actorUIDs);\n    if (immediate) {\n      this.render();\n    }\n  }\n  setOrientation(orientation, immediate = true) {\n    console.warn('Method \"setOrientation\" needs implementation');\n  }\n  _getApplicableVolumeActor(volumeId) {\n    if (volumeId !== undefined && !this.getActor(volumeId)) {\n      return;\n    }\n    const actorEntries = this.getActors();\n    if (!actorEntries.length) {\n      return;\n    }\n    let volumeActor;\n    if (volumeId) {\n      volumeActor = this.getActor(volumeId)?.actor;\n    }\n    if (!volumeActor) {\n      volumeActor = actorEntries[0].actor;\n      volumeId = actorEntries[0].uid;\n    }\n    return {\n      volumeActor,\n      volumeId\n    };\n  }\n  async _isValidVolumeInputArray(volumeInputArray, FrameOfReferenceUID) {\n    const numVolumes = volumeInputArray.length;\n    for (let i = 1; i < numVolumes; i++) {\n      const volumeInput = volumeInputArray[i];\n      const imageVolume = await loadVolume(volumeInput.volumeId);\n      if (!imageVolume) {\n        throw new Error(`imageVolume with id: ${imageVolume.volumeId} does not exist`);\n      }\n      if (FrameOfReferenceUID !== imageVolume.metadata.FrameOfReferenceUID) {\n        throw new Error(`Volumes being added to viewport ${this.id} do not share the same FrameOfReferenceUID. This is not yet supported`);\n      }\n    }\n    return true;\n  }\n  getBounds() {\n    const renderer = this.getRenderer();\n    const bounds = renderer.computeVisiblePropBounds();\n    return bounds;\n  }\n  flip(flipDirection) {\n    super.flip(flipDirection);\n  }\n  hasVolumeId(volumeId) {\n    const actorEntries = this.getActors();\n    return actorEntries.some(actorEntry => {\n      return actorEntry.uid === volumeId;\n    });\n  }\n  getImageData(volumeId) {\n    const defaultActor = this.getDefaultActor();\n    if (!defaultActor) {\n      return;\n    }\n    const {\n      uid: defaultActorUID\n    } = defaultActor;\n    volumeId = volumeId ?? defaultActorUID;\n    const actorEntry = this.getActor(volumeId);\n    if (!actorIsA(actorEntry, 'vtkVolume')) {\n      return;\n    }\n    const actor = actorEntry.actor;\n    const volume = cache.getVolume(volumeId);\n    const vtkImageData = actor.getMapper().getInputData();\n    return {\n      dimensions: vtkImageData.getDimensions(),\n      spacing: vtkImageData.getSpacing(),\n      origin: vtkImageData.getOrigin(),\n      direction: vtkImageData.getDirection(),\n      scalarData: vtkImageData.getPointData().getScalars().isDeleted() ? null : vtkImageData.getPointData().getScalars().getData(),\n      imageData: actor.getMapper().getInputData(),\n      metadata: {\n        Modality: volume?.metadata?.Modality\n      },\n      scaling: volume?.scaling,\n      hasPixelSpacing: true\n    };\n  }\n  _setVolumeActors(volumeActorEntries) {\n    for (let i = 0; i < volumeActorEntries.length; i++) {\n      this.viewportProperties.invert = false;\n    }\n    this.setActors(volumeActorEntries);\n  }\n  _getOrientationVectors(orientation) {\n    if (typeof orientation === 'object') {\n      if (orientation.viewPlaneNormal && orientation.viewUp) {\n        return orientation;\n      } else {\n        throw new Error('Invalid orientation object. It must contain viewPlaneNormal and viewUp');\n      }\n    } else if (typeof orientation === 'string' && MPR_CAMERA_VALUES[orientation]) {\n      this.viewportProperties.orientation = orientation;\n      return MPR_CAMERA_VALUES[orientation];\n    } else {\n      throw new Error(`Invalid orientation: ${orientation}. Valid orientations are: ${Object.keys(MPR_CAMERA_VALUES).join(', ')}`);\n    }\n  }\n  getSlabThickness() {\n    const actors = this.getActors();\n    let slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n    actors.forEach(actor => {\n      if (actor.slabThickness > slabThickness) {\n        slabThickness = actor.slabThickness;\n      }\n    });\n    return slabThickness;\n  }\n  getIntensityFromWorld(point) {\n    const actorEntry = this.getDefaultActor();\n    if (!actorIsA(actorEntry, 'vtkVolume')) {\n      return;\n    }\n    const {\n      actor,\n      uid\n    } = actorEntry;\n    const imageData = actor.getMapper().getInputData();\n    const volume = cache.getVolume(uid);\n    const {\n      dimensions\n    } = volume;\n    const index = transformWorldToIndex(imageData, point);\n    const voxelIndex = index[2] * dimensions[0] * dimensions[1] + index[1] * dimensions[0] + index[0];\n    return volume.getScalarData()[voxelIndex];\n  }\n}\nexport default BaseVolumeViewport;","map":{"version":3,"names":["vtkColorTransferFunction","vtkColorMaps","vtkPiecewiseFunction","vec3","cache","MPR_CAMERA_VALUES","RENDERING_DEFAULTS","VIEWPORT_PRESETS","Events","ViewportStatus","VOILUTFunctionType","ViewportType","eventTarget","getShouldUseCPURendering","loadVolume","actorIsA","applyPreset","createSigmoidRGBTransferFunction","getVoiFromSigmoidRGBTransferFunction","imageIdToURI","invertRgbTransferFunction","triggerEvent","colormap","colormapUtils","createVolumeActor","volumeNewImageEventDispatcher","resetVolumeNewImageState","Viewport","vtkSlabCamera","transformWorldToIndex","getTransferFunctionNodes","BaseVolumeViewport","constructor","props","useCPURendering","useNativeDataType","perVolumeIdDefaultProperties","Map","viewportProperties","getDefaultProperties","volumeId","volumeProperties","undefined","get","globalDefaultProperties","getProperties","applicableVolumeActorInfo","_getApplicableVolumeActor","VOILUTFunction","interpolationType","invert","slabThickness","rotation","voiRanges","getActors","map","actorEntry","volumeActor","actor","uid","volume","getVolume","cfun","getProperty","getRGBTransferFunction","lower","upper","getRange","voiRange","filter","Boolean","length","getRotation","viewUp","currentViewUp","viewPlaneNormal","flipVertical","getCamera","initialViewUp","negate","create","initialToCurrentViewUpAngle","angle","Math","PI","initialToCurrentViewUpCross","cross","normalDot","dot","value","getFrameOfReferenceUID","_FrameOfReferenceUID","canvasToWorld","canvasPos","vtkCamera","getVtkActiveCamera","setIsPerformingCoordinateTransformation","renderer","getRenderer","offscreenMultiRenderWindow","getRenderingEngine","openGLRenderWindow","getOpenGLRenderWindow","size","getSize","devicePixelRatio","window","canvasPosWithDPR","displayCoord","sx","sy","worldCoord","displayToWorld","worldToCanvas","worldPos","worldToDisplay","canvasCoord","canvasCoordWithDPR","hasImageURI","imageURI","volumeActors","some","imageIds","volumeImageURIs","includes","getImageIds","Error","volumeIdToUse","imageVolume","_shouldUseNativeDataType","camera","newInstance","setActiveCamera","type","ORTHOGRAPHIC","setParallelProjection","VOLUME_3D","PERSPECTIVE","initializeVolumeNewImageEventDispatcher","useCustomRenderingPipeline","applyViewOrientation","orientation","_getOrientationVectors","setDirectionOfProjection","setViewUpFrom","resetCamera","volumeNewImageHandlerBound","volumeNewImageHandler","bind","volumeNewImageCleanUpBound","volumeNewImageCleanUp","cameraEvent","viewportId","detail","id","isDisabled","viewportImageData","getImageData","evt","element","removeEventListener","CAMERA_MODIFIED","ELEMENT_DISABLED","addEventListener","resetVolumeViewportClippingRange","activeCamera","getParallelProjection","setClippingRange","MAXIMUM_RAY_DISTANCE","MINIMUM_SLAB_THICKNESS","setVOILUTFunction","voiLUTFunction","suppressEvents","Object","values","indexOf","LINEAR","setVOI","setColormap","mapper","getMapper","setSampleDistance","colormapObj","getColormap","name","getPresetByName","range","applyColorMap","setMappingRange","setRGBTransferFunction","setOpacity","ofun","opacity","addPoint","forEach","setScalarOpacity","setInvert","inverted","_getOrCreateColorTransferFunction","eventDetail","invertStateChanged","VOI_MODIFIED","rgbTransferFunction","newRGBTransferFunction","setInterpolationType","volumeProperty","voiRangeToUse","imageData","getInputData","getPointData","getScalars","maxVoiRange","SAMPLED_SIGMOID","setRange","initialTransferFunctionNodes","transferFunction","setRotation","previousCamera","rotateCamera","renderingEngineId","rotationToApply","roll","setDefaultProperties","ViewportProperties","set","clearDefaultProperties","resetProperties","delete","resetToDefaultProperties","setProperties","preset","setPreset","setSlabThickness","properties","render","presetName","find","setVolumes","volumeInputArray","immediate","firstImageVolume","FrameOfReferenceUID","metadata","_isValidVolumeInputArray","i","actorUID","push","referenceId","_setVolumeActors","viewportStatus","PRE_RENDER","VOLUME_VIEWPORT_NEW_VOLUME","addVolumes","visibility","setVisibility","addActors","removeVolumeActors","actorUIDs","removeActors","setOrientation","console","warn","getActor","actorEntries","numVolumes","volumeInput","getBounds","bounds","computeVisiblePropBounds","flip","flipDirection","hasVolumeId","defaultActor","getDefaultActor","defaultActorUID","vtkImageData","dimensions","getDimensions","spacing","getSpacing","origin","getOrigin","direction","getDirection","scalarData","isDeleted","getData","Modality","scaling","hasPixelSpacing","volumeActorEntries","setActors","keys","join","getSlabThickness","actors","getIntensityFromWorld","point","index","voxelIndex","getScalarData"],"sources":["../../../src/RenderingEngine/BaseVolumeViewport.ts"],"sourcesContent":[null],"mappings":";AACA,OAAOA,wBAAwB,MAAM,sDAAsD;AAC3F,OAAOC,YAAY,MAAM,gEAAgE;AACzF,OAAOC,oBAAoB,MAAM,oDAAoD;AAErF,SAASC,IAAI,QAAQ,WAAW;AAEhC,OAAOC,KAAK,MAAM,UAAU;AAC5B,SACEC,iBAAiB,EACjBC,kBAAkB,EAClBC,gBAAgB,QACX,cAAc;AACrB,SAEEC,MAAM,EAGNC,cAAc,EACdC,kBAAkB,QACb,UAAU;AACjB,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,WAAW,MAAM,gBAAgB;AACxC,SAASC,wBAAwB,QAAQ,SAAS;AAClD,SAASC,UAAU,QAAQ,yBAAyB;AAiBpD,SACEC,QAAQ,EACRC,WAAW,EACXC,gCAAgC,EAChCC,oCAAoC,EACpCC,YAAY,EACZC,yBAAyB,EACzBC,YAAY,EACZC,QAAQ,IAAIC,aAAa,QACpB,cAAc;AACrB,SAASC,iBAAiB,QAAQ,WAAW;AAC7C,OAAOC,6BAA6B,IAClCC,wBAAwB,QACnB,yCAAyC;AAChD,OAAOC,QAAQ,MAAM,YAAY;AAEjC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,qBAAqB,MAAM,oCAAoC;AACtE,SAASC,wBAAwB,QAAQ,oCAAoC;AAW7E,MAAeC,kBAAmB,SAAQJ,QAAQ;EAgBhDK,YAAYC,KAAoB;IAC9B,KAAK,CAACA,KAAK,CAAC;IAhBd,KAAAC,eAAe,GAAG,KAAK;IACvB,KAAAC,iBAAiB,GAAG,KAAK;IAMjB,KAAAC,4BAA4B,GAAG,IAAIC,GAAG,EAG3C;IAGO,KAAAC,kBAAkB,GAA6B,EAAE;IAimBpD,KAAAC,oBAAoB,GACzBC,QAAiB,IACW;MAC5B,IAAIC,gBAAgB;MACpB,IAAID,QAAQ,KAAKE,SAAS,EAAE;QAC1BD,gBAAgB,GAAG,IAAI,CAACL,4BAA4B,CAACO,GAAG,CAACH,QAAQ,CAAC;;MAGpE,IAAIC,gBAAgB,KAAKC,SAAS,EAAE;QAClC,OAAOD,gBAAgB;;MAGzB,OAAO;QACL,GAAG,IAAI,CAACG;OACT;IACH,CAAC;IAOM,KAAAC,aAAa,GAAIL,QAAiB,IAA8B;MACrE,MAAMM,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;MAC1E,IAAI,CAACM,yBAAyB,EAAE;QAC9B;;MAGF,MAAM;QACJxB,QAAQ;QACR0B,cAAc;QACdC,iBAAiB;QACjBC,MAAM;QACNC,aAAa;QACbC;MAAQ,CACT,GAAG,IAAI,CAACd,kBAAkB;MAE3B,MAAMe,SAAS,GAAG,IAAI,CAACC,SAAS,EAAE,CAC/BC,GAAG,CAAEC,UAAU,IAAI;QAClB,MAAMC,WAAW,GAAGD,UAAU,CAACE,KAAkB;QACjD,MAAMlB,QAAQ,GAAGgB,UAAU,CAACG,GAAG;QAC/B,MAAMC,MAAM,GAAGxD,KAAK,CAACyD,SAAS,CAACrB,QAAQ,CAAC;QACxC,IAAI,CAACoB,MAAM,EAAE;UACX,OAAO,IAAI;;QAEb,MAAME,IAAI,GAAGL,WAAW,CAACM,WAAW,EAAE,CAACC,sBAAsB,CAAC,CAAC,CAAC;QAChE,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC,GAClB,IAAI,CAAC5B,kBAAkB,EAAEU,cAAc,KAAK,SAAS,GACjD9B,oCAAoC,CAAC4C,IAAI,CAAC,GAC1CA,IAAI,CAACK,QAAQ,EAAE;QACrB,OAAO;UAAE3B,QAAQ;UAAE4B,QAAQ,EAAE;YAAEH,KAAK;YAAEC;UAAK;QAAE,CAAE;MACjD,CAAC,CAAC,CACDG,MAAM,CAACC,OAAO,CAAC;MAElB,MAAMF,QAAQ,GAAGf,SAAS,CAACkB,MAAM,GAAGlB,SAAS,CAAC,CAAC,CAAC,CAACe,QAAQ,GAAG,IAAI;MAEhE,OAAO;QACL9C,QAAQ,EAAEA,QAAQ;QAClB8C,QAAQ,EAAEA,QAAQ;QAClBpB,cAAc,EAAEA,cAAc;QAC9BC,iBAAiB,EAAEA,iBAAiB;QACpCC,MAAM,EAAEA,MAAM;QACdC,aAAa,EAAEA,aAAa;QAC5BC,QAAQ,EAAEA;OACX;IACH,CAAC;IAwOM,KAAAoB,WAAW,GAAG,MAAa;MAChC,MAAM;QACJC,MAAM,EAAEC,aAAa;QACrBC,eAAe;QACfC;MAAY,CACb,GAAG,IAAI,CAACC,SAAS,EAAE;MAGpB,MAAMC,aAAa,GAAGF,YAAY,GAC9BzE,IAAI,CAAC4E,MAAM,CAAC5E,IAAI,CAAC6E,MAAM,EAAE,EAAE,IAAI,CAACF,aAAa,CAAC,GAC9C,IAAI,CAACA,aAAa;MAEtB,IAAI,CAACA,aAAa,EAAE;QAClB,OAAO,CAAC;;MAKV,MAAMG,2BAA2B,GAC9B9E,IAAI,CAAC+E,KAAK,CAACJ,aAAa,EAAEJ,aAAa,CAAC,GAAG,GAAG,GAAIS,IAAI,CAACC,EAAE;MAM5D,MAAMC,2BAA2B,GAAGlF,IAAI,CAACmF,KAAK,CAC5CnF,IAAI,CAAC6E,MAAM,EAAE,EACbF,aAAa,EACbJ,aAAa,CACd;MAID,MAAMa,SAAS,GAAGpF,IAAI,CAACqF,GAAG,CAACH,2BAA2B,EAAEV,eAAe,CAAC;MAExE,MAAMc,KAAK,GACTF,SAAS,IAAI,CAAC,GACVN,2BAA2B,GAC3B,CAAC,GAAG,GAAGA,2BAA2B,IAAI,GAAG;MAE/C,OAAOQ,KAAK;IACd,CAAC;IAmBM,KAAAC,sBAAsB,GAAG,MAAa;MAC3C,OAAO,IAAI,CAACC,oBAAoB;IAClC,CAAC;IAuFM,KAAAC,aAAa,GAAIC,SAAiB,IAAY;MACnD,MAAMC,SAAS,GAAG,IAAI,CAACC,kBAAkB,EAAuB;MAwBhED,SAAS,CAACE,uCAAuC,GAAG,IAAI,CAAC;MAEzD,MAAMC,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;MACnC,MAAMC,0BAA0B,GAC9B,IAAI,CAACC,kBAAkB,EAAE,CAACD,0BAA0B;MACtD,MAAME,kBAAkB,GACtBF,0BAA0B,CAACG,qBAAqB,EAAE;MACpD,MAAMC,IAAI,GAAGF,kBAAkB,CAACG,OAAO,EAAE;MACzC,MAAMC,gBAAgB,GAAGC,MAAM,CAACD,gBAAgB,IAAI,CAAC;MACrD,MAAME,gBAAgB,GAAG,CACvBd,SAAS,CAAC,CAAC,CAAC,GAAGY,gBAAgB,EAC/BZ,SAAS,CAAC,CAAC,CAAC,GAAGY,gBAAgB,CAChC;MACD,MAAMG,YAAY,GAAG,CACnBD,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAACE,EAAE,EAC7BF,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAACG,EAAE,CAC9B;MAGDF,YAAY,CAAC,CAAC,CAAC,GAAGL,IAAI,CAAC,CAAC,CAAC,GAAGK,YAAY,CAAC,CAAC,CAAC;MAE3C,MAAMG,UAAU,GAAGV,kBAAkB,CAACW,cAAc,CAClDJ,YAAY,CAAC,CAAC,CAAC,EACfA,YAAY,CAAC,CAAC,CAAC,EACf,CAAC,EACDX,QAAQ,CACT;MAEDH,SAAS,CAACE,uCAAuC,GAAG,KAAK,CAAC;MAE1D,OAAO,CAACe,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAUM,KAAAE,aAAa,GAAIC,QAAgB,IAAY;MAClD,MAAMpB,SAAS,GAAG,IAAI,CAACC,kBAAkB,EAAuB;MAwBhED,SAAS,CAACE,uCAAuC,GAAG,IAAI,CAAC;MAEzD,MAAMC,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;MACnC,MAAMC,0BAA0B,GAC9B,IAAI,CAACC,kBAAkB,EAAE,CAACD,0BAA0B;MACtD,MAAME,kBAAkB,GACtBF,0BAA0B,CAACG,qBAAqB,EAAE;MACpD,MAAMC,IAAI,GAAGF,kBAAkB,CAACG,OAAO,EAAE;MACzC,MAAMI,YAAY,GAAGP,kBAAkB,CAACc,cAAc,CACpD,GAAGD,QAAQ,EACXjB,QAAQ,CACT;MAGDW,YAAY,CAAC,CAAC,CAAC,GAAGL,IAAI,CAAC,CAAC,CAAC,GAAGK,YAAY,CAAC,CAAC,CAAC;MAE3C,MAAMQ,WAAW,GAAW,CAC1BR,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAACC,EAAE,EACzBD,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAACE,EAAE,CAC1B;MAED,MAAML,gBAAgB,GAAGC,MAAM,CAACD,gBAAgB,IAAI,CAAC;MACrD,MAAMY,kBAAkB,GAAW,CACjCD,WAAW,CAAC,CAAC,CAAC,GAAGX,gBAAgB,EACjCW,WAAW,CAAC,CAAC,CAAC,GAAGX,gBAAgB,CAClC;MAEDX,SAAS,CAACE,uCAAuC,GAAG,KAAK,CAAC;MAE1D,OAAOqB,kBAAkB;IAC3B,CAAC;IAYM,KAAAC,WAAW,GAAIC,QAAgB,IAAa;MACjD,MAAMC,YAAY,GAAG,IAAI,CAAClE,SAAS,EAAE,CAACe,MAAM,CAAEb,UAAU,IACtDzC,QAAQ,CAACyC,UAAU,EAAE,WAAW,CAAC,CAClC;MAED,OAAOgE,YAAY,CAACC,IAAI,CAAC,CAAC;QAAE9D;MAAG,CAAE,KAAI;QACnC,MAAMC,MAAM,GAAGxD,KAAK,CAACyD,SAAS,CAACF,GAAG,CAAC;QAEnC,IAAI,CAACC,MAAM,IAAI,CAACA,MAAM,CAAC8D,QAAQ,EAAE;UAC/B,OAAO,KAAK;;QAGd,MAAMC,eAAe,GAAG/D,MAAM,CAAC8D,QAAQ,CAACnE,GAAG,CAACpC,YAAY,CAAC;QAEzD,OAAOwG,eAAe,CAACC,QAAQ,CAACL,QAAQ,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC;IA6EM,KAAAM,WAAW,GAAIrF,QAAiB,IAAmB;MACxD,MAAMM,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;MAE1E,IAAI,CAACM,yBAAyB,EAAE;QAC9B,MAAM,IAAIgF,KAAK,CAAC,0CAA0CtF,QAAQ,EAAE,CAAC;;MAGvE,MAAMuF,aAAa,GAAGjF,yBAAyB,CAACN,QAAQ;MAExD,MAAMwF,WAAW,GAAG5H,KAAK,CAACyD,SAAS,CAACkE,aAAa,CAAC;MAClD,IAAI,CAACC,WAAW,EAAE;QAChB,MAAM,IAAIF,KAAK,CACb,wBAAwBC,aAAa,0BAA0B,CAChE;;MAGH,OAAOC,WAAW,CAACN,QAAQ;IAC7B,CAAC;IA7wCC,IAAI,CAACxF,eAAe,GAAGrB,wBAAwB,EAAE;IACjD,IAAI,CAACsB,iBAAiB,GAAG,IAAI,CAAC8F,wBAAwB,EAAE;IAExD,IAAI,IAAI,CAAC/F,eAAe,EAAE;MACxB,MAAM,IAAI4F,KAAK,CACb,0EAA0E,CAC3E;;IAGH,MAAM7B,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;IAEnC,MAAMgC,MAAM,GAAGtG,aAAa,CAACuG,WAAW,EAAE;IAC1ClC,QAAQ,CAACmC,eAAe,CAACF,MAAM,CAAC;IAEhC,QAAQ,IAAI,CAACG,IAAI;MACf,KAAK1H,YAAY,CAAC2H,YAAY;QAC5BJ,MAAM,CAACK,qBAAqB,CAAC,IAAI,CAAC;QAClC;MACF,KAAK5H,YAAY,CAAC6H,SAAS;QACzBN,MAAM,CAACK,qBAAqB,CAAC,IAAI,CAAC;QAClC;MACF,KAAK5H,YAAY,CAAC8H,WAAW;QAC3BP,MAAM,CAACK,qBAAqB,CAAC,KAAK,CAAC;QACnC;MACF;QACE,MAAM,IAAIT,KAAK,CAAC,+BAA+B,IAAI,CAACO,IAAI,EAAE,CAAC;;IAG/D,IAAI,CAACK,uCAAuC,EAAE;EAChD;EAEA,WAAWC,0BAA0BA,CAAA;IACnC,OAAO,KAAK;EACd;EAEUC,oBAAoBA,CAC5BC,WAAiD;IAEjD,MAAM;MAAElE,eAAe;MAAEF;IAAM,CAAE,GAC/B,IAAI,CAACqE,sBAAsB,CAACD,WAAW,CAAC;IAC1C,MAAMX,MAAM,GAAG,IAAI,CAACnC,kBAAkB,EAAE;IACxCmC,MAAM,CAACa,wBAAwB,CAC7B,CAACpE,eAAe,CAAC,CAAC,CAAC,EACnB,CAACA,eAAe,CAAC,CAAC,CAAC,EACnB,CAACA,eAAe,CAAC,CAAC,CAAC,CACpB;IACDuD,MAAM,CAACc,aAAa,CAACvE,MAAM,CAAC;IAC5B,IAAI,CAACK,aAAa,GAAGL,MAAM;IAE3B,IAAI,CAACwE,WAAW,EAAE;EACpB;EAEQP,uCAAuCA,CAAA;IAC7C,MAAMQ,0BAA0B,GAAGC,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC;IACnE,MAAMC,0BAA0B,GAAGC,qBAAqB,CAACF,IAAI,CAAC,IAAI,CAAC;IAEnE,SAASD,qBAAqBA,CAACI,WAAW;MACxC,MAAM;QAAEC;MAAU,CAAE,GAAGD,WAAW,CAACE,MAAM;MAEzC,IAAID,UAAU,KAAK,IAAI,CAACE,EAAE,IAAI,IAAI,CAACC,UAAU,EAAE;QAC7C;;MAGF,MAAMC,iBAAiB,GAAG,IAAI,CAACC,YAAY,EAAE;MAE7C,IAAI,CAACD,iBAAiB,EAAE;QACtB;;MAGFnI,6BAA6B,CAAC8H,WAAW,CAAC;IAC5C;IAEA,SAASD,qBAAqBA,CAACQ,GAAG;MAChC,MAAM;QAAEN;MAAU,CAAE,GAAGM,GAAG,CAACL,MAAM;MAEjC,IAAID,UAAU,KAAK,IAAI,CAACE,EAAE,EAAE;QAC1B;;MAGF,IAAI,CAACK,OAAO,CAACC,mBAAmB,CAC9BxJ,MAAM,CAACyJ,eAAe,EACtBf,0BAA0B,CAC3B;MAEDtI,WAAW,CAACoJ,mBAAmB,CAC7BxJ,MAAM,CAAC0J,gBAAgB,EACvBb,0BAA0B,CAC3B;MAED3H,wBAAwB,CAAC8H,UAAU,CAAC;IACtC;IAEA,IAAI,CAACO,OAAO,CAACC,mBAAmB,CAC9BxJ,MAAM,CAACyJ,eAAe,EACtBf,0BAA0B,CAC3B;IACD,IAAI,CAACa,OAAO,CAACI,gBAAgB,CAC3B3J,MAAM,CAACyJ,eAAe,EACtBf,0BAA0B,CAC3B;IAEDtI,WAAW,CAACuJ,gBAAgB,CAC1B3J,MAAM,CAAC0J,gBAAgB,EACvBb,0BAA0B,CAC3B;EACH;EAEUe,gCAAgCA,CAAA;IACxC,MAAMC,YAAY,GAAG,IAAI,CAACtE,kBAAkB,EAAE;IAE9C,IAAIsE,YAAY,CAACC,qBAAqB,EAAE,EAAE;MACxCD,YAAY,CAACE,gBAAgB,CAC3B,CAACjK,kBAAkB,CAACkK,oBAAoB,EACxClK,kBAAkB,CAACkK,oBAAoB,CACxC;KACF,MAAM;MACLH,YAAY,CAACE,gBAAgB,CAC3BjK,kBAAkB,CAACmK,sBAAsB,EACzCnK,kBAAkB,CAACkK,oBAAoB,CACxC;;EAEL;EAUQE,iBAAiBA,CACvBC,cAAkC,EAClCnI,QAAiB,EACjBoI,cAAwB;IAGxB,IAAIC,MAAM,CAACC,MAAM,CAACpK,kBAAkB,CAAC,CAACqK,OAAO,CAACJ,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;MACpEA,cAAc,GAAGjK,kBAAkB,CAACsK,MAAM;;IAE5C,MAAM;MAAE5G;IAAQ,CAAE,GAAG,IAAI,CAACvB,aAAa,EAAE;IACzC,IAAI,CAACoI,MAAM,CAAC7G,QAAQ,EAAE5B,QAAQ,EAAEoI,cAAc,CAAC;IAC/C,IAAI,CAACtI,kBAAkB,CAACU,cAAc,GAAG2H,cAAc;EACzD;EAWQO,WAAWA,CACjB5J,QAAwB,EACxBkB,QAAgB,EAChBoI,cAAwB;IAExB,MAAM9H,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;IAC1E,IAAI,CAACM,yBAAyB,EAAE;MAC9B;;IAGF,MAAM;MAAEW;IAAW,CAAE,GAAGX,yBAAyB;IAEjD,MAAMqI,MAAM,GAAG1H,WAAW,CAAC2H,SAAS,EAAE;IACtCD,MAAM,CAACE,iBAAiB,CAAC,GAAG,CAAC;IAE7B,MAAMvH,IAAI,GAAG9D,wBAAwB,CAACmI,WAAW,EAAE;IACnD,IAAImD,WAAW,GAAG/J,aAAa,CAACgK,WAAW,CAACjK,QAAQ,CAACkK,IAAI,CAAC;IAE1D,MAAM;MAAEA;IAAI,CAAE,GAAGlK,QAAQ;IAEzB,IAAI,CAACgK,WAAW,EAAE;MAChBA,WAAW,GAAGrL,YAAY,CAACwL,eAAe,CAACD,IAAI,CAAC;;IAGlD,IAAI,CAACF,WAAW,EAAE;MAChB,MAAM,IAAIxD,KAAK,CAAC,YAAYxG,QAAQ,YAAY,CAAC;;IAGnD,MAAMoK,KAAK,GAAGjI,WAAW,CACtBM,WAAW,EAAE,CACbC,sBAAsB,CAAC,CAAC,CAAC,CACzBG,QAAQ,EAAE;IAEbL,IAAI,CAAC6H,aAAa,CAACL,WAAW,CAAC;IAC/BxH,IAAI,CAAC8H,eAAe,CAACF,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IACxCjI,WAAW,CAACM,WAAW,EAAE,CAAC8H,sBAAsB,CAAC,CAAC,EAAE/H,IAAI,CAAC;IAEzD,IAAI,CAACxB,kBAAkB,CAAChB,QAAQ,GAAGA,QAAQ;EAC7C;EAUQwK,UAAUA,CAACxK,QAAwB,EAAEkB,QAAgB;IAC3D,MAAMM,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;IAC1E,IAAI,CAACM,yBAAyB,EAAE;MAC9B;;IAEF,MAAM;MAAEW;IAAW,CAAE,GAAGX,yBAAyB;IAEjD,MAAMiJ,IAAI,GAAG7L,oBAAoB,CAACiI,WAAW,EAAE;IAC/C,IAAI,OAAO7G,QAAQ,CAAC0K,OAAO,KAAK,QAAQ,EAAE;MACxC,MAAMN,KAAK,GAAGjI,WAAW,CACtBM,WAAW,EAAE,CACbC,sBAAsB,CAAC,CAAC,CAAC,CACzBG,QAAQ,EAAE;MAEb4H,IAAI,CAACE,QAAQ,CAACP,KAAK,CAAC,CAAC,CAAC,EAAEpK,QAAQ,CAAC0K,OAAO,CAAC;MACzCD,IAAI,CAACE,QAAQ,CAACP,KAAK,CAAC,CAAC,CAAC,EAAEpK,QAAQ,CAAC0K,OAAO,CAAC;KAC1C,MAAM;MACL1K,QAAQ,CAAC0K,OAAO,CAACE,OAAO,CAAC,CAAC;QAAEF,OAAO;QAAEvG;MAAK,CAAE,KAAI;QAC9CsG,IAAI,CAACE,QAAQ,CAACxG,KAAK,EAAEuG,OAAO,CAAC;MAC/B,CAAC,CAAC;;IAEJvI,WAAW,CAACM,WAAW,EAAE,CAACoI,gBAAgB,CAAC,CAAC,EAAEJ,IAAI,CAAC;IAEnD,IAAI,CAACzJ,kBAAkB,CAAChB,QAAQ,CAAC0K,OAAO,GAAG1K,QAAQ,CAAC0K,OAAO;EAC7D;EAWQI,SAASA,CACfC,QAAiB,EACjB7J,QAAiB,EACjBoI,cAAwB;IAExB,MAAM9H,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;IAE1E,IAAI,CAACM,yBAAyB,EAAE;MAC9B;;IAGF,MAAMiF,aAAa,GAAGjF,yBAAyB,CAACN,QAAQ;IAExD,MAAMsB,IAAI,GAAG,IAAI,CAACwI,iCAAiC,CAACvE,aAAa,CAAC;IAClE3G,yBAAyB,CAAC0C,IAAI,CAAC;IAE/B,MAAM;MAAEM,QAAQ;MAAEpB,cAAc;MAAEE;IAAM,CAAE,GACxC,IAAI,CAACL,aAAa,CAACkF,aAAa,CAAC;IAEnC,IAAI,CAACzF,kBAAkB,CAACY,MAAM,GAAGA,MAAM;IAEvC,IAAI,CAAC0H,cAAc,EAAE;MACnB,MAAM2B,WAAW,GAA2B;QAC1C/C,UAAU,EAAE,IAAI,CAACE,EAAE;QACnBgC,KAAK,EAAEtH,QAAQ;QACf5B,QAAQ,EAAEuF,aAAa;QACvB/E,cAAc,EAAEA,cAAc;QAC9BE,MAAM,EAAEA,MAAM;QACdsJ,kBAAkB,EAAE;OACrB;MAEDnL,YAAY,CAAC,IAAI,CAAC0I,OAAO,EAAEvJ,MAAM,CAACiM,YAAY,EAAEF,WAAW,CAAC;;EAEhE;EAEQD,iCAAiCA,CACvC9J,QAAgB;IAEhB,MAAMM,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;IAE1E,IAAI,CAACM,yBAAyB,EAAE;MAC9B,OAAO,IAAI;;IAGb,MAAM;MAAEW;IAAW,CAAE,GAAGX,yBAAyB;IAEjD,MAAM4J,mBAAmB,GAAGjJ,WAAW,CACpCM,WAAW,EAAE,CACbC,sBAAsB,CAAC,CAAC,CAAC;IAE5B,IAAI0I,mBAAmB,EAAE;MACvB,OAAOA,mBAAmB;;IAG5B,MAAMC,sBAAsB,GAAG3M,wBAAwB,CAACmI,WAAW,EAAE;IACrE1E,WAAW,CAACM,WAAW,EAAE,CAAC8H,sBAAsB,CAAC,CAAC,EAAEc,sBAAsB,CAAC;IAE3E,OAAOA,sBAAsB;EAC/B;EAEQC,oBAAoBA,CAC1B3J,iBAAoC,EACpCT,QAAiB;IAEjB,MAAMM,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;IAE1E,IAAI,CAACM,yBAAyB,EAAE;MAC9B;;IAGF,MAAM;MAAEW;IAAW,CAAE,GAAGX,yBAAyB;IACjD,MAAM+J,cAAc,GAAGpJ,WAAW,CAACM,WAAW,EAAE;IAGhD8I,cAAc,CAACD,oBAAoB,CAAC3J,iBAAiB,CAAC;IACtD,IAAI,CAACX,kBAAkB,CAACW,iBAAiB,GAAGA,iBAAiB;EAC/D;EAUQgI,MAAMA,CACZ7G,QAAkB,EAClB5B,QAAiB,EACjBoI,cAAc,GAAG,KAAK;IAEtB,MAAM9H,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;IAE1E,IAAI,CAACM,yBAAyB,EAAE;MAC9B;;IAGF,MAAM;MAAEW;IAAW,CAAE,GAAGX,yBAAyB;IACjD,MAAMiF,aAAa,GAAGjF,yBAAyB,CAACN,QAAQ;IAExD,IAAIsK,aAAa,GAAG1I,QAAQ;IAC5B,IAAI,OAAO0I,aAAa,KAAK,WAAW,EAAE;MACxC,MAAMC,SAAS,GAAGtJ,WAAW,CAAC2H,SAAS,EAAE,CAAC4B,YAAY,EAAE;MACxD,MAAMtB,KAAK,GAAGqB,SAAS,CAACE,YAAY,EAAE,CAACC,UAAU,EAAE,CAAC/I,QAAQ,EAAE;MAC9D,MAAMgJ,WAAW,GAAG;QAAElJ,KAAK,EAAEyH,KAAK,CAAC,CAAC,CAAC;QAAExH,KAAK,EAAEwH,KAAK,CAAC,CAAC;MAAC,CAAE;MACxDoB,aAAa,GAAGK,WAAW;;IAG7B,MAAM;MAAEnK;IAAc,CAAE,GAAG,IAAI,CAACH,aAAa,CAACkF,aAAa,CAAC;IAI5D,IAAI/E,cAAc,KAAKtC,kBAAkB,CAAC0M,eAAe,EAAE;MACzD,MAAMtJ,IAAI,GAAG7C,gCAAgC,CAAC6L,aAAa,CAAC;MAC5DrJ,WAAW,CAACM,WAAW,EAAE,CAAC8H,sBAAsB,CAAC,CAAC,EAAE/H,IAAI,CAAC;KAC1D,MAAM;MAQL,MAAM;QAAEG,KAAK;QAAEC;MAAK,CAAE,GAAG4I,aAAa;MACtCrJ,WAAW,CACRM,WAAW,EAAE,CACbC,sBAAsB,CAAC,CAAC,CAAC,CACzBqJ,QAAQ,CAACpJ,KAAK,EAAEC,KAAK,CAAC;MAEzB,IAAI,CAAC,IAAI,CAACoJ,4BAA4B,EAAE;QACtC,MAAMC,gBAAgB,GAAG9J,WAAW,CACjCM,WAAW,EAAE,CACbC,sBAAsB,CAAC,CAAC,CAAC;QAC5B,IAAI,CAACsJ,4BAA4B,GAC/BxL,wBAAwB,CAACyL,gBAAgB,CAAC;;;IAIhD,IAAI,CAAC3C,cAAc,EAAE;MACnB,MAAM2B,WAAW,GAA2B;QAC1C/C,UAAU,EAAE,IAAI,CAACE,EAAE;QACnBgC,KAAK,EAAEtH,QAAQ;QACf5B,QAAQ,EAAEuF,aAAa;QACvB/E,cAAc,EAAEA;OACjB;MAED3B,YAAY,CAAC,IAAI,CAAC0I,OAAO,EAAEvJ,MAAM,CAACiM,YAAY,EAAEF,WAAW,CAAC;;IAG9D,IAAI,CAACjK,kBAAkB,CAAC8B,QAAQ,GAAG0I,aAAa;EAClD;EAEQU,WAAWA,CAACpK,QAAgB;IAClC,MAAMqK,cAAc,GAAG,IAAI,CAAC5I,SAAS,EAAE;IAEvC,IAAI,CAAC6I,YAAY,CAACtK,QAAQ,CAAC;IAG3B,MAAM8E,MAAM,GAAG,IAAI,CAACrD,SAAS,EAAE;IAE/B,MAAM0H,WAAW,GAAyC;MACxDkB,cAAc;MACdvF,MAAM;MACN6B,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBP,UAAU,EAAE,IAAI,CAACE,EAAE;MACnBiE,iBAAiB,EAAE,IAAI,CAACA,iBAAiB;MACzCvK;KACD;IAED/B,YAAY,CAAC,IAAI,CAAC0I,OAAO,EAAEvJ,MAAM,CAACyJ,eAAe,EAAEsC,WAAW,CAAC;IAC/D,IAAI,CAACjK,kBAAkB,CAACc,QAAQ,GAAGA,QAAQ;EAC7C;EAEQsK,YAAYA,CAACtK,QAAgB;IACnC,MAAMwK,eAAe,GAAGxK,QAAQ,GAAG,IAAI,CAACoB,WAAW,EAAE;IAErD,IAAI,CAACuB,kBAAkB,EAAE,CAAC8H,IAAI,CAAC,CAACD,eAAe,CAAC;EAClD;EAOOE,oBAAoBA,CACzBC,kBAA4C,EAC5CvL,QAAiB;IAEjB,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpB,IAAI,CAACI,uBAAuB,GAAGmL,kBAAkB;KAClD,MAAM;MACL,IAAI,CAAC3L,4BAA4B,CAAC4L,GAAG,CAACxL,QAAQ,EAAEuL,kBAAkB,CAAC;;EAEvE;EAOOE,sBAAsBA,CAACzL,QAAiB;IAC7C,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpB,IAAI,CAACI,uBAAuB,GAAG,EAAE;MACjC,IAAI,CAACsL,eAAe,EAAE;KACvB,MAAM;MACL,IAAI,CAAC9L,4BAA4B,CAAC+L,MAAM,CAAC3L,QAAQ,CAAC;MAClD,IAAI,CAAC4L,wBAAwB,CAAC5L,QAAQ,CAAC;;EAE3C;EAgBO6L,aAAaA,CAClB;IACEjK,QAAQ;IACRpB,cAAc;IACdE,MAAM;IACN5B,QAAQ;IACRgN,MAAM;IACNrL,iBAAiB;IACjBE,aAAa;IACbC;EAAQ,IACoB,EAAE,EAChCZ,QAAiB,EACjBoI,cAAc,GAAG,KAAK;IAGtB,IAAI,IAAI,CAAChI,uBAAuB,IAAI,IAAI,EAAE;MACxC,IAAI,CAACkL,oBAAoB,CAAC;QACxB1J,QAAQ;QACRpB,cAAc;QACdE,MAAM;QACN5B,QAAQ;QACRgN,MAAM;QACNnL,aAAa;QACbC;OACD,CAAC;;IAMJ,IAAI9B,QAAQ,EAAEkK,IAAI,EAAE;MAClB,IAAI,CAACN,WAAW,CAAC5J,QAAQ,EAAEkB,QAAQ,EAAEoI,cAAc,CAAC;;IAEtD,IAAItJ,QAAQ,EAAE0K,OAAO,IAAI,IAAI,EAAE;MAC7B,IAAI,CAACF,UAAU,CAACxK,QAAQ,EAAEkB,QAAQ,CAAC;;IAGrC,IAAI4B,QAAQ,KAAK1B,SAAS,EAAE;MAC1B,IAAI,CAACuI,MAAM,CAAC7G,QAAQ,EAAE5B,QAAQ,EAAEoI,cAAc,CAAC;;IAGjD,IAAI,OAAO3H,iBAAiB,KAAK,WAAW,EAAE;MAC5C,IAAI,CAAC2J,oBAAoB,CAAC3J,iBAAiB,CAAC;;IAG9C,IAAID,cAAc,KAAKN,SAAS,EAAE;MAChC,IAAI,CAACgI,iBAAiB,CAAC1H,cAAc,EAAER,QAAQ,EAAEoI,cAAc,CAAC;;IAGlE,IAAI1H,MAAM,KAAKR,SAAS,IAAI,IAAI,CAACJ,kBAAkB,CAACY,MAAM,KAAKA,MAAM,EAAE;MACrE,IAAI,CAACkJ,SAAS,CAAClJ,MAAM,EAAEV,QAAQ,EAAEoI,cAAc,CAAC;;IAGlD,IAAI0D,MAAM,KAAK5L,SAAS,EAAE;MACxB,IAAI,CAAC6L,SAAS,CAACD,MAAM,EAAE9L,QAAQ,EAAEoI,cAAc,CAAC;;IAGlD,IAAIzH,aAAa,KAAKT,SAAS,EAAE;MAC/B,IAAI,CAAC8L,gBAAgB,CAACrL,aAAa,CAAC;MAEpC,IAAI,CAACb,kBAAkB,CAACa,aAAa,GAAGA,aAAa;;IAGvD,IAAIC,QAAQ,KAAKV,SAAS,EAAE;MAC1B,IAAI,CAAC8K,WAAW,CAACpK,QAAQ,CAAC;;EAE9B;EAKOgL,wBAAwBA,CAAC5L,QAAgB;IAC9C,MAAMiM,UAAU,GAAG,IAAI,CAAC7L,uBAAuB;IAE/C,IAAI6L,UAAU,CAACnN,QAAQ,EAAEkK,IAAI,EAAE;MAC7B,IAAI,CAACN,WAAW,CAACuD,UAAU,CAACnN,QAAQ,EAAEkB,QAAQ,CAAC;;IAEjD,IAAIiM,UAAU,CAACnN,QAAQ,EAAE0K,OAAO,IAAI,IAAI,EAAE;MACxC,IAAI,CAACF,UAAU,CAAC2C,UAAU,CAACnN,QAAQ,EAAEkB,QAAQ,CAAC;;IAGhD,IAAIiM,UAAU,CAACrK,QAAQ,KAAK1B,SAAS,EAAE;MACrC,IAAI,CAACuI,MAAM,CAACwD,UAAU,CAACrK,QAAQ,EAAE5B,QAAQ,CAAC;;IAG5C,IAAIiM,UAAU,CAACzL,cAAc,KAAKN,SAAS,EAAE;MAC3C,IAAI,CAACgI,iBAAiB,CAAC+D,UAAU,CAACzL,cAAc,EAAER,QAAQ,CAAC;;IAG7D,IAAIiM,UAAU,CAACvL,MAAM,KAAKR,SAAS,EAAE;MACnC,IAAI,CAAC0J,SAAS,CAACqC,UAAU,CAACvL,MAAM,EAAEV,QAAQ,CAAC;;IAG7C,IAAIiM,UAAU,CAACtL,aAAa,KAAKT,SAAS,EAAE;MAC1C,IAAI,CAAC8L,gBAAgB,CAACC,UAAU,CAACtL,aAAa,CAAC;MAE/C,IAAI,CAACb,kBAAkB,CAACa,aAAa,GAAGsL,UAAU,CAACtL,aAAa;;IAGlE,IAAIsL,UAAU,CAACrL,QAAQ,KAAKV,SAAS,EAAE;MACrC,IAAI,CAAC8K,WAAW,CAACiB,UAAU,CAACrL,QAAQ,CAAC;;IAGvC,IAAI,CAACsL,MAAM,EAAE;EACf;EAWQH,SAASA,CAACI,UAAU,EAAEnM,QAAQ,EAAEoI,cAAc;IACpD,MAAM9H,yBAAyB,GAAG,IAAI,CAACC,yBAAyB,CAACP,QAAQ,CAAC;IAE1E,IAAI,CAACM,yBAAyB,EAAE;MAC9B;;IAGF,MAAM;MAAEW;IAAW,CAAE,GAAGX,yBAAyB;IAEjD,MAAMwL,MAAM,GAAG/N,gBAAgB,CAACqO,IAAI,CAAEN,MAAM,IAAI;MAC9C,OAAOA,MAAM,CAAC9C,IAAI,KAAKmD,UAAU;IACnC,CAAC,CAAC;IAEF,IAAI,CAACL,MAAM,EAAE;MACX;;IAGFtN,WAAW,CAACyC,WAAW,EAAE6K,MAAM,CAAC;IAEhC,IAAI,CAAChM,kBAAkB,CAACgM,MAAM,GAAGK,UAAU;EAC7C;EAoFO,MAAME,UAAUA,CACrBC,gBAAqC,EACrCC,SAAS,GAAG,KAAK,EACjBnE,cAAc,GAAG,KAAK;IAEtB,MAAMoE,gBAAgB,GAAG5O,KAAK,CAACyD,SAAS,CAACiL,gBAAgB,CAAC,CAAC,CAAC,CAACtM,QAAQ,CAAC;IAEtE,IAAI,CAACwM,gBAAgB,EAAE;MACrB,MAAM,IAAIlH,KAAK,CACb,wBAAwBkH,gBAAgB,CAACxM,QAAQ,iBAAiB,CACnE;;IAGH,MAAMyM,mBAAmB,GAAGD,gBAAgB,CAACE,QAAQ,CAACD,mBAAmB;IAEzE,MAAM,IAAI,CAACE,wBAAwB,CAACL,gBAAgB,EAAEG,mBAAmB,CAAC;IAE1E,IAAI,CAACtJ,oBAAoB,GAAGsJ,mBAAmB;IAE/C,MAAMzH,YAAY,GAAG,EAAE;IAGvB,KAAK,IAAI4H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,gBAAgB,CAACvK,MAAM,EAAE6K,CAAC,EAAE,EAAE;MAChD,MAAM;QAAE5M,QAAQ;QAAE6M,QAAQ;QAAElM;MAAa,CAAE,GAAG2L,gBAAgB,CAACM,CAAC,CAAC;MAEjE,MAAM1L,KAAK,GAAG,MAAMlC,iBAAiB,CACnCsN,gBAAgB,CAACM,CAAC,CAAC,EACnB,IAAI,CAACrF,OAAO,EACZ,IAAI,CAACL,EAAE,EACPkB,cAAc,EACd,IAAI,CAACzI,iBAAiB,CACvB;MAOD,MAAMwB,GAAG,GAAG0L,QAAQ,IAAI7M,QAAQ;MAChCgF,YAAY,CAAC8H,IAAI,CAAC;QAChB3L,GAAG;QACHD,KAAK;QACLP,aAAa;QACboM,WAAW,EAAE/M;OACd,CAAC;;IAGJ,IAAI,CAACgN,gBAAgB,CAAChI,YAAY,CAAC;IACnC,IAAI,CAACiI,cAAc,GAAGhP,cAAc,CAACiP,UAAU;IAE/CrO,YAAY,CAAC,IAAI,CAAC0I,OAAO,EAAEvJ,MAAM,CAACmP,0BAA0B,EAAE;MAC5DnG,UAAU,EAAE,IAAI,CAACE,EAAE;MACnBlC;KACD,CAAC;IAEF,IAAIuH,SAAS,EAAE;MACb,IAAI,CAACL,MAAM,EAAE;;EAEjB;EASO,MAAMkB,UAAUA,CACrBd,gBAAqC,EACrCC,SAAS,GAAG,KAAK,EACjBnE,cAAc,GAAG,KAAK;IAEtB,MAAMoE,gBAAgB,GAAG5O,KAAK,CAACyD,SAAS,CAACiL,gBAAgB,CAAC,CAAC,CAAC,CAACtM,QAAQ,CAAC;IAEtE,IAAI,CAACwM,gBAAgB,EAAE;MACrB,MAAM,IAAIlH,KAAK,CACb,wBAAwBkH,gBAAgB,CAACxM,QAAQ,iBAAiB,CACnE;;IAEH,MAAMgF,YAAY,GAAG,EAAE;IAEvB,MAAM,IAAI,CAAC2H,wBAAwB,CACjCL,gBAAgB,EAChB,IAAI,CAACnJ,oBAAoB,CAC1B;IAGD,KAAK,IAAIyJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,gBAAgB,CAACvK,MAAM,EAAE6K,CAAC,EAAE,EAAE;MAChD,MAAM;QAAE5M,QAAQ;QAAEqN,UAAU;QAAER,QAAQ;QAAElM;MAAa,CAAE,GACrD2L,gBAAgB,CAACM,CAAC,CAAC;MAErB,MAAM1L,KAAK,GAAG,MAAMlC,iBAAiB,CACnCsN,gBAAgB,CAACM,CAAC,CAAC,EACnB,IAAI,CAACrF,OAAO,EACZ,IAAI,CAACL,EAAE,EACPkB,cAAc,EACd,IAAI,CAACzI,iBAAiB,CACvB;MAED,IAAI0N,UAAU,KAAK,KAAK,EAAE;QACxBnM,KAAK,CAACoM,aAAa,CAAC,KAAK,CAAC;;MAQ5B,MAAMnM,GAAG,GAAG0L,QAAQ,IAAI7M,QAAQ;MAChCgF,YAAY,CAAC8H,IAAI,CAAC;QAChB3L,GAAG;QACHD,KAAK;QACLP,aAAa;QAMboM,WAAW,EAAE/M;OACd,CAAC;;IAGJ,IAAI,CAACuN,SAAS,CAACvI,YAAY,CAAC;IAE5B,IAAIuH,SAAS,EAAE;MAEb,IAAI,CAACL,MAAM,EAAE;;EAEjB;EAUOsB,kBAAkBA,CAACC,SAAwB,EAAElB,SAAS,GAAG,KAAK;IAEnE,IAAI,CAACmB,YAAY,CAACD,SAAS,CAAC;IAE5B,IAAIlB,SAAS,EAAE;MACb,IAAI,CAACL,MAAM,EAAE;;EAEjB;EAWOyB,cAAcA,CAACtH,WAA4B,EAAEkG,SAAS,GAAG,IAAI;IAClEqB,OAAO,CAACC,IAAI,CAAC,8CAA8C,CAAC;EAC9D;EAEQtN,yBAAyBA,CAACP,QAAiB;IACjD,IAAIA,QAAQ,KAAKE,SAAS,IAAI,CAAC,IAAI,CAAC4N,QAAQ,CAAC9N,QAAQ,CAAC,EAAE;MACtD;;IAGF,MAAM+N,YAAY,GAAG,IAAI,CAACjN,SAAS,EAAE;IAErC,IAAI,CAACiN,YAAY,CAAChM,MAAM,EAAE;MACxB;;IAGF,IAAId,WAAW;IAEf,IAAIjB,QAAQ,EAAE;MACZiB,WAAW,GAAG,IAAI,CAAC6M,QAAQ,CAAC9N,QAAQ,CAAC,EAAEkB,KAAkB;;IAI3D,IAAI,CAACD,WAAW,EAAE;MAChBA,WAAW,GAAG8M,YAAY,CAAC,CAAC,CAAC,CAAC7M,KAAkB;MAChDlB,QAAQ,GAAG+N,YAAY,CAAC,CAAC,CAAC,CAAC5M,GAAG;;IAGhC,OAAO;MAAEF,WAAW;MAAEjB;IAAQ,CAAE;EAClC;EAEQ,MAAM2M,wBAAwBA,CACpCL,gBAAqC,EACrCG,mBAA2B;IAE3B,MAAMuB,UAAU,GAAG1B,gBAAgB,CAACvK,MAAM;IAG1C,KAAK,IAAI6K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,UAAU,EAAEpB,CAAC,EAAE,EAAE;MACnC,MAAMqB,WAAW,GAAG3B,gBAAgB,CAACM,CAAC,CAAC;MAEvC,MAAMpH,WAAW,GAAG,MAAMlH,UAAU,CAAC2P,WAAW,CAACjO,QAAQ,CAAC;MAE1D,IAAI,CAACwF,WAAW,EAAE;QAChB,MAAM,IAAIF,KAAK,CACb,wBAAwBE,WAAW,CAACxF,QAAQ,iBAAiB,CAC9D;;MAGH,IAAIyM,mBAAmB,KAAKjH,WAAW,CAACkH,QAAQ,CAACD,mBAAmB,EAAE;QACpE,MAAM,IAAInH,KAAK,CACb,mCAAmC,IAAI,CAAC4B,EAAE,uEAAuE,CAClH;;;IAIL,OAAO,IAAI;EACb;EAuDOgH,SAASA,CAAA;IACd,MAAMzK,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;IACnC,MAAMyK,MAAM,GAAG1K,QAAQ,CAAC2K,wBAAwB,EAAE;IAClD,OAAOD,MAAM;EACf;EAMOE,IAAIA,CAACC,aAA4B;IACtC,KAAK,CAACD,IAAI,CAACC,aAAa,CAAC;EAC3B;EAWOC,WAAWA,CAACvO,QAAgB;IAGjC,MAAM+N,YAAY,GAAG,IAAI,CAACjN,SAAS,EAAE;IACrC,OAAOiN,YAAY,CAAC9I,IAAI,CAAEjE,UAAU,IAAI;MACtC,OAAOA,UAAU,CAACG,GAAG,KAAKnB,QAAQ;IACpC,CAAC,CAAC;EACJ;EAaOqH,YAAYA,CAACrH,QAAiB;IACnC,MAAMwO,YAAY,GAAG,IAAI,CAACC,eAAe,EAAE;IAC3C,IAAI,CAACD,YAAY,EAAE;MACjB;;IAGF,MAAM;MAAErN,GAAG,EAAEuN;IAAe,CAAE,GAAGF,YAAY;IAC7CxO,QAAQ,GAAGA,QAAQ,IAAI0O,eAAe;IAEtC,MAAM1N,UAAU,GAAG,IAAI,CAAC8M,QAAQ,CAAC9N,QAAQ,CAAC;IAE1C,IAAI,CAACzB,QAAQ,CAACyC,UAAU,EAAE,WAAW,CAAC,EAAE;MACtC;;IAGF,MAAME,KAAK,GAAGF,UAAU,CAACE,KAAK;IAC9B,MAAME,MAAM,GAAGxD,KAAK,CAACyD,SAAS,CAACrB,QAAQ,CAAC;IAExC,MAAM2O,YAAY,GAAGzN,KAAK,CAAC0H,SAAS,EAAE,CAAC4B,YAAY,EAAE;IACrD,OAAO;MACLoE,UAAU,EAAED,YAAY,CAACE,aAAa,EAAE;MACxCC,OAAO,EAAEH,YAAY,CAACI,UAAU,EAAE;MAClCC,MAAM,EAAEL,YAAY,CAACM,SAAS,EAAE;MAChCC,SAAS,EAAEP,YAAY,CAACQ,YAAY,EAAE;MACtCC,UAAU,EAAET,YAAY,CAAClE,YAAY,EAAE,CAACC,UAAU,EAAE,CAAC2E,SAAS,EAAE,GAC5D,IAAI,GACJV,YAAY,CAAClE,YAAY,EAAE,CAACC,UAAU,EAAE,CAAC4E,OAAO,EAAE;MACtD/E,SAAS,EAAErJ,KAAK,CAAC0H,SAAS,EAAE,CAAC4B,YAAY,EAAE;MAC3CkC,QAAQ,EAAE;QACR6C,QAAQ,EAAEnO,MAAM,EAAEsL,QAAQ,EAAE6C;OAC7B;MACDC,OAAO,EAAEpO,MAAM,EAAEoO,OAAO;MACxBC,eAAe,EAAE;KAClB;EACH;EAQQzC,gBAAgBA,CAAC0C,kBAAqC;IAG5D,KAAK,IAAI9C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8C,kBAAkB,CAAC3N,MAAM,EAAE6K,CAAC,EAAE,EAAE;MAClD,IAAI,CAAC9M,kBAAkB,CAACY,MAAM,GAAG,KAAK;;IAExC,IAAI,CAACiP,SAAS,CAACD,kBAAkB,CAAC;EACpC;EAkKUpJ,sBAAsBA,CAC9BD,WAAiD;IAEjD,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACnC,IAAIA,WAAW,CAAClE,eAAe,IAAIkE,WAAW,CAACpE,MAAM,EAAE;QACrD,OAAOoE,WAAW;OACnB,MAAM;QACL,MAAM,IAAIf,KAAK,CACb,wEAAwE,CACzE;;KAEJ,MAAM,IACL,OAAOe,WAAW,KAAK,QAAQ,IAC/BxI,iBAAiB,CAACwI,WAAW,CAAC,EAC9B;MACA,IAAI,CAACvG,kBAAkB,CAACuG,WAAW,GAAGA,WAAW;MACjD,OAAOxI,iBAAiB,CAACwI,WAAW,CAAC;KACtC,MAAM;MACL,MAAM,IAAIf,KAAK,CACb,wBAAwBe,WAAW,6BAA6BgC,MAAM,CAACuH,IAAI,CACzE/R,iBAAiB,CAClB,CAACgS,IAAI,CAAC,IAAI,CAAC,EAAE,CACf;;EAEL;EAMOC,gBAAgBA,CAAA;IACrB,MAAMC,MAAM,GAAG,IAAI,CAACjP,SAAS,EAAE;IAC/B,IAAIH,aAAa,GAAG7C,kBAAkB,CAACmK,sBAAsB;IAC7D8H,MAAM,CAACrG,OAAO,CAAExI,KAAK,IAAI;MACvB,IAAIA,KAAK,CAACP,aAAa,GAAGA,aAAa,EAAE;QACvCA,aAAa,GAAGO,KAAK,CAACP,aAAa;;IAEvC,CAAC,CAAC;IAEF,OAAOA,aAAa;EACtB;EAOOqP,qBAAqBA,CAACC,KAAa;IACxC,MAAMjP,UAAU,GAAG,IAAI,CAACyN,eAAe,EAAE;IACzC,IAAI,CAAClQ,QAAQ,CAACyC,UAAU,EAAE,WAAW,CAAC,EAAE;MACtC;;IAGF,MAAM;MAAEE,KAAK;MAAEC;IAAG,CAAE,GAAGH,UAAU;IACjC,MAAMuJ,SAAS,GAAGrJ,KAAK,CAAC0H,SAAS,EAAE,CAAC4B,YAAY,EAAE;IAElD,MAAMpJ,MAAM,GAAGxD,KAAK,CAACyD,SAAS,CAACF,GAAG,CAAC;IACnC,MAAM;MAAEyN;IAAU,CAAE,GAAGxN,MAAM;IAE7B,MAAM8O,KAAK,GAAG7Q,qBAAqB,CAACkL,SAAS,EAAE0F,KAAK,CAAC;IAErD,MAAME,UAAU,GACdD,KAAK,CAAC,CAAC,CAAC,GAAGtB,UAAU,CAAC,CAAC,CAAC,GAAGA,UAAU,CAAC,CAAC,CAAC,GACxCsB,KAAK,CAAC,CAAC,CAAC,GAAGtB,UAAU,CAAC,CAAC,CAAC,GACxBsB,KAAK,CAAC,CAAC,CAAC;IAEV,OAAO9O,MAAM,CAACgP,aAAa,EAAE,CAACD,UAAU,CAAC;EAC3C;;AA6CF,eAAe5Q,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}