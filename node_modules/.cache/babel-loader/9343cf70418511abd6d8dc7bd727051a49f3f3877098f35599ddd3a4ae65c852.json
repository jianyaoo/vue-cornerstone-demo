{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// ----------------------------------------------------------------------------\n// vtkConeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkConeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkConeSource');\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    let dataset = outData[0];\n    const angle = 2 * Math.PI / model.resolution;\n    const xbot = -model.height / 2.0;\n    const numberOfPoints = model.resolution + 1;\n    const cellArraySize = 4 * model.resolution + 1 + model.resolution;\n\n    // Points\n    let pointIdx = 0;\n    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n\n    // Cells\n    let cellLocation = 0;\n    const polys = new Uint32Array(cellArraySize);\n\n    // Add summit point\n    points[0] = model.height / 2.0;\n    points[1] = 0.0;\n    points[2] = 0.0;\n\n    // Create bottom cell\n    if (model.capping) {\n      polys[cellLocation++] = model.resolution;\n    }\n\n    // Add all points\n    for (let i = 0; i < model.resolution; i++) {\n      pointIdx++;\n      points[pointIdx * 3 + 0] = xbot;\n      points[pointIdx * 3 + 1] = model.radius * Math.cos(i * angle);\n      points[pointIdx * 3 + 2] = model.radius * Math.sin(i * angle);\n\n      // Add points to bottom cell in reverse order\n      if (model.capping) {\n        polys[model.resolution - cellLocation++ + 1] = pointIdx;\n      }\n    }\n\n    // Add all triangle cells\n    for (let i = 0; i < model.resolution; i++) {\n      polys[cellLocation++] = 3;\n      polys[cellLocation++] = 0;\n      polys[cellLocation++] = i + 1;\n      polys[cellLocation++] = i + 2 > model.resolution ? 1 : i + 2;\n    }\n\n    // Apply transformation to the points coordinates\n    vtkMatrixBuilder.buildFromRadian().translate(...model.center).rotateFromDirections([1, 0, 0], model.direction).apply(points);\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1);\n\n    // Update output\n    outData[0] = dataset;\n  }\n\n  // Expose methods\n  publicAPI.requestData = requestData;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  height: 1.0,\n  radius: 0.5,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [1.0, 0.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkConeSource(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkConeSource');\n\n// ----------------------------------------------------------------------------\n\nvar vtkConeSource$1 = {\n  newInstance,\n  extend\n};\nexport { vtkConeSource$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkPolyData","vtkMatrixBuilder","vtkConeSource","publicAPI","model","classHierarchy","push","requestData","inData","outData","deleted","dataset","angle","Math","PI","resolution","xbot","height","numberOfPoints","cellArraySize","pointIdx","points","newTypedArray","pointType","cellLocation","polys","Uint32Array","capping","i","radius","cos","sin","buildFromRadian","translate","center","rotateFromDirections","direction","apply","newInstance","getPoints","setData","getPolys","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","setGet","setGetArray","algo","vtkConeSource$1","default"],"sources":["/Users/yzy/Documents/Playground/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Filters/Sources/ConeSource.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// ----------------------------------------------------------------------------\n// vtkConeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkConeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkConeSource');\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    let dataset = outData[0];\n    const angle = 2 * Math.PI / model.resolution;\n    const xbot = -model.height / 2.0;\n    const numberOfPoints = model.resolution + 1;\n    const cellArraySize = 4 * model.resolution + 1 + model.resolution;\n\n    // Points\n    let pointIdx = 0;\n    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n\n    // Cells\n    let cellLocation = 0;\n    const polys = new Uint32Array(cellArraySize);\n\n    // Add summit point\n    points[0] = model.height / 2.0;\n    points[1] = 0.0;\n    points[2] = 0.0;\n\n    // Create bottom cell\n    if (model.capping) {\n      polys[cellLocation++] = model.resolution;\n    }\n\n    // Add all points\n    for (let i = 0; i < model.resolution; i++) {\n      pointIdx++;\n      points[pointIdx * 3 + 0] = xbot;\n      points[pointIdx * 3 + 1] = model.radius * Math.cos(i * angle);\n      points[pointIdx * 3 + 2] = model.radius * Math.sin(i * angle);\n\n      // Add points to bottom cell in reverse order\n      if (model.capping) {\n        polys[model.resolution - cellLocation++ + 1] = pointIdx;\n      }\n    }\n\n    // Add all triangle cells\n    for (let i = 0; i < model.resolution; i++) {\n      polys[cellLocation++] = 3;\n      polys[cellLocation++] = 0;\n      polys[cellLocation++] = i + 1;\n      polys[cellLocation++] = i + 2 > model.resolution ? 1 : i + 2;\n    }\n\n    // Apply transformation to the points coordinates\n    vtkMatrixBuilder.buildFromRadian().translate(...model.center).rotateFromDirections([1, 0, 0], model.direction).apply(points);\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1);\n\n    // Update output\n    outData[0] = dataset;\n  }\n\n  // Expose methods\n  publicAPI.requestData = requestData;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  height: 1.0,\n  radius: 0.5,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [1.0, 0.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkConeSource(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkConeSource');\n\n// ----------------------------------------------------------------------------\n\nvar vtkConeSource$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkConeSource$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}