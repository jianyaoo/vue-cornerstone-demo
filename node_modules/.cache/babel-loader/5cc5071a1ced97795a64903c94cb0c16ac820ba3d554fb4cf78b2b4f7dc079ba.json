{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { mat3, mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet, g as get } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLActor');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getTextures());\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n\n      // we store textures and mapper\n      model.ogltextures = null;\n      model.activeTextures = null;\n      for (let index = 0; index < model.children.length; index++) {\n        const child = model.children[index];\n        if (child.isA('vtkOpenGLTexture')) {\n          if (!model.ogltextures) {\n            model.ogltextures = [];\n          }\n          model.ogltextures.push(child);\n        } else {\n          model.oglmapper = child;\n        }\n      }\n    }\n  };\n\n  // render both opaque and translucent actors\n  publicAPI.traverseZBufferPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  // only render opaque actors\n  publicAPI.traverseOpaqueZBufferPass = renderPass => publicAPI.traverseOpaquePass(renderPass);\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.activateTextures = () => {\n    // always traverse textures first, then mapper\n    if (!model.ogltextures) {\n      return;\n    }\n    model.activeTextures = [];\n    for (let index = 0; index < model.ogltextures.length; index++) {\n      const child = model.ogltextures[index];\n      child.render();\n      if (child.getHandle()) {\n        model.activeTextures.push(child);\n      }\n    }\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.zBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaqueZBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(false);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      model.renderable.computeMatrix();\n      mat4.copy(model.keyMatrices.mcwc, model.renderable.getMatrix());\n      mat4.transpose(model.keyMatrices.mcwc, model.keyMatrices.mcwc);\n      if (model.renderable.getIsIdentity()) {\n        mat3.identity(model.keyMatrices.normalMatrix);\n      } else {\n        mat3.fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.mcwc);\n        mat3.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n        mat3.transpose(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      }\n      model.keyMatrixTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  keyMatrixTime: null,\n  keyMatrices: null,\n  activeTextures: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: mat3.identity(new Float64Array(9)),\n    mcwc: mat4.identity(new Float64Array(16))\n  };\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']);\n\n  // Object methods\n  vtkOpenGLActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkActor = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkActor', newInstance);\nexport { vtkActor as default, extend, newInstance };","map":{"version":3,"names":["mat3","mat4","n","newInstance$1","o","obj","e","setGet","g","get","vtkViewNode","registerOverride","vtkOpenGLActor","publicAPI","model","classHierarchy","push","buildPass","prepass","_openGLRenderWindow","getFirstAncestorOfType","_openGLRenderer","context","getContext","prepareNodes","addMissingNodes","renderable","getTextures","addMissingNode","getMapper","removeUnusedNodes","ogltextures","activeTextures","index","children","length","child","isA","oglmapper","traverseZBufferPass","renderPass","getNestedVisibility","getSelector","getNestedPickable","apply","traverse","traverseOpaqueZBufferPass","traverseOpaquePass","getIsOpaque","traverseTranslucentPass","activateTextures","render","getHandle","queryPass","getVisibility","incrementOpaqueActorCount","incrementTranslucentActorCount","zBufferPass","opaquePass","opaqueZBufferPass","depthMask","deactivate","translucentPass","getKeyMatrices","getMTime","keyMatrixTime","computeMatrix","copy","keyMatrices","mcwc","getMatrix","transpose","getIsIdentity","identity","normalMatrix","fromMat4","invert","modified","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","mtime","Float64Array","newInstance","vtkActor","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/OpenGL/Actor.js"],"sourcesContent":["import { mat3, mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet, g as get } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLActor');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getTextures());\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n\n      // we store textures and mapper\n      model.ogltextures = null;\n      model.activeTextures = null;\n      for (let index = 0; index < model.children.length; index++) {\n        const child = model.children[index];\n        if (child.isA('vtkOpenGLTexture')) {\n          if (!model.ogltextures) {\n            model.ogltextures = [];\n          }\n          model.ogltextures.push(child);\n        } else {\n          model.oglmapper = child;\n        }\n      }\n    }\n  };\n\n  // render both opaque and translucent actors\n  publicAPI.traverseZBufferPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  // only render opaque actors\n  publicAPI.traverseOpaqueZBufferPass = renderPass => publicAPI.traverseOpaquePass(renderPass);\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.activateTextures = () => {\n    // always traverse textures first, then mapper\n    if (!model.ogltextures) {\n      return;\n    }\n    model.activeTextures = [];\n    for (let index = 0; index < model.ogltextures.length; index++) {\n      const child = model.ogltextures[index];\n      child.render();\n      if (child.getHandle()) {\n        model.activeTextures.push(child);\n      }\n    }\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.zBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaqueZBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(false);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (let index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      model.renderable.computeMatrix();\n      mat4.copy(model.keyMatrices.mcwc, model.renderable.getMatrix());\n      mat4.transpose(model.keyMatrices.mcwc, model.keyMatrices.mcwc);\n      if (model.renderable.getIsIdentity()) {\n        mat3.identity(model.keyMatrices.normalMatrix);\n      } else {\n        mat3.fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.mcwc);\n        mat3.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n        mat3.transpose(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      }\n      model.keyMatrixTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  keyMatrixTime: null,\n  keyMatrices: null,\n  activeTextures: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: mat3.identity(new Float64Array(9)),\n    mcwc: mat4.identity(new Float64Array(16))\n  };\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']);\n\n  // Object methods\n  vtkOpenGLActor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkActor = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkActor', newInstance);\n\nexport { vtkActor as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}