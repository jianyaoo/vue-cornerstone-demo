{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport Constants from './BufferObject/Constants.js';\nconst {\n  ObjectType\n} = Constants;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLBufferObject methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLBufferObject(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLBufferObject');\n\n  // Class-specific private functions\n  function convertType(type) {\n    switch (type) {\n      case ObjectType.ELEMENT_ARRAY_BUFFER:\n        return model.context.ELEMENT_ARRAY_BUFFER;\n      case ObjectType.TEXTURE_BUFFER:\n        if ('TEXTURE_BUFFER' in model.context) {\n          return model.context.TEXTURE_BUFFER;\n        }\n      /* eslint-disable no-fallthrough */\n      // Intentional fallthrough in case there is no TEXTURE_BUFFER in WebGL\n      case ObjectType.ARRAY_BUFFER:\n      default:\n        return model.context.ARRAY_BUFFER;\n      /* eslint-enable no-fallthrough */\n    }\n  }\n  let internalType = null;\n  let internalHandle = null;\n  let dirty = true;\n  let error = '';\n\n  // Public API methods\n  publicAPI.getType = () => internalType;\n  publicAPI.setType = value => {\n    internalType = value;\n  };\n  publicAPI.getHandle = () => internalHandle;\n  publicAPI.isReady = () => dirty === false;\n  publicAPI.generateBuffer = type => {\n    const objectTypeGL = convertType(type);\n    if (internalHandle === null) {\n      internalHandle = model.context.createBuffer();\n      internalType = type;\n    }\n    return convertType(internalType) === objectTypeGL;\n  };\n  publicAPI.upload = (data, type) => {\n    // buffer, size, type\n    const alreadyGenerated = publicAPI.generateBuffer(type);\n    if (!alreadyGenerated) {\n      error = 'Trying to upload array buffer to incompatible buffer.';\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    model.context.bufferData(convertType(internalType), data, model.context.STATIC_DRAW);\n    model.allocatedGPUMemoryInBytes = data.length * data.BYTES_PER_ELEMENT;\n    dirty = false;\n    return true;\n  };\n  publicAPI.bind = () => {\n    if (!internalHandle) {\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    return true;\n  };\n  publicAPI.release = () => {\n    if (!internalHandle) {\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), null);\n    return true;\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    if (internalHandle !== null) {\n      model.context.bindBuffer(convertType(internalType), null);\n      model.context.deleteBuffer(internalHandle);\n      internalHandle = null;\n      model.allocatedGPUMemoryInBytes = 0;\n    }\n  };\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n  publicAPI.getError = () => error;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  objectType: ObjectType.ARRAY_BUFFER,\n  // _openGLRenderWindow: null,\n  context: null,\n  allocatedGPUMemoryInBytes: 0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['_openGLRenderWindow', 'allocatedGPUMemoryInBytes']);\n  macro.moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n  vtkOpenGLBufferObject(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkBufferObject = {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};\nexport { STATIC, vtkBufferObject as default, extend, newInstance };","map":{"version":3,"names":["m","macro","Constants","ObjectType","STATIC","vtkOpenGLBufferObject","publicAPI","model","classHierarchy","push","convertType","type","ELEMENT_ARRAY_BUFFER","context","TEXTURE_BUFFER","ARRAY_BUFFER","internalType","internalHandle","dirty","error","getType","setType","value","getHandle","isReady","generateBuffer","objectTypeGL","createBuffer","upload","data","alreadyGenerated","bindBuffer","bufferData","STATIC_DRAW","allocatedGPUMemoryInBytes","length","BYTES_PER_ELEMENT","bind","release","releaseGraphicsResources","deleteBuffer","setOpenGLRenderWindow","rw","_openGLRenderWindow","getContext","getError","DEFAULT_VALUES","objectType","extend","initialValues","arguments","undefined","Object","assign","obj","get","moveToProtected","newInstance","vtkBufferObject","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport Constants from './BufferObject/Constants.js';\n\nconst {\n  ObjectType\n} = Constants;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLBufferObject methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLBufferObject(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLBufferObject');\n\n  // Class-specific private functions\n  function convertType(type) {\n    switch (type) {\n      case ObjectType.ELEMENT_ARRAY_BUFFER:\n        return model.context.ELEMENT_ARRAY_BUFFER;\n      case ObjectType.TEXTURE_BUFFER:\n        if ('TEXTURE_BUFFER' in model.context) {\n          return model.context.TEXTURE_BUFFER;\n        }\n      /* eslint-disable no-fallthrough */\n      // Intentional fallthrough in case there is no TEXTURE_BUFFER in WebGL\n      case ObjectType.ARRAY_BUFFER:\n      default:\n        return model.context.ARRAY_BUFFER;\n      /* eslint-enable no-fallthrough */\n    }\n  }\n\n  let internalType = null;\n  let internalHandle = null;\n  let dirty = true;\n  let error = '';\n\n  // Public API methods\n  publicAPI.getType = () => internalType;\n  publicAPI.setType = value => {\n    internalType = value;\n  };\n  publicAPI.getHandle = () => internalHandle;\n  publicAPI.isReady = () => dirty === false;\n  publicAPI.generateBuffer = type => {\n    const objectTypeGL = convertType(type);\n    if (internalHandle === null) {\n      internalHandle = model.context.createBuffer();\n      internalType = type;\n    }\n    return convertType(internalType) === objectTypeGL;\n  };\n  publicAPI.upload = (data, type) => {\n    // buffer, size, type\n    const alreadyGenerated = publicAPI.generateBuffer(type);\n    if (!alreadyGenerated) {\n      error = 'Trying to upload array buffer to incompatible buffer.';\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    model.context.bufferData(convertType(internalType), data, model.context.STATIC_DRAW);\n    model.allocatedGPUMemoryInBytes = data.length * data.BYTES_PER_ELEMENT;\n    dirty = false;\n    return true;\n  };\n  publicAPI.bind = () => {\n    if (!internalHandle) {\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    return true;\n  };\n  publicAPI.release = () => {\n    if (!internalHandle) {\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), null);\n    return true;\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    if (internalHandle !== null) {\n      model.context.bindBuffer(convertType(internalType), null);\n      model.context.deleteBuffer(internalHandle);\n      internalHandle = null;\n      model.allocatedGPUMemoryInBytes = 0;\n    }\n  };\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n  publicAPI.getError = () => error;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  objectType: ObjectType.ARRAY_BUFFER,\n  // _openGLRenderWindow: null,\n  context: null,\n  allocatedGPUMemoryInBytes: 0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['_openGLRenderWindow', 'allocatedGPUMemoryInBytes']);\n  macro.moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n  vtkOpenGLBufferObject(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nvar vtkBufferObject = {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};\n\nexport { STATIC, vtkBufferObject as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}