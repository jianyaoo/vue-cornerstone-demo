{"ast":null,"code":"import { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg } from '../../../drawingSvg';\nimport { polyline } from '../../../utilities/math';\nimport { findOpenUShapedContourVectorToPeakOnRender } from './findOpenUShapedContourVectorToPeak';\nconst {\n  pointsAreWithinCloseContourProximity\n} = polyline;\nfunction _getRenderingOptions(enabledElement, annotation) {\n  const styleSpecifier = {\n    toolGroupId: this.toolGroupId,\n    toolName: this.getToolName(),\n    viewportId: enabledElement.viewport.id,\n    annotationUID: annotation.annotationUID\n  };\n  const {\n    lineWidth,\n    lineDash,\n    color,\n    fillColor,\n    fillOpacity\n  } = this.getAnnotationStyle({\n    annotation,\n    styleSpecifier\n  });\n  const {\n    closed: isClosedContour\n  } = annotation.data.contour;\n  const options = {\n    color,\n    width: lineWidth,\n    lineDash,\n    fillColor,\n    fillOpacity,\n    connectLastToFirst: isClosedContour\n  };\n  return options;\n}\nfunction renderContour(enabledElement, svgDrawingHelper, annotation) {\n  if (!enabledElement?.viewport?.getImageData()) {\n    return;\n  }\n  if (annotation.data.contour.closed) {\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n  } else {\n    if (annotation.data.isOpenUShapeContour) {\n      calculateUShapeContourVectorToPeakIfNotPresent(enabledElement, annotation);\n      this.renderOpenUShapedContour(enabledElement, svgDrawingHelper, annotation);\n    } else {\n      this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n    }\n  }\n}\nfunction calculateUShapeContourVectorToPeakIfNotPresent(enabledElement, annotation) {\n  if (!annotation.data.openUShapeContourVectorToPeak) {\n    annotation.data.openUShapeContourVectorToPeak = findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation);\n  }\n}\nfunction renderClosedContour(enabledElement, svgDrawingHelper, annotation) {\n  const {\n    viewport\n  } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n  const canvasPoints = annotation.data.contour.polyline.map(worldPos => viewport.worldToCanvas(worldPos));\n  const polylineUID = '1';\n  drawPolylineSvg(svgDrawingHelper, annotation.annotationUID, polylineUID, canvasPoints, options);\n}\nfunction renderOpenContour(enabledElement, svgDrawingHelper, annotation) {\n  const {\n    viewport\n  } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n  const canvasPoints = annotation.data.contour.polyline.map(worldPos => viewport.worldToCanvas(worldPos));\n  const polylineUID = '1';\n  drawPolylineSvg(svgDrawingHelper, annotation.annotationUID, polylineUID, canvasPoints, options);\n  const activeHandleIndex = annotation.data.handles.activeHandleIndex;\n  if (this.configuration.alwaysRenderOpenContourHandles?.enabled === true) {\n    const radius = this.configuration.alwaysRenderOpenContourHandles.radius;\n    const handleGroupUID = '0';\n    const handlePoints = [canvasPoints[0], canvasPoints[canvasPoints.length - 1]];\n    if (activeHandleIndex === 0) {\n      handlePoints.shift();\n    } else if (activeHandleIndex === 1) {\n      handlePoints.pop();\n    }\n    drawHandlesSvg(svgDrawingHelper, annotation.annotationUID, handleGroupUID, handlePoints, {\n      color: options.color,\n      handleRadius: radius\n    });\n  }\n  if (activeHandleIndex !== null) {\n    const handleGroupUID = '1';\n    const indexOfCanvasPoints = activeHandleIndex === 0 ? 0 : canvasPoints.length - 1;\n    const handlePoint = canvasPoints[indexOfCanvasPoints];\n    drawHandlesSvg(svgDrawingHelper, annotation.annotationUID, handleGroupUID, [handlePoint], {\n      color: options.color\n    });\n  }\n}\nfunction renderOpenUShapedContour(enabledElement, svgDrawingHelper, annotation) {\n  const {\n    viewport\n  } = enabledElement;\n  const {\n    openUShapeContourVectorToPeak\n  } = annotation.data;\n  const {\n    polyline\n  } = annotation.data.contour;\n  this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n  if (!openUShapeContourVectorToPeak) {\n    return;\n  }\n  const firstCanvasPoint = viewport.worldToCanvas(polyline[0]);\n  const lastCanvasPoint = viewport.worldToCanvas(polyline[polyline.length - 1]);\n  const openUShapeContourVectorToPeakCanvas = [viewport.worldToCanvas(openUShapeContourVectorToPeak[0]), viewport.worldToCanvas(openUShapeContourVectorToPeak[1])];\n  const options = this._getRenderingOptions(enabledElement, annotation);\n  drawPolylineSvg(svgDrawingHelper, annotation.annotationUID, 'first-to-last', [firstCanvasPoint, lastCanvasPoint], {\n    color: options.color,\n    width: options.width,\n    connectLastToFirst: false,\n    lineDash: '2,2'\n  });\n  drawPolylineSvg(svgDrawingHelper, annotation.annotationUID, 'midpoint-to-open-contour', [openUShapeContourVectorToPeakCanvas[0], openUShapeContourVectorToPeakCanvas[1]], {\n    color: options.color,\n    width: options.width,\n    connectLastToFirst: false,\n    lineDash: '2,2'\n  });\n}\nfunction renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation) {\n  const options = this._getRenderingOptions(enabledElement, annotation);\n  const {\n    allowOpenContours\n  } = this.configuration;\n  const {\n    canvasPoints\n  } = this.drawData;\n  options.connectLastToFirst = false;\n  drawPolylineSvg(svgDrawingHelper, annotation.annotationUID, '1', canvasPoints, options);\n  if (allowOpenContours) {\n    const firstPoint = canvasPoints[0];\n    const lastPoint = canvasPoints[canvasPoints.length - 1];\n    if (pointsAreWithinCloseContourProximity(firstPoint, lastPoint, this.configuration.closeContourProximity)) {\n      drawPolylineSvg(svgDrawingHelper, annotation.annotationUID, '2', [lastPoint, firstPoint], options);\n    } else {\n      const handleGroupUID = '0';\n      drawHandlesSvg(svgDrawingHelper, annotation.annotationUID, handleGroupUID, [firstPoint], {\n        color: options.color,\n        handleRadius: 2\n      });\n    }\n  }\n}\nfunction renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation) {\n  const {\n    fusedCanvasPoints\n  } = this.editData;\n  if (fusedCanvasPoints === undefined) {\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n    return;\n  }\n  const options = this._getRenderingOptions(enabledElement, annotation);\n  const polylineUIDToRender = 'preview-1';\n  drawPolylineSvg(svgDrawingHelper, annotation.annotationUID, polylineUIDToRender, fusedCanvasPoints, options);\n}\nfunction renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation) {\n  const {\n    fusedCanvasPoints\n  } = this.editData;\n  if (fusedCanvasPoints === undefined) {\n    this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n    return;\n  }\n  const options = this._getRenderingOptions(enabledElement, annotation);\n  const polylineUIDToRender = 'preview-1';\n  drawPolylineSvg(svgDrawingHelper, annotation.annotationUID, polylineUIDToRender, fusedCanvasPoints, options);\n}\nfunction registerRenderMethods(toolInstance) {\n  toolInstance.renderContour = renderContour.bind(toolInstance);\n  toolInstance.renderClosedContour = renderClosedContour.bind(toolInstance);\n  toolInstance.renderOpenContour = renderOpenContour.bind(toolInstance);\n  toolInstance.renderOpenUShapedContour = renderOpenUShapedContour.bind(toolInstance);\n  toolInstance.renderContourBeingDrawn = renderContourBeingDrawn.bind(toolInstance);\n  toolInstance.renderClosedContourBeingEdited = renderClosedContourBeingEdited.bind(toolInstance);\n  toolInstance.renderOpenContourBeingEdited = renderOpenContourBeingEdited.bind(toolInstance);\n  toolInstance._getRenderingOptions = _getRenderingOptions.bind(toolInstance);\n}\nexport default registerRenderMethods;","map":{"version":3,"names":["drawHandles","drawHandlesSvg","drawPolyline","drawPolylineSvg","polyline","findOpenUShapedContourVectorToPeakOnRender","pointsAreWithinCloseContourProximity","_getRenderingOptions","enabledElement","annotation","styleSpecifier","toolGroupId","toolName","getToolName","viewportId","viewport","id","annotationUID","lineWidth","lineDash","color","fillColor","fillOpacity","getAnnotationStyle","closed","isClosedContour","data","contour","options","width","connectLastToFirst","renderContour","svgDrawingHelper","getImageData","renderClosedContour","isOpenUShapeContour","calculateUShapeContourVectorToPeakIfNotPresent","renderOpenUShapedContour","renderOpenContour","openUShapeContourVectorToPeak","canvasPoints","map","worldPos","worldToCanvas","polylineUID","activeHandleIndex","handles","configuration","alwaysRenderOpenContourHandles","enabled","radius","handleGroupUID","handlePoints","length","shift","pop","handleRadius","indexOfCanvasPoints","handlePoint","firstCanvasPoint","lastCanvasPoint","openUShapeContourVectorToPeakCanvas","renderContourBeingDrawn","allowOpenContours","drawData","firstPoint","lastPoint","closeContourProximity","renderClosedContourBeingEdited","fusedCanvasPoints","editData","undefined","polylineUIDToRender","renderOpenContourBeingEdited","registerRenderMethods","toolInstance","bind"],"sources":["../../../../../src/tools/annotation/planarFreehandROITool/renderMethods.ts"],"sourcesContent":[null],"mappings":"AACA,SACEA,WAAW,IAAIC,cAAc,EAC7BC,YAAY,IAAIC,eAAe,QAC1B,qBAAqB;AAC5B,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,0CAA0C,QAAQ,sCAAsC;AAKjG,MAAM;EAAEC;AAAoC,CAAE,GAAGF,QAAQ;AAQzD,SAASG,oBAAoBA,CAC3BC,cAAqC,EACrCC,UAAuC;EAEvC,MAAMC,cAAc,GAAmB;IACrCC,WAAW,EAAE,IAAI,CAACA,WAAW;IAC7BC,QAAQ,EAAE,IAAI,CAACC,WAAW,EAAE;IAC5BC,UAAU,EAAEN,cAAc,CAACO,QAAQ,CAACC,EAAE;IACtCC,aAAa,EAAER,UAAU,CAACQ;GAC3B;EAED,MAAM;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,KAAK;IAAEC,SAAS;IAAEC;EAAW,CAAE,GAC1D,IAAI,CAACC,kBAAkB,CAAC;IACtBd,UAAU;IACVC;GACD,CAAC;EAEJ,MAAM;IAAEc,MAAM,EAAEC;EAAe,CAAE,GAAGhB,UAAU,CAACiB,IAAI,CAACC,OAAO;EAE3D,MAAMC,OAAO,GAAG;IACdR,KAAK;IACLS,KAAK,EAAEX,SAAS;IAChBC,QAAQ;IACRE,SAAS;IACTC,WAAW;IACXQ,kBAAkB,EAAEL;GACrB;EAED,OAAOG,OAAO;AAChB;AAKA,SAASG,aAAaA,CACpBvB,cAAqC,EACrCwB,gBAAkC,EAClCvB,UAAuC;EAGvC,IAAI,CAACD,cAAc,EAAEO,QAAQ,EAAEkB,YAAY,EAAE,EAAE;IAC7C;;EAGF,IAAIxB,UAAU,CAACiB,IAAI,CAACC,OAAO,CAACH,MAAM,EAAE;IAClC,IAAI,CAACU,mBAAmB,CAAC1B,cAAc,EAAEwB,gBAAgB,EAAEvB,UAAU,CAAC;GACvE,MAAM;IAEL,IAAIA,UAAU,CAACiB,IAAI,CAACS,mBAAmB,EAAE;MACvCC,8CAA8C,CAC5C5B,cAAc,EACdC,UAAU,CACX;MAED,IAAI,CAAC4B,wBAAwB,CAC3B7B,cAAc,EACdwB,gBAAgB,EAChBvB,UAAU,CACX;KACF,MAAM;MAEL,IAAI,CAAC6B,iBAAiB,CAAC9B,cAAc,EAAEwB,gBAAgB,EAAEvB,UAAU,CAAC;;;AAG1E;AAKA,SAAS2B,8CAA8CA,CACrD5B,cAAqC,EACrCC,UAAuC;EAEvC,IAAI,CAACA,UAAU,CAACiB,IAAI,CAACa,6BAA6B,EAAE;IAGlD9B,UAAU,CAACiB,IAAI,CAACa,6BAA6B,GAC3ClC,0CAA0C,CAACG,cAAc,EAAEC,UAAU,CAAC;;AAE5E;AAKA,SAASyB,mBAAmBA,CAC1B1B,cAAqC,EACrCwB,gBAAkC,EAClCvB,UAAuC;EAEvC,MAAM;IAAEM;EAAQ,CAAE,GAAGP,cAAc;EACnC,MAAMoB,OAAO,GAAG,IAAI,CAACrB,oBAAoB,CAACC,cAAc,EAAEC,UAAU,CAAC;EAOrE,MAAM+B,YAAY,GAAG/B,UAAU,CAACiB,IAAI,CAACC,OAAO,CAACvB,QAAQ,CAACqC,GAAG,CAAEC,QAAQ,IACjE3B,QAAQ,CAAC4B,aAAa,CAACD,QAAQ,CAAC,CACjC;EAED,MAAME,WAAW,GAAG,GAAG;EAEvBzC,eAAe,CACb6B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxB2B,WAAW,EACXJ,YAAY,EACZZ,OAAO,CACR;AACH;AAKA,SAASU,iBAAiBA,CACxB9B,cAAqC,EACrCwB,gBAAkC,EAClCvB,UAAuC;EAEvC,MAAM;IAAEM;EAAQ,CAAE,GAAGP,cAAc;EACnC,MAAMoB,OAAO,GAAG,IAAI,CAACrB,oBAAoB,CAACC,cAAc,EAAEC,UAAU,CAAC;EAErE,MAAM+B,YAAY,GAAG/B,UAAU,CAACiB,IAAI,CAACC,OAAO,CAACvB,QAAQ,CAACqC,GAAG,CAAEC,QAAQ,IACjE3B,QAAQ,CAAC4B,aAAa,CAACD,QAAQ,CAAC,CACjC;EAED,MAAME,WAAW,GAAG,GAAG;EAEvBzC,eAAe,CACb6B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxB2B,WAAW,EACXJ,YAAY,EACZZ,OAAO,CACR;EAED,MAAMiB,iBAAiB,GAAGpC,UAAU,CAACiB,IAAI,CAACoB,OAAO,CAACD,iBAAiB;EAEnE,IAAI,IAAI,CAACE,aAAa,CAACC,8BAA8B,EAAEC,OAAO,KAAK,IAAI,EAAE;IACvE,MAAMC,MAAM,GAAG,IAAI,CAACH,aAAa,CAACC,8BAA8B,CAACE,MAAM;IAGvE,MAAMC,cAAc,GAAG,GAAG;IAI1B,MAAMC,YAAY,GAAG,CACnBZ,YAAY,CAAC,CAAC,CAAC,EACfA,YAAY,CAACA,YAAY,CAACa,MAAM,GAAG,CAAC,CAAC,CACtC;IAID,IAAIR,iBAAiB,KAAK,CAAC,EAAE;MAC3BO,YAAY,CAACE,KAAK,EAAE;KACrB,MAAM,IAAIT,iBAAiB,KAAK,CAAC,EAAE;MAClCO,YAAY,CAACG,GAAG,EAAE;;IAGpBtD,cAAc,CACZ+B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxBkC,cAAc,EACdC,YAAY,EACZ;MACEhC,KAAK,EAAEQ,OAAO,CAACR,KAAK;MACpBoC,YAAY,EAAEN;KACf,CACF;;EAGH,IAAIL,iBAAiB,KAAK,IAAI,EAAE;IAE9B,MAAMM,cAAc,GAAG,GAAG;IAI1B,MAAMM,mBAAmB,GACvBZ,iBAAiB,KAAK,CAAC,GAAG,CAAC,GAAGL,YAAY,CAACa,MAAM,GAAG,CAAC;IAEvD,MAAMK,WAAW,GAAGlB,YAAY,CAACiB,mBAAmB,CAAC;IAErDxD,cAAc,CACZ+B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxBkC,cAAc,EACd,CAACO,WAAW,CAAC,EACb;MAAEtC,KAAK,EAAEQ,OAAO,CAACR;IAAK,CAAE,CACzB;;AAEL;AAEA,SAASiB,wBAAwBA,CAC/B7B,cAAqC,EACrCwB,gBAAkC,EAClCvB,UAAuC;EAEvC,MAAM;IAAEM;EAAQ,CAAE,GAAGP,cAAc;EACnC,MAAM;IAAE+B;EAA6B,CAAE,GAAG9B,UAAU,CAACiB,IAAI;EACzD,MAAM;IAAEtB;EAAQ,CAAE,GAAGK,UAAU,CAACiB,IAAI,CAACC,OAAO;EAE5C,IAAI,CAACW,iBAAiB,CAAC9B,cAAc,EAAEwB,gBAAgB,EAAEvB,UAAU,CAAC;EAGpE,IAAI,CAAC8B,6BAA6B,EAAE;IAClC;;EAGF,MAAMoB,gBAAgB,GAAG5C,QAAQ,CAAC4B,aAAa,CAACvC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAMwD,eAAe,GAAG7C,QAAQ,CAAC4B,aAAa,CAACvC,QAAQ,CAACA,QAAQ,CAACiD,MAAM,GAAG,CAAC,CAAC,CAAC;EAE7E,MAAMQ,mCAAmC,GAAG,CAC1C9C,QAAQ,CAAC4B,aAAa,CAACJ,6BAA6B,CAAC,CAAC,CAAC,CAAC,EACxDxB,QAAQ,CAAC4B,aAAa,CAACJ,6BAA6B,CAAC,CAAC,CAAC,CAAC,CACzD;EAED,MAAMX,OAAO,GAAG,IAAI,CAACrB,oBAAoB,CAACC,cAAc,EAAEC,UAAU,CAAC;EAGrEN,eAAe,CACb6B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxB,eAAe,EACf,CAAC0C,gBAAgB,EAAEC,eAAe,CAAC,EACnC;IACExC,KAAK,EAAEQ,OAAO,CAACR,KAAK;IACpBS,KAAK,EAAED,OAAO,CAACC,KAAK;IACpBC,kBAAkB,EAAE,KAAK;IACzBX,QAAQ,EAAE;GACX,CACF;EAGDhB,eAAe,CACb6B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxB,0BAA0B,EAC1B,CACE4C,mCAAmC,CAAC,CAAC,CAAC,EACtCA,mCAAmC,CAAC,CAAC,CAAC,CACvC,EACD;IACEzC,KAAK,EAAEQ,OAAO,CAACR,KAAK;IACpBS,KAAK,EAAED,OAAO,CAACC,KAAK;IACpBC,kBAAkB,EAAE,KAAK;IACzBX,QAAQ,EAAE;GACX,CACF;AACH;AAMA,SAAS2C,uBAAuBA,CAC9BtD,cAAqC,EACrCwB,gBAAkC,EAClCvB,UAAuC;EAEvC,MAAMmB,OAAO,GAAG,IAAI,CAACrB,oBAAoB,CAACC,cAAc,EAAEC,UAAU,CAAC;EAErE,MAAM;IAAEsD;EAAiB,CAAE,GAAG,IAAI,CAAChB,aAAa;EAChD,MAAM;IAAEP;EAAY,CAAE,GAAG,IAAI,CAACwB,QAAQ;EAItCpC,OAAO,CAACE,kBAAkB,GAAG,KAAK;EAElC3B,eAAe,CACb6B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxB,GAAG,EACHuB,YAAY,EACZZ,OAAO,CACR;EAED,IAAImC,iBAAiB,EAAE;IACrB,MAAME,UAAU,GAAGzB,YAAY,CAAC,CAAC,CAAC;IAClC,MAAM0B,SAAS,GAAG1B,YAAY,CAACA,YAAY,CAACa,MAAM,GAAG,CAAC,CAAC;IAGvD,IACE/C,oCAAoC,CAClC2D,UAAU,EACVC,SAAS,EACT,IAAI,CAACnB,aAAa,CAACoB,qBAAqB,CACzC,EACD;MAEAhE,eAAe,CACb6B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxB,GAAG,EACH,CAACiD,SAAS,EAAED,UAAU,CAAC,EACvBrC,OAAO,CACR;KACF,MAAM;MAEL,MAAMuB,cAAc,GAAG,GAAG;MAE1BlD,cAAc,CACZ+B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxBkC,cAAc,EACd,CAACc,UAAU,CAAC,EACZ;QAAE7C,KAAK,EAAEQ,OAAO,CAACR,KAAK;QAAEoC,YAAY,EAAE;MAAC,CAAE,CAC1C;;;AAGP;AAKA,SAASY,8BAA8BA,CACrC5D,cAAc,EACdwB,gBAAgB,EAChBvB,UAAU;EAEV,MAAM;IAAE4D;EAAiB,CAAE,GAAG,IAAI,CAACC,QAAQ;EAE3C,IAAID,iBAAiB,KAAKE,SAAS,EAAE;IAEnC,IAAI,CAACrC,mBAAmB,CAAC1B,cAAc,EAAEwB,gBAAgB,EAAEvB,UAAU,CAAC;IAEtE;;EAGF,MAAMmB,OAAO,GAAG,IAAI,CAACrB,oBAAoB,CAACC,cAAc,EAAEC,UAAU,CAAC;EAErE,MAAM+D,mBAAmB,GAAG,WAAW;EAEvCrE,eAAe,CACb6B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxBuD,mBAAmB,EACnBH,iBAAiB,EACjBzC,OAAO,CACR;AACH;AAKA,SAAS6C,4BAA4BA,CACnCjE,cAAqC,EACrCwB,gBAAkC,EAClCvB,UAAuC;EAEvC,MAAM;IAAE4D;EAAiB,CAAE,GAAG,IAAI,CAACC,QAAQ;EAE3C,IAAID,iBAAiB,KAAKE,SAAS,EAAE;IAEnC,IAAI,CAACjC,iBAAiB,CAAC9B,cAAc,EAAEwB,gBAAgB,EAAEvB,UAAU,CAAC;IAEpE;;EAGF,MAAMmB,OAAO,GAAG,IAAI,CAACrB,oBAAoB,CAACC,cAAc,EAAEC,UAAU,CAAC;EAErE,MAAM+D,mBAAmB,GAAG,WAAW;EAEvCrE,eAAe,CACb6B,gBAAgB,EAChBvB,UAAU,CAACQ,aAAa,EACxBuD,mBAAmB,EACnBH,iBAAiB,EACjBzC,OAAO,CACR;AACH;AAKA,SAAS8C,qBAAqBA,CAACC,YAAY;EACzCA,YAAY,CAAC5C,aAAa,GAAGA,aAAa,CAAC6C,IAAI,CAACD,YAAY,CAAC;EAC7DA,YAAY,CAACzC,mBAAmB,GAAGA,mBAAmB,CAAC0C,IAAI,CAACD,YAAY,CAAC;EACzEA,YAAY,CAACrC,iBAAiB,GAAGA,iBAAiB,CAACsC,IAAI,CAACD,YAAY,CAAC;EACrEA,YAAY,CAACtC,wBAAwB,GACnCA,wBAAwB,CAACuC,IAAI,CAACD,YAAY,CAAC;EAE7CA,YAAY,CAACb,uBAAuB,GAClCA,uBAAuB,CAACc,IAAI,CAACD,YAAY,CAAC;EAE5CA,YAAY,CAACP,8BAA8B,GACzCA,8BAA8B,CAACQ,IAAI,CAACD,YAAY,CAAC;EACnDA,YAAY,CAACF,4BAA4B,GACvCA,4BAA4B,CAACG,IAAI,CAACD,YAAY,CAAC;EACjDA,YAAY,CAACpE,oBAAoB,GAAGA,oBAAoB,CAACqE,IAAI,CAACD,YAAY,CAAC;AAC7E;AAEA,eAAeD,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}