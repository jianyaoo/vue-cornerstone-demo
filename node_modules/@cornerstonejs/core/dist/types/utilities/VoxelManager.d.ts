import type { BoundsIJK, Point3, PixelDataTypedArray } from '../types';
export default class VoxelManager<T> {
    modifiedSlices: Set<number>;
    boundsIJK: BoundsIJK;
    scalarData: PixelDataTypedArray;
    map: Map<number, T>;
    sourceVoxelManager: VoxelManager<T>;
    isInObject: (pointIPS: any, pointIJK: any) => boolean;
    readonly dimensions: Point3;
    points: Set<number>;
    width: number;
    frameSize: number;
    _get: (index: number) => T;
    _set: (index: number, v: T) => boolean | void;
    constructor(dimensions: any, _get: (index: number) => T, _set?: (index: number, v: T) => boolean | void);
    getAtIJK: (i: any, j: any, k: any) => T;
    setAtIJK: (i: number, j: number, k: number, v: any) => void;
    addPoint(point: Point3 | number): void;
    getPoints(): Point3[];
    getPointIndices(): number[];
    getAtIJKPoint: ([i, j, k]: [any, any, any]) => T;
    setAtIJKPoint: ([i, j, k]: [any, any, any], v: any) => void;
    getAtIndex: (index: any) => T;
    setAtIndex: (index: any, v: any) => void;
    toIJK(index: number): Point3;
    toIndex(ijk: Point3): number;
    getBoundsIJK(): BoundsIJK;
    forEach: (callback: any, options?: any) => void;
    clear(): void;
    getArrayOfSlices(): number[];
    static addBounds(bounds: BoundsIJK, point: Point3): void;
    static createVolumeVoxelManager(dimensions: Point3, scalarData: any): VoxelManager<number>;
    static createMapVoxelManager<T>(dimension: Point3): VoxelManager<T>;
    static createHistoryVoxelManager<T>(sourceVoxelManager: VoxelManager<T>): VoxelManager<T>;
}
export type { VoxelManager };
//# sourceMappingURL=VoxelManager.d.ts.map