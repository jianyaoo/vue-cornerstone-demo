{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkAbstractMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkAbstractMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkAbstractMapper');\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n  publicAPI.addClippingPlane = plane => {\n    if (!plane.isA('vtkPlane')) {\n      return false;\n    }\n    if (!model.clippingPlanes.includes(plane)) {\n      model.clippingPlanes.push(plane);\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getNumberOfClippingPlanes = () => model.clippingPlanes.length;\n  publicAPI.removeAllClippingPlanes = () => {\n    if (model.clippingPlanes.length === 0) {\n      return false;\n    }\n    model.clippingPlanes.length = 0;\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.removeClippingPlane = clippingPlane => {\n    const i = model.clippingPlanes.indexOf(clippingPlane);\n    if (i === -1) {\n      return false;\n    }\n    model.clippingPlanes.splice(i, 1);\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.getClippingPlanes = () => model.clippingPlanes;\n  publicAPI.setClippingPlanes = planes => {\n    if (!planes) {\n      return;\n    }\n    if (!Array.isArray(planes)) {\n      publicAPI.addClippingPlane(planes);\n    } else {\n      const nbPlanes = planes.length;\n      for (let i = 0; i < nbPlanes && i < 6; i++) {\n        publicAPI.addClippingPlane(planes[i]);\n      }\n    }\n  };\n  publicAPI.getClippingPlaneInDataCoords = (propMatrix, i, hnormal) => {\n    const clipPlanes = model.clippingPlanes;\n    const mat = propMatrix;\n    if (clipPlanes) {\n      const n = clipPlanes.length;\n      if (i >= 0 && i < n) {\n        // Get the plane\n        const plane = clipPlanes[i];\n        const normal = plane.getNormal();\n        const origin = plane.getOrigin();\n\n        // Compute the plane equation\n        const v1 = normal[0];\n        const v2 = normal[1];\n        const v3 = normal[2];\n        const v4 = -(v1 * origin[0] + v2 * origin[1] + v3 * origin[2]);\n\n        // Transform normal from world to data coords\n        hnormal[0] = v1 * mat[0] + v2 * mat[4] + v3 * mat[8] + v4 * mat[12];\n        hnormal[1] = v1 * mat[1] + v2 * mat[5] + v3 * mat[9] + v4 * mat[13];\n        hnormal[2] = v1 * mat[2] + v2 * mat[6] + v3 * mat[10] + v4 * mat[14];\n        hnormal[3] = v1 * mat[3] + v2 * mat[7] + v3 * mat[11] + v4 * mat[15];\n        return;\n      }\n    }\n    macro.vtkErrorMacro(`Clipping plane index ${i} is out of range.`);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clippingPlanes: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 0);\n  if (!model.clippingPlanes) {\n    model.clippingPlanes = [];\n  }\n  vtkAbstractMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nvar vtkAbstractMapper$1 = {\n  extend\n};\nexport { vtkAbstractMapper$1 as default, extend };","map":{"version":3,"names":["m","macro","vtkAbstractMapper","publicAPI","model","classHierarchy","push","update","getInputData","addClippingPlane","plane","isA","clippingPlanes","includes","modified","getNumberOfClippingPlanes","length","removeAllClippingPlanes","removeClippingPlane","clippingPlane","i","indexOf","splice","getClippingPlanes","setClippingPlanes","planes","Array","isArray","nbPlanes","getClippingPlaneInDataCoords","propMatrix","hnormal","clipPlanes","mat","n","normal","getNormal","origin","getOrigin","v1","v2","v3","v4","vtkErrorMacro","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","obj","algo","vtkAbstractMapper$1","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/Core/AbstractMapper.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// vtkAbstractMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkAbstractMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkAbstractMapper');\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n  publicAPI.addClippingPlane = plane => {\n    if (!plane.isA('vtkPlane')) {\n      return false;\n    }\n    if (!model.clippingPlanes.includes(plane)) {\n      model.clippingPlanes.push(plane);\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getNumberOfClippingPlanes = () => model.clippingPlanes.length;\n  publicAPI.removeAllClippingPlanes = () => {\n    if (model.clippingPlanes.length === 0) {\n      return false;\n    }\n    model.clippingPlanes.length = 0;\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.removeClippingPlane = clippingPlane => {\n    const i = model.clippingPlanes.indexOf(clippingPlane);\n    if (i === -1) {\n      return false;\n    }\n    model.clippingPlanes.splice(i, 1);\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.getClippingPlanes = () => model.clippingPlanes;\n  publicAPI.setClippingPlanes = planes => {\n    if (!planes) {\n      return;\n    }\n    if (!Array.isArray(planes)) {\n      publicAPI.addClippingPlane(planes);\n    } else {\n      const nbPlanes = planes.length;\n      for (let i = 0; i < nbPlanes && i < 6; i++) {\n        publicAPI.addClippingPlane(planes[i]);\n      }\n    }\n  };\n  publicAPI.getClippingPlaneInDataCoords = (propMatrix, i, hnormal) => {\n    const clipPlanes = model.clippingPlanes;\n    const mat = propMatrix;\n    if (clipPlanes) {\n      const n = clipPlanes.length;\n      if (i >= 0 && i < n) {\n        // Get the plane\n        const plane = clipPlanes[i];\n        const normal = plane.getNormal();\n        const origin = plane.getOrigin();\n\n        // Compute the plane equation\n        const v1 = normal[0];\n        const v2 = normal[1];\n        const v3 = normal[2];\n        const v4 = -(v1 * origin[0] + v2 * origin[1] + v3 * origin[2]);\n\n        // Transform normal from world to data coords\n        hnormal[0] = v1 * mat[0] + v2 * mat[4] + v3 * mat[8] + v4 * mat[12];\n        hnormal[1] = v1 * mat[1] + v2 * mat[5] + v3 * mat[9] + v4 * mat[13];\n        hnormal[2] = v1 * mat[2] + v2 * mat[6] + v3 * mat[10] + v4 * mat[14];\n        hnormal[3] = v1 * mat[3] + v2 * mat[7] + v3 * mat[11] + v4 * mat[15];\n        return;\n      }\n    }\n    macro.vtkErrorMacro(`Clipping plane index ${i} is out of range.`);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clippingPlanes: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 0);\n  if (!model.clippingPlanes) {\n    model.clippingPlanes = [];\n  }\n  vtkAbstractMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nvar vtkAbstractMapper$1 = {\n  extend\n};\n\nexport { vtkAbstractMapper$1 as default, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}