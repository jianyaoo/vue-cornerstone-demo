{"ast":null,"code":"import { StackViewport, utilities, BaseVolumeViewport, VideoViewport } from '@cornerstonejs/core';\nimport ToolModes from '../../enums/ToolModes';\nclass BaseTool {\n  constructor(toolProps, defaultToolProps) {\n    const initialProps = utilities.deepMerge(defaultToolProps, toolProps);\n    const {\n      configuration = {},\n      supportedInteractionTypes,\n      toolGroupId\n    } = initialProps;\n    if (!configuration.strategies) {\n      configuration.strategies = {};\n      configuration.defaultStrategy = undefined;\n      configuration.activeStrategy = undefined;\n      configuration.strategyOptions = {};\n    }\n    this.toolGroupId = toolGroupId;\n    this.supportedInteractionTypes = supportedInteractionTypes || [];\n    this.configuration = Object.assign({}, configuration);\n    this.mode = ToolModes.Disabled;\n  }\n  getToolName() {\n    return this.constructor.toolName;\n  }\n  applyActiveStrategy(enabledElement, operationData) {\n    const {\n      strategies,\n      activeStrategy\n    } = this.configuration;\n    return strategies[activeStrategy]?.call(this, enabledElement, operationData);\n  }\n  applyActiveStrategyCallback(enabledElement, operationData, callbackType) {\n    const {\n      strategies,\n      activeStrategy\n    } = this.configuration;\n    return strategies[activeStrategy][callbackType]?.call(this, enabledElement, operationData);\n  }\n  setConfiguration(newConfiguration) {\n    this.configuration = utilities.deepMerge(this.configuration, newConfiguration);\n  }\n  setActiveStrategy(strategyName) {\n    this.setConfiguration({\n      activeStrategy: strategyName\n    });\n  }\n  getTargetVolumeId(viewport) {\n    if (this.configuration.volumeId) {\n      return this.configuration.volumeId;\n    }\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n      return;\n    }\n    return actorEntries.find(actorEntry => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n  }\n  getTargetIdImage(targetId, renderingEngine) {\n    if (targetId.startsWith('imageId:')) {\n      const imageId = targetId.split('imageId:')[1];\n      const imageURI = utilities.imageIdToURI(imageId);\n      let viewports = utilities.getViewportsWithImageURI(imageURI, renderingEngine.id);\n      if (!viewports || !viewports.length) {\n        return;\n      }\n      viewports = viewports.filter(viewport => {\n        return viewport.getCurrentImageId() === imageId;\n      });\n      if (!viewports || !viewports.length) {\n        return;\n      }\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('volumeId:')) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const viewports = utilities.getViewportsWithVolumeId(volumeId, renderingEngine.id);\n      if (!viewports || !viewports.length) {\n        return;\n      }\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('videoId:')) {\n      const imageURI = utilities.imageIdToURI(targetId);\n      const viewports = utilities.getViewportsWithImageURI(imageURI, renderingEngine.id);\n      if (!viewports || !viewports.length) {\n        return;\n      }\n      return viewports[0].getImageData();\n    } else {\n      throw new Error('getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"');\n    }\n  }\n  getTargetId(viewport) {\n    if (viewport instanceof StackViewport) {\n      return `imageId:${viewport.getCurrentImageId()}`;\n    } else if (viewport instanceof BaseVolumeViewport) {\n      return `volumeId:${this.getTargetVolumeId(viewport)}`;\n    } else if (viewport instanceof VideoViewport) {\n      return `videoId:${viewport.getCurrentImageId()}`;\n    } else {\n      throw new Error('getTargetId: viewport must be a StackViewport or VolumeViewport');\n    }\n  }\n}\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;","map":{"version":3,"names":["StackViewport","utilities","BaseVolumeViewport","VideoViewport","ToolModes","BaseTool","constructor","toolProps","defaultToolProps","initialProps","deepMerge","configuration","supportedInteractionTypes","toolGroupId","strategies","defaultStrategy","undefined","activeStrategy","strategyOptions","Object","assign","mode","Disabled","getToolName","toolName","applyActiveStrategy","enabledElement","operationData","call","applyActiveStrategyCallback","callbackType","setConfiguration","newConfiguration","setActiveStrategy","strategyName","getTargetVolumeId","viewport","volumeId","actorEntries","getActors","find","actorEntry","actor","getClassName","uid","getTargetIdImage","targetId","renderingEngine","startsWith","imageId","split","imageURI","imageIdToURI","viewports","getViewportsWithImageURI","id","length","filter","getCurrentImageId","getImageData","getViewportsWithVolumeId","Error","getTargetId"],"sources":["../../../../src/tools/base/BaseTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}