{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { StackViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities } from '@cornerstonejs/core';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { isVolumeSegmentation } from '../../tools/segmentation/strategies/utils/stackVolumeCheck';\nimport triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nconst enable = function (element) {\n  const {\n    viewport\n  } = getEnabledElement(element);\n  if (!(viewport instanceof StackViewport)) {\n    return;\n  }\n  element.addEventListener(Enums.Events.STACK_NEW_IMAGE, _imageChangeEventListener);\n  element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n  const {\n    viewport\n  } = getEnabledElement(element);\n  if (!(viewport instanceof StackViewport)) {\n    return;\n  }\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, _imageChangeEventListener);\n  element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nfunction _imageChangeEventListener(evt) {\n  const eventData = evt.detail;\n  const {\n    viewportId,\n    renderingEngineId\n  } = eventData;\n  const {\n    viewport\n  } = getEnabledElementByIds(viewportId, renderingEngineId);\n  const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n  if (!toolGroup) {\n    return;\n  }\n  let toolGroupSegmentationRepresentations = SegmentationState.getSegmentationRepresentations(toolGroup.id) || [];\n  toolGroupSegmentationRepresentations = toolGroupSegmentationRepresentations.filter(representation => representation.type === Representations.Labelmap);\n  if (!toolGroupSegmentationRepresentations?.length) {\n    return;\n  }\n  const segmentationRepresentations = {};\n  toolGroupSegmentationRepresentations.forEach(representation => {\n    const segmentation = SegmentationState.getSegmentation(representation.segmentationId);\n    if (!segmentation) {\n      return;\n    }\n    const labelmapData = segmentation.representationData[Representations.Labelmap];\n    if (isVolumeSegmentation(labelmapData)) {\n      return;\n    }\n    const {\n      imageIdReferenceMap\n    } = labelmapData;\n    segmentationRepresentations[representation.segmentationRepresentationUID] = {\n      imageIdReferenceMap\n    };\n  });\n  const representationList = Object.keys(segmentationRepresentations);\n  const currentImageId = viewport.getCurrentImageId();\n  const actors = viewport.getActors();\n  const segmentationFound = actors.find(actor => {\n    if (!representationList.includes(actor.uid)) {\n      return false;\n    }\n    return true;\n  });\n  if (!segmentationFound) {\n    triggerSegmentationRender(toolGroup.id);\n    return;\n  }\n  actors.forEach(actor => {\n    if (!representationList.includes(actor.uid)) {\n      return;\n    }\n    const segmentationActor = actor.actor;\n    const {\n      imageIdReferenceMap\n    } = segmentationRepresentations[actor.uid];\n    const derivedImageId = imageIdReferenceMap.get(currentImageId);\n    const segmentationImageData = segmentationActor.getMapper().getInputData();\n    if (!derivedImageId) {\n      const scalarArray = vtkDataArray.newInstance({\n        name: 'Pixels',\n        numberOfComponents: 1,\n        values: new Uint8Array(segmentationImageData.getNumberOfPoints())\n      });\n      const imageData = vtkImageData.newInstance();\n      imageData.getPointData().setScalars(scalarArray);\n      segmentationActor.getMapper().setInputData(imageData);\n      return;\n    }\n    const derivedImage = cache.getImage(derivedImageId);\n    const {\n      dimensions,\n      spacing,\n      direction\n    } = viewport.getImageDataMetadata(derivedImage);\n    const currentImage = cache.getImage(currentImageId);\n    const {\n      origin: currentOrigin\n    } = viewport.getImageDataMetadata(currentImage);\n    const originToUse = currentOrigin;\n    segmentationImageData.setOrigin(originToUse);\n    segmentationImageData.modified();\n    if (segmentationImageData.getDimensions()[0] !== dimensions[0] || segmentationImageData.getDimensions()[1] !== dimensions[1]) {\n      viewport.removeActors([actor.uid]);\n      viewport.addImages([{\n        imageId: derivedImageId,\n        actorUID: actor.uid,\n        callback: ({\n          imageActor\n        }) => {\n          const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: [...derivedImage.getPixelData()]\n          });\n          const imageData = vtkImageData.newInstance();\n          imageData.setDimensions(dimensions[0], dimensions[1], 1);\n          imageData.setSpacing(spacing);\n          imageData.setDirection(direction);\n          imageData.setOrigin(originToUse);\n          imageData.getPointData().setScalars(scalarArray);\n          imageActor.getMapper().setInputData(imageData);\n        }\n      }], true, false);\n      triggerSegmentationRender(toolGroup.id);\n      return;\n    }\n    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n    viewport.render();\n    if (evt.type === Enums.Events.IMAGE_RENDERED) {\n      viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n    }\n  });\n}\nexport default {\n  enable,\n  disable\n};","map":{"version":3,"names":["vtkDataArray","vtkImageData","StackViewport","getEnabledElement","Enums","getEnabledElementByIds","cache","utilities","getToolGroupForViewport","Representations","SegmentationState","isVolumeSegmentation","triggerSegmentationRender","enable","element","viewport","addEventListener","Events","STACK_NEW_IMAGE","_imageChangeEventListener","IMAGE_RENDERED","disable","removeEventListener","evt","eventData","detail","viewportId","renderingEngineId","toolGroup","toolGroupSegmentationRepresentations","getSegmentationRepresentations","id","filter","representation","type","Labelmap","length","segmentationRepresentations","forEach","segmentation","getSegmentation","segmentationId","labelmapData","representationData","imageIdReferenceMap","segmentationRepresentationUID","representationList","Object","keys","currentImageId","getCurrentImageId","actors","getActors","segmentationFound","find","actor","includes","uid","segmentationActor","derivedImageId","get","segmentationImageData","getMapper","getInputData","scalarArray","newInstance","name","numberOfComponents","values","Uint8Array","getNumberOfPoints","imageData","getPointData","setScalars","setInputData","derivedImage","getImage","dimensions","spacing","direction","getImageDataMetadata","currentImage","origin","currentOrigin","originToUse","setOrigin","modified","getDimensions","removeActors","addImages","imageId","actorUID","callback","imageActor","getPixelData","setDimensions","setSpacing","setDirection","updateVTKImageDataWithCornerstoneImage","render"],"sources":["../../../../src/eventListeners/segmentation/imageChangeEventListener.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}