{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n  constructor(toolProps = {}, defaultToolProps = {\n    supportedInteractionTypes: ['Mouse', 'Touch']\n  }) {\n    super(toolProps, defaultToolProps);\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n  _dragCallback(evt) {\n    const {\n      element,\n      currentPoints,\n      startPoints\n    } = evt.detail;\n    const currentPointWorld = currentPoints.world;\n    const startPointWorld = startPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const {\n      viewport\n    } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n    const centerCanvas = [width * 0.5, height * 0.5];\n    const centerWorld = viewport.canvasToWorld(centerCanvas);\n    let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n    const {\n      viewPlaneNormal,\n      viewUp\n    } = camera;\n    const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n    const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n    const cross = vec3.cross(vec3.create(), v1, v2);\n    if (vec3.dot(viewPlaneNormal, cross) > 0) {\n      angle = -angle;\n    }\n    if (Number.isNaN(angle)) {\n      return;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n      const rotAngle = angle * Math.PI / 180;\n      const rotMat = mat4.identity(new Float32Array(16));\n      mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n      const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n      viewport.setCamera({\n        viewUp: rotatedViewUp\n      });\n    } else {\n      const {\n        rotation\n      } = viewport.getProperties();\n      viewport.setProperties({\n        rotation: rotation + angle\n      });\n    }\n    viewport.render();\n  }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;","map":{"version":3,"names":["BaseVolumeViewport","getEnabledElement","mat4","vec3","BaseTool","angleBetweenLines","PlanarRotateTool","constructor","toolProps","defaultToolProps","supportedInteractionTypes","touchDragCallback","_dragCallback","bind","mouseDragCallback","evt","element","currentPoints","startPoints","detail","currentPointWorld","world","startPointWorld","enabledElement","viewport","camera","getCamera","width","clientWidth","height","clientHeight","centerCanvas","centerWorld","canvasToWorld","angle","viewPlaneNormal","viewUp","v1","sub","create","v2","cross","dot","Number","isNaN","rotAngle","Math","PI","rotMat","identity","Float32Array","rotate","rotatedViewUp","transformMat4","setCamera","rotation","getProperties","setProperties","render","toolName"],"sources":["../../../src/tools/PlanarRotateTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}