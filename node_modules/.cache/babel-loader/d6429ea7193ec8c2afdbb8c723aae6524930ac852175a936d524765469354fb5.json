{"ast":null,"code":"import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nasync function convertStackToVolumeViewport({\n  viewport,\n  options\n}) {\n  const renderingEngine = viewport.getRenderingEngine();\n  let {\n    volumeId\n  } = options;\n  if (volumeId.split(':').length === 1) {\n    const schema = getUnknownVolumeLoaderSchema();\n    volumeId = `${schema}:${volumeId}`;\n  }\n  const {\n    id,\n    element\n  } = viewport;\n  const viewportId = options.viewportId || id;\n  const imageIds = viewport.getImageIds();\n  const prevCamera = viewport.getCamera();\n  renderingEngine.enableElement({\n    viewportId,\n    type: ViewportType.ORTHOGRAPHIC,\n    element,\n    defaultOptions: {\n      background: options.background,\n      orientation: options.orientation\n    }\n  });\n  const volume = await createAndCacheVolume(volumeId, {\n    imageIds\n  });\n  volume.load();\n  const volumeViewport = renderingEngine.getViewport(viewportId);\n  setVolumesForViewports(renderingEngine, [{\n    volumeId\n  }], [viewportId]);\n  const volumeViewportNewVolumeHandler = () => {\n    volumeViewport.setCamera({\n      ...prevCamera\n    });\n    volumeViewport.render();\n    element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n  };\n  const addVolumeViewportNewVolumeListener = () => {\n    element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n  };\n  addVolumeViewportNewVolumeListener();\n  volumeViewport.render();\n  return volumeViewport;\n}\nexport { convertStackToVolumeViewport };","map":{"version":3,"names":["setVolumesForViewports","createAndCacheVolume","getUnknownVolumeLoaderSchema","Events","ViewportType","convertStackToVolumeViewport","viewport","options","renderingEngine","getRenderingEngine","volumeId","split","length","schema","id","element","viewportId","imageIds","getImageIds","prevCamera","getCamera","enableElement","type","ORTHOGRAPHIC","defaultOptions","background","orientation","volume","load","volumeViewport","getViewport","volumeViewportNewVolumeHandler","setCamera","render","removeEventListener","VOLUME_VIEWPORT_NEW_VOLUME","addVolumeViewportNewVolumeListener","addEventListener"],"sources":["../../../src/utilities/convertStackToVolumeViewport.ts"],"sourcesContent":[null],"mappings":"AACA,SAASA,sBAAsB,QAAQ,4BAA4B;AACnE,SACEC,oBAAoB,EACpBC,4BAA4B,QACvB,yBAAyB;AAChC,SAASC,MAAM,EAAmBC,YAAY,QAAQ,UAAU;AAahE,eAAeC,4BAA4BA,CAAC;EAC1CC,QAAQ;EACRC;AAAO,CASR;EACC,MAAMC,eAAe,GAAGF,QAAQ,CAACG,kBAAkB,EAAE;EAErD,IAAI;IAAEC;EAAQ,CAAE,GAAGH,OAAO;EAI1B,IAAIG,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;IACpC,MAAMC,MAAM,GAAGX,4BAA4B,EAAE;IAC7CQ,QAAQ,GAAG,GAAGG,MAAM,IAAIH,QAAQ,EAAE;;EAGpC,MAAM;IAAEI,EAAE;IAAEC;EAAO,CAAE,GAAGT,QAAQ;EAChC,MAAMU,UAAU,GAAGT,OAAO,CAACS,UAAU,IAAIF,EAAE;EAE3C,MAAMG,QAAQ,GAAGX,QAAQ,CAACY,WAAW,EAAE;EAGvC,MAAMC,UAAU,GAAGb,QAAQ,CAACc,SAAS,EAAE;EAGvCZ,eAAe,CAACa,aAAa,CAAC;IAC5BL,UAAU;IACVM,IAAI,EAAElB,YAAY,CAACmB,YAAY;IAC/BR,OAAO;IACPS,cAAc,EAAE;MACdC,UAAU,EAAElB,OAAO,CAACkB,UAAU;MAC9BC,WAAW,EAAEnB,OAAO,CAACmB;;GAExB,CAAC;EAOF,MAAMC,MAAM,GAAG,MAAM1B,oBAAoB,CAACS,QAAQ,EAAE;IAClDO;GACD,CAAC;EAEFU,MAAM,CAACC,IAAI,EAAE;EAIb,MAAMC,cAAc,GAClBrB,eAAe,CAACsB,WAAW,CAACd,UAAU,CACvC;EAEDhB,sBAAsB,CACpBQ,eAAe,EACf,CACE;IACEE;GACD,CACF,EACD,CAACM,UAAU,CAAC,CACb;EAED,MAAMe,8BAA8B,GAAGA,CAAA,KAAK;IAC1CF,cAAc,CAACG,SAAS,CAAC;MACvB,GAAGb;KACJ,CAAC;IACFU,cAAc,CAACI,MAAM,EAAE;IAEvBlB,OAAO,CAACmB,mBAAmB,CACzB/B,MAAM,CAACgC,0BAA0B,EACjCJ,8BAA8B,CAC/B;EACH,CAAC;EAED,MAAMK,kCAAkC,GAAGA,CAAA,KAAK;IAC9CrB,OAAO,CAACsB,gBAAgB,CACtBlC,MAAM,CAACgC,0BAA0B,EACjCJ,8BAA8B,CAC/B;EACH,CAAC;EAEDK,kCAAkC,EAAE;EAEpCP,cAAc,CAACI,MAAM,EAAE;EAEvB,OAAOJ,cAAc;AACvB;AAEA,SAASxB,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}