{"ast":null,"code":"import { vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nconst {\n  addCanvasPointsToArray,\n  getFirstIntersectionWithPolyline\n} = polyline;\nfunction checkForFirstCrossing(evt, isClosedContour) {\n  const eventDetail = evt.detail;\n  const {\n    element,\n    currentPoints,\n    lastPoints\n  } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const {\n    editCanvasPoints,\n    prevCanvasPoints\n  } = this.editData;\n  const crossedLineSegment = getFirstIntersectionWithPolyline(prevCanvasPoints, canvasPos, lastCanvasPoint, isClosedContour);\n  if (crossedLineSegment) {\n    this.editData.startCrossingIndex = crossedLineSegment[0];\n    this.removePointsUpUntilFirstCrossing(isClosedContour);\n  } else if (prevCanvasPoints.length >= 2) {\n    if (editCanvasPoints.length > this.configuration.checkCanvasEditFallbackProximity) {\n      const firstEditCanvasPoint = editCanvasPoints[0];\n      const distanceIndexPairs = [];\n      for (let i = 0; i < prevCanvasPoints.length; i++) {\n        const prevCanvasPoint = prevCanvasPoints[i];\n        const distance = vec2.distance(prevCanvasPoint, firstEditCanvasPoint);\n        distanceIndexPairs.push({\n          distance,\n          index: i\n        });\n      }\n      distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n      const twoClosestDistanceIndexPairs = [distanceIndexPairs[0], distanceIndexPairs[1]];\n      const lowestIndex = Math.min(twoClosestDistanceIndexPairs[0].index, twoClosestDistanceIndexPairs[1].index);\n      this.editData.startCrossingIndex = lowestIndex;\n    } else {\n      const dir = vec2.create();\n      vec2.subtract(dir, editCanvasPoints[1], editCanvasPoints[0]);\n      vec2.normalize(dir, dir);\n      const proximity = 6;\n      const extendedPoint = [editCanvasPoints[0][0] - dir[0] * proximity, editCanvasPoints[0][1] - dir[1] * proximity];\n      const crossedLineSegmentFromExtendedPoint = getFirstIntersectionWithPolyline(prevCanvasPoints, extendedPoint, editCanvasPoints[0], isClosedContour);\n      if (crossedLineSegmentFromExtendedPoint) {\n        const pointsToPrepend = [extendedPoint];\n        addCanvasPointsToArray(element, pointsToPrepend, editCanvasPoints[0], this.commonData);\n        editCanvasPoints.unshift(...pointsToPrepend);\n        this.removePointsUpUntilFirstCrossing(isClosedContour);\n        this.editData.editIndex = editCanvasPoints.length - 1;\n        this.editData.startCrossingIndex = crossedLineSegmentFromExtendedPoint[0];\n      }\n    }\n  }\n}\nfunction removePointsUpUntilFirstCrossing(isClosedContour) {\n  const {\n    editCanvasPoints,\n    prevCanvasPoints\n  } = this.editData;\n  let numPointsToRemove = 0;\n  for (let i = 0; i < editCanvasPoints.length - 1; i++) {\n    const firstLine = [editCanvasPoints[i], editCanvasPoints[i + 1]];\n    const didCrossLine = !!getFirstIntersectionWithPolyline(prevCanvasPoints, firstLine[0], firstLine[1], isClosedContour);\n    numPointsToRemove++;\n    if (didCrossLine) {\n      break;\n    }\n  }\n  editCanvasPoints.splice(0, numPointsToRemove);\n  this.editData.editIndex = editCanvasPoints.length - 1;\n}\nfunction checkForSecondCrossing(evt, isClosedContour) {\n  const eventDetail = evt.detail;\n  const {\n    currentPoints,\n    lastPoints\n  } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const {\n    prevCanvasPoints\n  } = this.editData;\n  const crossedLineSegment = getFirstIntersectionWithPolyline(prevCanvasPoints, canvasPos, lastCanvasPoint, isClosedContour);\n  if (!crossedLineSegment) {\n    return false;\n  }\n  return true;\n}\nfunction removePointsAfterSecondCrossing(isClosedContour) {\n  const {\n    prevCanvasPoints,\n    editCanvasPoints\n  } = this.editData;\n  for (let i = editCanvasPoints.length - 1; i > 0; i--) {\n    const lastLine = [editCanvasPoints[i], editCanvasPoints[i - 1]];\n    const didCrossLine = !!getFirstIntersectionWithPolyline(prevCanvasPoints, lastLine[0], lastLine[1], isClosedContour);\n    editCanvasPoints.pop();\n    if (didCrossLine) {\n      break;\n    }\n  }\n}\nfunction findSnapIndex() {\n  const {\n    editCanvasPoints,\n    prevCanvasPoints,\n    startCrossingIndex\n  } = this.editData;\n  if (startCrossingIndex === undefined) {\n    return;\n  }\n  const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const distanceIndexPairs = [];\n  for (let i = 0; i < prevCanvasPoints.length; i++) {\n    const prevCanvasPoint = prevCanvasPoints[i];\n    const distance = vec2.distance(prevCanvasPoint, lastEditCanvasPoint);\n    distanceIndexPairs.push({\n      distance,\n      index: i\n    });\n  }\n  distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -1);\n  for (let i = 0; i < distanceIndexPairs.length; i++) {\n    const {\n      index\n    } = distanceIndexPairs[i];\n    const snapCanvasPosition = prevCanvasPoints[index];\n    const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n    const crossedLineSegment = getFirstIntersectionWithPolyline(editCanvasPointsLessLastOne, snapCanvasPosition, lastEditCanvasPoint, false);\n    if (!crossedLineSegment) {\n      return index;\n    }\n  }\n  return -1;\n}\nfunction checkAndRemoveCrossesOnEditLine(evt) {\n  const eventDetail = evt.detail;\n  const {\n    currentPoints,\n    lastPoints\n  } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const {\n    editCanvasPoints\n  } = this.editData;\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -2);\n  const crossedLineSegment = getFirstIntersectionWithPolyline(editCanvasPointsLessLastOne, canvasPos, lastCanvasPoint, false);\n  if (!crossedLineSegment) {\n    return;\n  }\n  const editIndexCrossed = crossedLineSegment[0];\n  const numPointsToRemove = editCanvasPoints.length - editIndexCrossed;\n  for (let i = 0; i < numPointsToRemove; i++) {\n    editCanvasPoints.pop();\n  }\n}\nfunction registerEditLoopCommon(toolInstance) {\n  toolInstance.checkForFirstCrossing = checkForFirstCrossing.bind(toolInstance);\n  toolInstance.removePointsUpUntilFirstCrossing = removePointsUpUntilFirstCrossing.bind(toolInstance);\n  toolInstance.checkForSecondCrossing = checkForSecondCrossing.bind(toolInstance);\n  toolInstance.findSnapIndex = findSnapIndex.bind(toolInstance);\n  toolInstance.removePointsAfterSecondCrossing = removePointsAfterSecondCrossing.bind(toolInstance);\n  toolInstance.checkAndRemoveCrossesOnEditLine = checkAndRemoveCrossesOnEditLine.bind(toolInstance);\n}\nexport default registerEditLoopCommon;","map":{"version":3,"names":["vec2","polyline","addCanvasPointsToArray","getFirstIntersectionWithPolyline","checkForFirstCrossing","evt","isClosedContour","eventDetail","detail","element","currentPoints","lastPoints","canvasPos","canvas","lastCanvasPoint","editCanvasPoints","prevCanvasPoints","editData","crossedLineSegment","startCrossingIndex","removePointsUpUntilFirstCrossing","length","configuration","checkCanvasEditFallbackProximity","firstEditCanvasPoint","distanceIndexPairs","i","prevCanvasPoint","distance","push","index","sort","a","b","twoClosestDistanceIndexPairs","lowestIndex","Math","min","dir","create","subtract","normalize","proximity","extendedPoint","crossedLineSegmentFromExtendedPoint","pointsToPrepend","commonData","unshift","editIndex","numPointsToRemove","firstLine","didCrossLine","splice","checkForSecondCrossing","removePointsAfterSecondCrossing","lastLine","pop","findSnapIndex","undefined","lastEditCanvasPoint","editCanvasPointsLessLastOne","slice","snapCanvasPosition","checkAndRemoveCrossesOnEditLine","editIndexCrossed","registerEditLoopCommon","toolInstance","bind"],"sources":["../../../../../src/tools/annotation/planarFreehandROITool/editLoopCommon.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}