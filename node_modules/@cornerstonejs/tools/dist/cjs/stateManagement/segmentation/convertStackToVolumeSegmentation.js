"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeVolumeSegmentationFromStack = exports.convertStackToVolumeSegmentation = void 0;
const core_1 = require("@cornerstonejs/core");
const enums_1 = require("../../enums");
const addSegmentationRepresentations_1 = __importDefault(require("./addSegmentationRepresentations"));
const segmentation_1 = require("../../utilities/segmentation");
const segmentationState_1 = require("./segmentationState");
const triggerSegmentationEvents_1 = require("./triggerSegmentationEvents");
function computeVolumeSegmentationFromStack({ imageIdReferenceMap, options, }) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const segmentationImageIds = Array.from(imageIdReferenceMap.values());
        const additionalDetails = {
            imageIdReferenceMap,
        };
        const volumeId = (_a = options === null || options === void 0 ? void 0 : options.volumeId) !== null && _a !== void 0 ? _a : core_1.utilities.uuidv4();
        yield core_1.volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds, {
            additionalDetails,
        });
        return { volumeId };
    });
}
exports.computeVolumeSegmentationFromStack = computeVolumeSegmentationFromStack;
function convertStackToVolumeSegmentation({ segmentationId, options, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        const data = segmentation.representationData
            .LABELMAP;
        const { volumeId } = yield computeVolumeSegmentationFromStack({
            imageIdReferenceMap: data.imageIdReferenceMap,
            options,
        });
        yield updateSegmentationState({
            segmentationId,
            toolGroupId: options.toolGroupId,
            options,
            volumeId,
        });
    });
}
exports.convertStackToVolumeSegmentation = convertStackToVolumeSegmentation;
function updateSegmentationState({ segmentationId, toolGroupId, volumeId, options, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        if (options === null || options === void 0 ? void 0 : options.removeOriginal) {
            const data = segmentation.representationData
                .LABELMAP;
            const imageIdReferenceMap = data.imageIdReferenceMap;
            Array.from(imageIdReferenceMap.values()).forEach((imageId) => {
                core_1.cache.removeImageLoadObject(imageId);
            });
            segmentation.representationData.LABELMAP = {
                volumeId,
            };
        }
        else {
            segmentation.representationData.LABELMAP = Object.assign(Object.assign({}, segmentation.representationData.LABELMAP), { volumeId });
        }
        yield (0, addSegmentationRepresentations_1.default)(toolGroupId, [
            {
                segmentationId,
                type: enums_1.SegmentationRepresentations.Labelmap,
            },
        ]);
        (0, segmentation_1.triggerSegmentationRender)(toolGroupId);
        core_1.eventTarget.addEventListenerOnce(enums_1.Events.SEGMENTATION_RENDERED, () => (0, triggerSegmentationEvents_1.triggerSegmentationDataModified)(segmentationId));
    });
}
//# sourceMappingURL=convertStackToVolumeSegmentation.js.map