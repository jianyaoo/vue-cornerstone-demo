"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@cornerstonejs/core");
const Calculator_1 = __importDefault(require("./Calculator"));
const { PointsManager } = core_1.utilities;
class BasicStatsCalculator extends Calculator_1.default {
    static statsInit(options) {
        if (options.noPointsCollection) {
            BasicStatsCalculator.pointsInShape = null;
        }
    }
}
exports.default = BasicStatsCalculator;
_a = BasicStatsCalculator;
BasicStatsCalculator.max = [-Infinity];
BasicStatsCalculator.min = [Infinity];
BasicStatsCalculator.sum = [0];
BasicStatsCalculator.count = 0;
BasicStatsCalculator.runMean = [0];
BasicStatsCalculator.m2 = [0];
BasicStatsCalculator.pointsInShape = PointsManager.create3(1024);
BasicStatsCalculator.statsCallback = ({ value: newValue, pointLPS = null }) => {
    var _b;
    if (Array.isArray(newValue) &&
        newValue.length > 1 &&
        _a.max.length === 1) {
        _a.max.push(_a.max[0], _a.max[0]);
        _a.min.push(_a.min[0], _a.min[0]);
        _a.sum.push(_a.sum[0], _a.sum[0]);
        _a.runMean.push(0, 0);
        _a.m2.push(_a.m2[0], _a.m2[0]);
    }
    (_b = _a.pointsInShape) === null || _b === void 0 ? void 0 : _b.push(pointLPS);
    const newArray = Array.isArray(newValue) ? newValue : [newValue];
    _a.count += 1;
    _a.max.map((it, idx) => {
        const value = newArray[idx];
        const delta = value - _a.runMean[idx];
        _a.sum[idx] += value;
        _a.runMean[idx] += delta / _a.count;
        const delta2 = value - _a.runMean[idx];
        _a.m2[idx] += delta * delta2;
        _a.min[idx] = Math.min(_a.min[idx], value);
        _a.max[idx] = Math.max(it, value);
    });
};
BasicStatsCalculator.getStatistics = (options) => {
    const mean = _a.sum.map((sum) => sum / _a.count);
    const stdDev = _a.m2.map((squaredDiffSum) => Math.sqrt(squaredDiffSum / _a.count));
    const unit = (options === null || options === void 0 ? void 0 : options.unit) || null;
    const named = {
        max: {
            name: 'max',
            label: 'Max Pixel',
            value: singleArrayAsNumber(_a.max),
            unit,
        },
        min: {
            name: 'min',
            label: 'Min Pixel',
            value: singleArrayAsNumber(_a.min),
            unit,
        },
        mean: {
            name: 'mean',
            label: 'Mean Pixel',
            value: singleArrayAsNumber(mean),
            unit,
        },
        stdDev: {
            name: 'stdDev',
            label: 'Standard Deviation',
            value: singleArrayAsNumber(stdDev),
            unit,
        },
        count: {
            name: 'count',
            label: 'Pixel Count',
            value: _a.count,
            unit: null,
        },
        pointsInShape: _a.pointsInShape,
        array: [],
    };
    named.array.push(named.max, named.mean, named.stdDev, named.stdDev, named.count);
    _a.max = [-Infinity];
    _a.min = [Infinity];
    _a.sum = [0];
    _a.m2 = [0];
    _a.runMean = [0];
    _a.count = 0;
    _a.pointsInShape = PointsManager.create3(1024);
    return named;
};
function singleArrayAsNumber(val) {
    return val.length === 1 ? val[0] : val;
}
//# sourceMappingURL=BasicStatsCalculator.js.map