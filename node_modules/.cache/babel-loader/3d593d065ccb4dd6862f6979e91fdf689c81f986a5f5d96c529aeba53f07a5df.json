{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { BucketQueue } from '../BucketQueue';\nconst MAX_UINT32 = 4294967295;\nconst TWO_THIRD_PI = 2 / (3 * Math.PI);\nexport class LivewireScissors {\n  constructor(grayscalePixelData, width, height) {\n    this._getPointIndex = (row, col) => {\n      const {\n        width\n      } = this;\n      return row * width + col;\n    };\n    this._getPointCoordinate = index => {\n      const x = index % this.width;\n      const y = Math.floor(index / this.width);\n      return [x, y];\n    };\n    this._getPointCost = pointIndex => {\n      return Math.round(this.searchGranularity * this.costs[pointIndex]);\n    };\n    const numPixels = grayscalePixelData.length;\n    this.searchGranularityBits = 8;\n    this.searchGranularity = 1 << this.searchGranularityBits;\n    this.width = width;\n    this.height = height;\n    this.grayscalePixelData = grayscalePixelData;\n    this.laplace = null;\n    this.gradXNew = null;\n    this.gradYNew = null;\n    this.laplace = this._computeLaplace();\n    this.gradMagnitude = this._computeGradient();\n    this.gradXNew = this._computeGradientX();\n    this.gradYNew = this._computeGradientY();\n    this.visited = new Array(numPixels);\n    this.parents = new Uint32Array(numPixels);\n    this.costs = new Float32Array(numPixels);\n  }\n  startSearch(startPoint) {\n    const startPointIndex = this._getPointIndex(startPoint[1], startPoint[0]);\n    this.startPoint = null;\n    this.visited.fill(false);\n    this.parents.fill(MAX_UINT32);\n    this.costs.fill(Infinity);\n    this.priorityQueueNew = new BucketQueue({\n      numBits: this.searchGranularityBits,\n      getPriority: this._getPointCost\n    });\n    this.startPoint = startPoint;\n    this.costs[startPointIndex] = 0;\n    this.priorityQueueNew.push(startPointIndex);\n  }\n  findPathToPoint(targetPoint) {\n    if (!this.startPoint) {\n      throw new Error('There is no search in progress');\n    }\n    const {\n      startPoint,\n      _getPointIndex: index,\n      _getPointCoordinate: coord\n    } = this;\n    const startPointIndex = index(startPoint[1], startPoint[0]);\n    const targetPointIndex = index(targetPoint[1], targetPoint[0]);\n    const {\n      visited: visited,\n      parents: parents,\n      costs: cost,\n      priorityQueueNew: priorityQueue\n    } = this;\n    if (targetPointIndex === startPointIndex) {\n      return [];\n    }\n    while (!priorityQueue.isEmpty() && parents[targetPointIndex] === MAX_UINT32) {\n      const pointIndex = priorityQueue.pop();\n      if (visited[pointIndex]) {\n        continue;\n      }\n      const point = coord(pointIndex);\n      const neighborsPoints = this._getNeighborPoints(point);\n      visited[pointIndex] = true;\n      for (let i = 0, len = neighborsPoints.length; i < len; i++) {\n        const neighborPoint = neighborsPoints[i];\n        const neighbordPointIndex = index(neighborPoint[1], neighborPoint[0]);\n        const dist = this._getWeightedDistance(point, neighborPoint);\n        const neighborCost = cost[pointIndex] + dist;\n        if (neighborCost < cost[neighbordPointIndex]) {\n          if (cost[neighbordPointIndex] !== Infinity) {\n            priorityQueue.remove(neighbordPointIndex);\n          }\n          cost[neighbordPointIndex] = neighborCost;\n          parents[neighbordPointIndex] = pointIndex;\n          priorityQueue.push(neighbordPointIndex);\n        }\n      }\n    }\n    const pathPoints = [];\n    let pathPointIndex = targetPointIndex;\n    while (pathPointIndex !== MAX_UINT32) {\n      pathPoints.push(coord(pathPointIndex));\n      pathPointIndex = parents[pathPointIndex];\n    }\n    return pathPoints.reverse();\n  }\n  _getDeltaX(x, y) {\n    const {\n      grayscalePixelData: data,\n      width\n    } = this;\n    let index = this._getPointIndex(y, x);\n    if (x + 1 === width) {\n      index--;\n    }\n    return data[index + 1] - data[index];\n  }\n  _getDeltaY(x, y) {\n    const {\n      grayscalePixelData: data,\n      width,\n      height\n    } = this;\n    let index = this._getPointIndex(y, x);\n    if (y + 1 === height) {\n      index -= height;\n    }\n    return data[index] - data[index + width];\n  }\n  _getGradientMagnitude(x, y) {\n    const dx = this._getDeltaX(x, y);\n    const dy = this._getDeltaY(x, y);\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n  _getLaplace(x, y) {\n    const {\n      grayscalePixelData: data,\n      _getPointIndex: index\n    } = this;\n    const p02 = data[index(y - 2, x)];\n    const p11 = data[index(y - 1, x - 1)];\n    const p12 = data[index(y - 1, x)];\n    const p13 = data[index(y - 1, x + 1)];\n    const p20 = data[index(y, x - 2)];\n    const p21 = data[index(y, x - 1)];\n    const p22 = data[index(y, x)];\n    const p23 = data[index(y, x + 1)];\n    const p24 = data[index(y, x + 2)];\n    const p31 = data[index(y + 1, x - 1)];\n    const p32 = data[index(y + 1, x)];\n    const p33 = data[index(y + 1, x + 1)];\n    const p42 = data[index(y + 2, x)];\n    let lap = p02;\n    lap += p11 + 2 * p12 + p13;\n    lap += p20 + 2 * p21 - 16 * p22 + 2 * p23 + p24;\n    lap += p31 + 2 * p32 + p33;\n    lap += p42;\n    return lap;\n  }\n  _computeGradient() {\n    const {\n      width,\n      height\n    } = this;\n    const gradient = new Float32Array(width * height);\n    let pixelIndex = 0;\n    let max = 0;\n    let x = 0;\n    let y = 0;\n    for (y = 0; y < height - 1; y++) {\n      for (x = 0; x < width - 1; x++) {\n        gradient[pixelIndex] = this._getGradientMagnitude(x, y);\n        max = Math.max(gradient[pixelIndex], max);\n        pixelIndex++;\n      }\n      gradient[pixelIndex] = gradient[pixelIndex - 1];\n      pixelIndex++;\n    }\n    for (let len = gradient.length; pixelIndex < len; pixelIndex++) {\n      gradient[pixelIndex] = gradient[pixelIndex - width];\n    }\n    for (let i = 0, len = gradient.length; i < len; i++) {\n      gradient[i] = 1 - gradient[i] / max;\n    }\n    return gradient;\n  }\n  _computeLaplace() {\n    const {\n      width,\n      height,\n      _getPointIndex: index\n    } = this;\n    const laplace = new Float32Array(width * height);\n    laplace.fill(1, 0, index(2, 0));\n    for (let y = 2; y < height - 2; y++) {\n      laplace[index(y, 0)] = 1;\n      laplace[index(y, 1)] = 1;\n      for (let x = 2; x < width - 2; x++) {\n        laplace[index(y, x)] = this._getLaplace(x, y) > 0.33 ? 0 : 1;\n      }\n      laplace[index(y, width - 2)] = 1;\n      laplace[index(y, width - 1)] = 1;\n    }\n    laplace.fill(1, index(height - 2, 0));\n    return laplace;\n  }\n  _computeGradientX() {\n    const {\n      width,\n      height\n    } = this;\n    const gradX = new Float32Array(width * height);\n    let pixelIndex = 0;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width - 1; x++) {\n        gradX[pixelIndex++] = this._getDeltaX(x, y);\n      }\n      gradX[pixelIndex] = gradX[pixelIndex - 1];\n      pixelIndex++;\n    }\n    return gradX;\n  }\n  _computeGradientY() {\n    const {\n      width,\n      height\n    } = this;\n    const gradY = new Float32Array(width * height);\n    let pixelIndex = 0;\n    for (let y = 0; y < height - 1; y++) {\n      for (let x = 0; x < width; x++) {\n        gradY[pixelIndex++] = this._getDeltaY(x, y);\n      }\n    }\n    for (let len = gradY.length; pixelIndex < len; pixelIndex++) {\n      gradY[pixelIndex] = gradY[pixelIndex - width];\n    }\n    return gradY;\n  }\n  _getGradientUnitVector(px, py) {\n    const {\n      gradXNew,\n      gradYNew,\n      _getPointIndex: index\n    } = this;\n    const pointGradX = gradXNew[index(py, px)];\n    const pointGradY = gradYNew[index(py, px)];\n    let gradVecLen = Math.sqrt(pointGradX * pointGradX + pointGradY * pointGradY);\n    gradVecLen = Math.max(gradVecLen, 1e-100);\n    return [pointGradX / gradVecLen, pointGradY / gradVecLen];\n  }\n  _getGradientDirection(px, py, qx, qy) {\n    const dgpUnitVec = this._getGradientUnitVector(px, py);\n    const gdqUnitVec = this._getGradientUnitVector(qx, qy);\n    let dp = dgpUnitVec[1] * (qx - px) - dgpUnitVec[0] * (qy - py);\n    let dq = gdqUnitVec[1] * (qx - px) - gdqUnitVec[0] * (qy - py);\n    if (dp < 0) {\n      dp = -dp;\n      dq = -dq;\n    }\n    if (px !== qx && py !== qy) {\n      dp *= Math.SQRT1_2;\n      dq *= Math.SQRT1_2;\n    }\n    return TWO_THIRD_PI * (Math.acos(dp) + Math.acos(dq));\n  }\n  _getWeightedDistance(pointA, pointB) {\n    const {\n      _getPointIndex: index\n    } = this;\n    const [aX, aY] = pointA;\n    const [bX, bY] = pointB;\n    const bIndex = index(bY, bX);\n    let gradient = this.gradMagnitude[bIndex];\n    if (aX === bX || aY === bY) {\n      gradient *= Math.SQRT1_2;\n    }\n    const laplace = this.laplace[bIndex];\n    const direction = this._getGradientDirection(aX, aY, bX, bY);\n    return 0.43 * gradient + 0.43 * laplace + 0.11 * direction;\n  }\n  _getNeighborPoints(point) {\n    const {\n      width,\n      height\n    } = this;\n    const list = [];\n    const sx = Math.max(point[0] - 1, 0);\n    const sy = Math.max(point[1] - 1, 0);\n    const ex = Math.min(point[0] + 1, width - 1);\n    const ey = Math.min(point[1] + 1, height - 1);\n    for (let y = sy; y <= ey; y++) {\n      for (let x = sx; x <= ex; x++) {\n        if (x !== point[0] || y !== point[1]) {\n          list.push([x, y]);\n        }\n      }\n    }\n    return list;\n  }\n  static createInstanceFromRawPixelData(pixelData, width, height, voiRange) {\n    const numPixels = pixelData.length;\n    const grayscalePixelData = new Float32Array(numPixels);\n    const {\n      lower: minPixelValue,\n      upper: maxPixelValue\n    } = voiRange;\n    const pixelRange = maxPixelValue - minPixelValue;\n    for (let i = 0, len = pixelData.length; i < len; i++) {\n      grayscalePixelData[i] = Math.max(0, Math.min(1, (pixelData[i] - minPixelValue) / pixelRange));\n    }\n    return new LivewireScissors(grayscalePixelData, width, height);\n  }\n  static createInstanceFromRGBAPixelData(rgbaPixelData, width, height) {\n    const numPixels = rgbaPixelData.length / 4;\n    const grayscalePixelData = new Float32Array(numPixels);\n    const avgMultiplier = 1 / (3 * 255);\n    for (let i = 0, offset = 0; i < numPixels; i++, offset += 4) {\n      const red = rgbaPixelData[offset];\n      const green = rgbaPixelData[offset];\n      const blue = rgbaPixelData[offset];\n      grayscalePixelData[i] = (red + green + blue) * avgMultiplier;\n    }\n    return new LivewireScissors(grayscalePixelData, width, height);\n  }\n}","map":{"version":3,"names":["BucketQueue","MAX_UINT32","TWO_THIRD_PI","Math","PI","LivewireScissors","constructor","grayscalePixelData","width","height","_getPointIndex","row","col","_getPointCoordinate","index","x","y","floor","_getPointCost","pointIndex","round","searchGranularity","costs","numPixels","length","searchGranularityBits","laplace","gradXNew","gradYNew","_computeLaplace","gradMagnitude","_computeGradient","_computeGradientX","_computeGradientY","visited","Array","parents","Uint32Array","Float32Array","startSearch","startPoint","startPointIndex","fill","Infinity","priorityQueueNew","numBits","getPriority","push","findPathToPoint","targetPoint","Error","coord","targetPointIndex","cost","priorityQueue","isEmpty","pop","point","neighborsPoints","_getNeighborPoints","i","len","neighborPoint","neighbordPointIndex","dist","_getWeightedDistance","neighborCost","remove","pathPoints","pathPointIndex","reverse","_getDeltaX","data","_getDeltaY","_getGradientMagnitude","dx","dy","sqrt","_getLaplace","p02","p11","p12","p13","p20","p21","p22","p23","p24","p31","p32","p33","p42","lap","gradient","pixelIndex","max","gradX","gradY","_getGradientUnitVector","px","py","pointGradX","pointGradY","gradVecLen","_getGradientDirection","qx","qy","dgpUnitVec","gdqUnitVec","dp","dq","SQRT1_2","acos","pointA","pointB","aX","aY","bX","bY","bIndex","direction","list","sx","sy","ex","min","ey","createInstanceFromRawPixelData","pixelData","voiRange","lower","minPixelValue","upper","maxPixelValue","pixelRange","createInstanceFromRGBAPixelData","rgbaPixelData","avgMultiplier","offset","red","green","blue"],"sources":["../../../../src/utilities/livewire/LivewireScissors.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}