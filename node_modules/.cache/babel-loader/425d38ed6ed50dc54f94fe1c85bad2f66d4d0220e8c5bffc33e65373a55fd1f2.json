{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { cache, getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\nconst {\n  transformWorldToIndex,\n  isEqual\n} = csUtils;\nclass PaintFillTool extends BaseTool {\n  constructor(toolProps = {}, defaultToolProps = {\n    supportedInteractionTypes: ['Mouse', 'Touch']\n  }) {\n    super(toolProps, defaultToolProps);\n    this.preMouseDownCallback = evt => {\n      const eventDetail = evt.detail;\n      const {\n        currentPoints,\n        element\n      } = eventDetail;\n      const worldPos = currentPoints.world;\n      const enabledElement = getEnabledElement(element);\n      const {\n        viewport\n      } = enabledElement;\n      const camera = viewport.getCamera();\n      const {\n        viewPlaneNormal\n      } = camera;\n      const toolGroupId = this.toolGroupId;\n      const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n      if (!activeSegmentationRepresentation) {\n        throw new Error('No active segmentation detected, create one before using scissors tool');\n      }\n      const {\n        segmentationId,\n        type\n      } = activeSegmentationRepresentation;\n      const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n      const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n      const {\n        representationData\n      } = getSegmentation(segmentationId);\n      const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n      let dimensions;\n      let direction;\n      let scalarData;\n      let index;\n      if (isVolumeSegmentation(labelmapData)) {\n        const {\n          volumeId\n        } = representationData[type];\n        const segmentation = cache.getVolume(volumeId);\n        ({\n          dimensions,\n          direction\n        } = segmentation);\n        scalarData = segmentation.getScalarData();\n        index = transformWorldToIndex(segmentation.imageData, worldPos);\n      } else {\n        const {\n          imageIdReferenceMap\n        } = labelmapData;\n        const currentImageId = enabledElement.viewport.getCurrentImageId();\n        const currentSegmentationImageId = imageIdReferenceMap.get(currentImageId);\n        if (!currentSegmentationImageId) {\n          throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n        }\n        const segmentationImage = cache.getImage(currentSegmentationImageId);\n        scalarData = segmentationImage.getPixelData();\n        const {\n          imageData\n        } = viewport.getImageData();\n        dimensions = imageData.getDimensions();\n        direction = imageData.getDirection();\n        index = transformWorldToIndex(imageData, worldPos);\n      }\n      const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n      if (fixedDimension === undefined) {\n        console.warn('Oblique paint fill not yet supported');\n        return;\n      }\n      const {\n        floodFillGetter,\n        getLabelValue,\n        getScalarDataPositionFromPlane,\n        inPlaneSeedPoint,\n        fixedDimensionValue\n      } = this.generateHelpers(scalarData, dimensions, index, fixedDimension);\n      if (index[0] < 0 || index[0] >= dimensions[0] || index[1] < 0 || index[1] >= dimensions[1] || index[2] < 0 || index[2] >= dimensions[2]) {\n        return;\n      }\n      const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n      if (segmentsLocked.includes(clickedLabelValue)) {\n        return;\n      }\n      const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n      const {\n        flooded\n      } = floodFillResult;\n      flooded.forEach(index => {\n        const scalarDataPosition = getScalarDataPositionFromPlane(index[0], index[1]);\n        scalarData[scalarDataPosition] = segmentIndex;\n      });\n      const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n      triggerSegmentationDataModified(segmentationId, framesModified);\n      return true;\n    };\n    this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n      const {\n        boundaries\n      } = floodFillResult;\n      if (fixedDimension === 2) {\n        return [fixedDimensionValue];\n      }\n      let minJ = Infinity;\n      let maxJ = -Infinity;\n      for (let b = 0; b < boundaries.length; b++) {\n        const j = boundaries[b][1];\n        if (j < minJ) {\n          minJ = j;\n        }\n        if (j > maxJ) {\n          maxJ = j;\n        }\n      }\n      const framesModified = [];\n      for (let frame = minJ; frame <= maxJ; frame++) {\n        framesModified.push(frame);\n      }\n      return framesModified;\n    };\n    this.generateHelpers = (scalarData, dimensions, seedIndex3D, fixedDimension = 2) => {\n      let fixedDimensionValue;\n      let inPlaneSeedPoint;\n      switch (fixedDimension) {\n        case 0:\n          fixedDimensionValue = seedIndex3D[0];\n          inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n          break;\n        case 1:\n          fixedDimensionValue = seedIndex3D[1];\n          inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n          break;\n        case 2:\n          fixedDimensionValue = seedIndex3D[2];\n          inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n          break;\n        default:\n          throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n      }\n      const getScalarDataPosition = (x, y, z) => {\n        return z * dimensions[1] * dimensions[0] + y * dimensions[0] + x;\n      };\n      const getLabelValue = (x, y, z) => {\n        return scalarData[getScalarDataPosition(x, y, z)];\n      };\n      const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n      const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n      return {\n        getScalarDataPositionFromPlane,\n        getLabelValue,\n        floodFillGetter,\n        inPlaneSeedPoint,\n        fixedDimensionValue\n      };\n    };\n    this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n      let floodFillGetter;\n      switch (fixedDimension) {\n        case 0:\n          floodFillGetter = (y, z) => {\n            if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n              return;\n            }\n            return getLabelValue(fixedDimensionValue, y, z);\n          };\n          break;\n        case 1:\n          floodFillGetter = (x, z) => {\n            if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n              return;\n            }\n            return getLabelValue(x, fixedDimensionValue, z);\n          };\n          break;\n        case 2:\n          floodFillGetter = (x, y) => {\n            if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n              return;\n            }\n            return getLabelValue(x, y, fixedDimensionValue);\n          };\n          break;\n        default:\n          throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n      }\n      return floodFillGetter;\n    };\n    this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n      let getScalarDataPositionFromPlane;\n      switch (fixedDimension) {\n        case 0:\n          getScalarDataPositionFromPlane = (y, z) => {\n            return getScalarDataPosition(fixedDimensionValue, y, z);\n          };\n          break;\n        case 1:\n          getScalarDataPositionFromPlane = (x, z) => {\n            return getScalarDataPosition(x, fixedDimensionValue, z);\n          };\n          break;\n        case 2:\n          getScalarDataPositionFromPlane = (x, y) => {\n            return getScalarDataPosition(x, y, fixedDimensionValue);\n          };\n          break;\n        default:\n          throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n      }\n      return getScalarDataPositionFromPlane;\n    };\n  }\n  getFixedDimension(viewPlaneNormal, direction) {\n    const xDirection = direction.slice(0, 3);\n    const yDirection = direction.slice(3, 6);\n    const zDirection = direction.slice(6, 9);\n    const absoluteOfViewPlaneNormal = [Math.abs(viewPlaneNormal[0]), Math.abs(viewPlaneNormal[1]), Math.abs(viewPlaneNormal[2])];\n    const absoluteOfXDirection = [Math.abs(xDirection[0]), Math.abs(xDirection[1]), Math.abs(xDirection[2])];\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n      return 0;\n    }\n    const absoluteOfYDirection = [Math.abs(yDirection[0]), Math.abs(yDirection[1]), Math.abs(yDirection[2])];\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n      return 1;\n    }\n    const absoluteOfZDirection = [Math.abs(zDirection[0]), Math.abs(zDirection[1]), Math.abs(zDirection[2])];\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n      return 2;\n    }\n  }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;","map":{"version":3,"names":["cache","getEnabledElement","utilities","csUtils","BaseTool","SegmentationRepresentations","triggerSegmentationDataModified","segmentLocking","activeSegmentation","segmentIndex","segmentIndexController","floodFill","getSegmentation","isVolumeSegmentation","transformWorldToIndex","isEqual","PaintFillTool","constructor","toolProps","defaultToolProps","supportedInteractionTypes","preMouseDownCallback","evt","eventDetail","detail","currentPoints","element","worldPos","world","enabledElement","viewport","camera","getCamera","viewPlaneNormal","toolGroupId","activeSegmentationRepresentation","getActiveSegmentationRepresentation","Error","segmentationId","type","getActiveSegmentIndex","segmentsLocked","getLockedSegments","representationData","labelmapData","Labelmap","dimensions","direction","scalarData","index","volumeId","segmentation","getVolume","getScalarData","imageData","imageIdReferenceMap","currentImageId","getCurrentImageId","currentSegmentationImageId","get","segmentationImage","getImage","getPixelData","getImageData","getDimensions","getDirection","fixedDimension","getFixedDimension","undefined","console","warn","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","includes","floodFillResult","flooded","forEach","scalarDataPosition","framesModified","getFramesModified","boundaries","minJ","Infinity","maxJ","b","length","j","frame","push","seedIndex3D","getScalarDataPosition","x","y","z","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","xDirection","slice","yDirection","zDirection","absoluteOfViewPlaneNormal","Math","abs","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","toolName"],"sources":["../../../../src/tools/segmentation/PaintFillTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}