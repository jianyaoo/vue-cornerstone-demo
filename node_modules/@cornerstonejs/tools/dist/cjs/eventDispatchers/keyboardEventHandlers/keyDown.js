"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = require("../../store");
const getActiveToolForKeyboardEvent_1 = __importDefault(require("../shared/getActiveToolForKeyboardEvent"));
const getToolsWithActionsForKeyboardEvents_1 = __importDefault(require("../shared/getToolsWithActionsForKeyboardEvents"));
const ToolModes_1 = __importDefault(require("../../enums/ToolModes"));
function keyDown(evt) {
    const activeTool = (0, getActiveToolForKeyboardEvent_1.default)(evt);
    if (activeTool) {
        const { renderingEngineId, viewportId } = evt.detail;
        const toolGroup = store_1.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
        const toolName = activeTool.getToolName();
        if (Object.keys(toolGroup.toolOptions).includes(toolName)) {
            toolGroup.setViewportsCursorByToolName(toolName);
        }
    }
    const activeToolsWithEventBinding = (0, getToolsWithActionsForKeyboardEvents_1.default)(evt, [
        ToolModes_1.default.Active,
    ]);
    if (activeToolsWithEventBinding === null || activeToolsWithEventBinding === void 0 ? void 0 : activeToolsWithEventBinding.size) {
        const { element } = evt.detail;
        for (const [key, value] of [...activeToolsWithEventBinding.entries()]) {
            const method = typeof value.method === 'function' ? value.method : key[value.method];
            method.call(key, element, value, evt);
        }
    }
}
exports.default = keyDown;
//# sourceMappingURL=keyDown.js.map