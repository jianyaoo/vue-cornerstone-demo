"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStrategyData = void 0;
const core_1 = require("@cornerstonejs/core");
const stackVolumeCheck_1 = require("./stackVolumeCheck");
const { VoxelManager } = core_1.utilities;
function getStrategyData({ operationData, viewport }) {
    let segmentationImageData, segmentationScalarData, imageScalarData;
    let dimensions;
    if ((0, stackVolumeCheck_1.isVolumeSegmentation)(operationData)) {
        const { volumeId, referencedVolumeId } = operationData;
        const segmentationVolume = core_1.cache.getVolume(volumeId);
        const imageVolume = core_1.cache.getVolume(referencedVolumeId);
        if (!segmentationVolume || !imageVolume) {
            return;
        }
        ({ imageData: segmentationImageData } = segmentationVolume);
        segmentationScalarData = segmentationVolume.getScalarData();
        imageScalarData = imageVolume.getScalarData();
        dimensions = imageVolume.dimensions;
    }
    else {
        const { imageIdReferenceMap, segmentationRepresentationUID } = operationData;
        if (!imageIdReferenceMap) {
            return;
        }
        const currentImageId = viewport.getCurrentImageId();
        if (!currentImageId) {
            return;
        }
        const actor = viewport.getActor(segmentationRepresentationUID);
        segmentationImageData = actor.actor.getMapper().getInputData();
        const currentSegmentationImageId = imageIdReferenceMap.get(currentImageId);
        const segmentationImage = core_1.cache.getImage(currentSegmentationImageId);
        segmentationScalarData = segmentationImage.getPixelData();
        const image = core_1.cache.getImage(currentImageId);
        imageScalarData = image.getPixelData();
        dimensions = [image.columns, image.rows, 1];
    }
    return {
        segmentationImageData,
        segmentationScalarData,
        segmentationVoxelManager: VoxelManager.createVolumeVoxelManager(dimensions, segmentationScalarData),
        imageScalarData,
        imageVoxelManager: VoxelManager.createVolumeVoxelManager(dimensions, imageScalarData),
    };
}
exports.getStrategyData = getStrategyData;
//# sourceMappingURL=getStrategyData.js.map