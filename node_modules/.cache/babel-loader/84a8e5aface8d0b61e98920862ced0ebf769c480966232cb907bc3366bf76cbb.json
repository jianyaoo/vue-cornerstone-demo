{"ast":null,"code":"import { cache, utilities as csUtils, eventTarget } from '@cornerstonejs/core';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport addSegmentations from './addSegmentations';\nimport addSegmentationRepresentations from './addSegmentationRepresentations';\nimport { triggerSegmentationRender, createImageIdReferenceMap } from '../../utilities/segmentation';\nimport { getSegmentation, removeSegmentation } from './segmentationState';\nimport { triggerSegmentationDataModified } from './triggerSegmentationEvents';\nexport async function convertVolumeToStackSegmentation({\n  segmentationId,\n  options\n}) {\n  const segmentation = getSegmentation(segmentationId);\n  const {\n    toolGroupId\n  } = options;\n  const data = segmentation.representationData.LABELMAP;\n  const segmentationVolume = cache.getVolume(data.volumeId);\n  const imageIdReferenceMap = _getImageIdReferenceMapForStackSegmentation(segmentationVolume);\n  const newSegmentationId = options?.newSegmentationId ?? csUtils.uuidv4();\n  if (options?.removeOriginal ?? true) {\n    removeSegmentation(segmentationId);\n  }\n  await addSegmentations([{\n    segmentationId: newSegmentationId,\n    representation: {\n      type: SegmentationRepresentations.Labelmap,\n      data: {\n        imageIdReferenceMap\n      }\n    }\n  }]);\n  await addSegmentationRepresentations(toolGroupId, [{\n    segmentationId: newSegmentationId,\n    type: SegmentationRepresentations.Labelmap\n  }]);\n  triggerSegmentationRender(toolGroupId);\n  eventTarget.addEventListenerOnce(Events.SEGMENTATION_RENDERED, () => triggerSegmentationDataModified(newSegmentationId));\n}\nfunction _getImageIdReferenceMapForStackSegmentation(segmentationVolume) {\n  const segmentationImageIds = segmentationVolume.imageIds;\n  if (segmentationVolume.additionalDetails?.imageIdReferenceMap) {\n    return segmentationVolume.additionalDetails.imageIdReferenceMap;\n  } else if (segmentationVolume.referencedImageIds?.length && !segmentationVolume.referencedImageIds[0].startsWith('derived')) {\n    const referencedImageIds = segmentationVolume.referencedImageIds;\n    return createImageIdReferenceMap(referencedImageIds, segmentationImageIds);\n  } else {\n    const referencedVolumeId = segmentationVolume.referencedVolumeId;\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n      throw new Error('Cannot convert volumetric segmentation without referenced volume to stack segmentation yet');\n    }\n    if (!referencedVolume?.imageIds?.length) {\n      throw new Error('Cannot convert volumetric segmentation without imageIds to stack segmentation yet');\n    }\n    if (referencedVolume.imageIds?.[0].startsWith('derived')) {\n      throw new Error(`Cannot convert volume segmentation that is derived from another segmentation\n         to stack segmentation yet, include the additionalDetails.imageIdReferenceMap\n         in the volume segmentation in case you need it for the conversion`);\n    }\n    const referencedImageIds = referencedVolume.imageIds;\n    let segmentationImageIdsToUse = segmentationVolume.imageIds;\n    if (!segmentationImageIdsToUse?.length) {\n      segmentationImageIdsToUse = segmentationVolume.convertToImageSlicesAndCache();\n    }\n    return createImageIdReferenceMap(referencedImageIds, segmentationImageIdsToUse);\n  }\n}","map":{"version":3,"names":["cache","utilities","csUtils","eventTarget","Events","SegmentationRepresentations","addSegmentations","addSegmentationRepresentations","triggerSegmentationRender","createImageIdReferenceMap","getSegmentation","removeSegmentation","triggerSegmentationDataModified","convertVolumeToStackSegmentation","segmentationId","options","segmentation","toolGroupId","data","representationData","LABELMAP","segmentationVolume","getVolume","volumeId","imageIdReferenceMap","_getImageIdReferenceMapForStackSegmentation","newSegmentationId","uuidv4","removeOriginal","representation","type","Labelmap","addEventListenerOnce","SEGMENTATION_RENDERED","segmentationImageIds","imageIds","additionalDetails","referencedImageIds","length","startsWith","referencedVolumeId","referencedVolume","Error","segmentationImageIdsToUse","convertToImageSlicesAndCache"],"sources":["../../../../src/stateManagement/segmentation/convertVolumeToStackSegmentation.ts"],"sourcesContent":[null],"mappings":"AAAA,SAEEA,KAAK,EACLC,SAAS,IAAIC,OAAO,EACpBC,WAAW,QACN,qBAAqB;AAC5B,SAASC,MAAM,EAAEC,2BAA2B,QAAQ,aAAa;AACjE,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,8BAA8B,MAAM,kCAAkC;AAC7E,SACEC,yBAAyB,EACzBC,yBAAyB,QACpB,8BAA8B;AACrC,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,qBAAqB;AAEzE,SAASC,+BAA+B,QAAQ,6BAA6B;AAc7E,OAAO,eAAeC,gCAAgCA,CAAC;EACrDC,cAAc;EACdC;AAAO,CAQR;EACC,MAAMC,YAAY,GAAGN,eAAe,CAACI,cAAc,CAAC;EAEpD,MAAM;IAAEG;EAAW,CAAE,GAAGF,OAAO;EAC/B,MAAMG,IAAI,GAAGF,YAAY,CAACG,kBAAkB,CACzCC,QAA0C;EAE7C,MAAMC,kBAAkB,GAAGrB,KAAK,CAACsB,SAAS,CACxCJ,IAAI,CAACK,QAAQ,CACQ;EAEvB,MAAMC,mBAAmB,GACvBC,2CAA2C,CAACJ,kBAAkB,CAAC;EAEjE,MAAMK,iBAAiB,GAAGX,OAAO,EAAEW,iBAAiB,IAAIxB,OAAO,CAACyB,MAAM,EAAE;EAExE,IAAIZ,OAAO,EAAEa,cAAc,IAAI,IAAI,EAAE;IACnCjB,kBAAkB,CAACG,cAAc,CAAC;;EAGpC,MAAMR,gBAAgB,CAAC,CACrB;IACEQ,cAAc,EAAEY,iBAAiB;IACjCG,cAAc,EAAE;MACdC,IAAI,EAAEzB,2BAA2B,CAAC0B,QAAQ;MAC1Cb,IAAI,EAAE;QACJM;;;GAGL,CACF,CAAC;EAEF,MAAMjB,8BAA8B,CAACU,WAAW,EAAE,CAChD;IACEH,cAAc,EAAEY,iBAAiB;IACjCI,IAAI,EAAEzB,2BAA2B,CAAC0B;GACnC,CACF,CAAC;EAEFvB,yBAAyB,CAACS,WAAW,CAAC;EAGtCd,WAAW,CAAC6B,oBAAoB,CAAC5B,MAAM,CAAC6B,qBAAqB,EAAE,MAC7DrB,+BAA+B,CAACc,iBAAiB,CAAC,CACnD;AACH;AAEA,SAASD,2CAA2CA,CAClDJ,kBAAsC;EAMtC,MAAMa,oBAAoB,GAAGb,kBAAkB,CAACc,QAAQ;EAExD,IAAId,kBAAkB,CAACe,iBAAiB,EAAEZ,mBAAmB,EAAE;IAG7D,OAAOH,kBAAkB,CAACe,iBAAiB,CAACZ,mBAAmB;GAChE,MAAM,IACLH,kBAAkB,CAACgB,kBAAkB,EAAEC,MAAM,IAC7C,CAACjB,kBAAkB,CAACgB,kBAAkB,CAAC,CAAC,CAAC,CAACE,UAAU,CAAC,SAAS,CAAC,EAC/D;IAGA,MAAMF,kBAAkB,GAAGhB,kBAAkB,CAACgB,kBAAkB;IAEhE,OAAO5B,yBAAyB,CAAC4B,kBAAkB,EAAEH,oBAAoB,CAAC;GAC3E,MAAM;IAGL,MAAMM,kBAAkB,GAAGnB,kBAAkB,CAACmB,kBAAkB;IAChE,MAAMC,gBAAgB,GAAGzC,KAAK,CAACsB,SAAS,CAACkB,kBAAkB,CAAC;IAE5D,IAAI,CAACC,gBAAgB,EAAE;MACrB,MAAM,IAAIC,KAAK,CACb,4FAA4F,CAC7F;;IAGH,IAAI,CAACD,gBAAgB,EAAEN,QAAQ,EAAEG,MAAM,EAAE;MACvC,MAAM,IAAII,KAAK,CACb,mFAAmF,CACpF;;IAGH,IAAID,gBAAgB,CAACN,QAAQ,GAAG,CAAC,CAAC,CAACI,UAAU,CAAC,SAAS,CAAC,EAAE;MACxD,MAAM,IAAIG,KAAK,CACb;;2EAEmE,CACpE;;IAKH,MAAML,kBAAkB,GAAGI,gBAAgB,CAACN,QAAQ;IAEpD,IAAIQ,yBAAyB,GAAGtB,kBAAkB,CAACc,QAAQ;IAC3D,IAAI,CAACQ,yBAAyB,EAAEL,MAAM,EAAE;MAItCK,yBAAyB,GACvBtB,kBAAkB,CAACuB,4BAA4B,EAAE;;IAGrD,OAAOnC,yBAAyB,CAC9B4B,kBAAkB,EAClBM,yBAAyB,CAC1B;;AAEL"},"metadata":{},"sourceType":"module","externalDependencies":[]}