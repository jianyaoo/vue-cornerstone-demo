"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const Calculator_1 = __importDefault(require("./Calculator"));
class BasicStatsCalculator extends Calculator_1.default {
}
exports.default = BasicStatsCalculator;
_a = BasicStatsCalculator;
BasicStatsCalculator.max = [-Infinity];
BasicStatsCalculator.sum = [0];
BasicStatsCalculator.sumSquares = [0];
BasicStatsCalculator.squaredDiffSum = [0];
BasicStatsCalculator.count = 0;
BasicStatsCalculator.statsCallback = ({ value: newValue }) => {
    if (Array.isArray(newValue) &&
        newValue.length > 1 &&
        _a.max.length === 1) {
        _a.max.push(_a.max[0], _a.max[0]);
        _a.sum.push(_a.sum[0], _a.sum[0]);
        _a.sumSquares.push(_a.sumSquares[0], _a.sumSquares[0]);
        _a.squaredDiffSum.push(_a.squaredDiffSum[0], _a.squaredDiffSum[0]);
    }
    const newArray = Array.isArray(newValue) ? newValue : [newValue];
    _a.count += 1;
    _a.max.forEach((it, idx) => (_a.max[idx] = Math.max(it, newArray[idx])));
    _a.sum.map((it, idx) => (_a.sum[idx] += newArray[idx]));
    _a.sumSquares.map((it, idx) => (_a.sumSquares[idx] += Math.pow(newArray[idx], 2)));
    _a.squaredDiffSum.map((it, idx) => (_a.squaredDiffSum[idx] += Math.pow(newArray[idx] - _a.sum[idx] / _a.count, 2)));
};
BasicStatsCalculator.getStatistics = () => {
    const mean = _a.sum.map((sum) => sum / _a.count);
    const stdDev = _a.squaredDiffSum.map((squaredDiffSum) => Math.sqrt(squaredDiffSum / _a.count));
    const stdDevWithSumSquare = _a.sumSquares.map((it, idx) => Math.sqrt(_a.sumSquares[idx] / _a.count - Math.pow(mean[idx], 2)));
    const currentMax = _a.max;
    _a.max = [-Infinity];
    _a.sum = [0];
    _a.sumSquares = [0];
    _a.squaredDiffSum = [0];
    _a.count = 0;
    return [
        { name: 'max', value: singleArrayAsNumber(currentMax), unit: null },
        { name: 'mean', value: singleArrayAsNumber(mean), unit: null },
        { name: 'stdDev', value: singleArrayAsNumber(stdDev), unit: null },
        {
            name: 'stdDevWithSumSquare',
            value: singleArrayAsNumber(stdDevWithSumSquare),
            unit: null,
        },
    ];
};
function singleArrayAsNumber(val) {
    return val.length === 1 ? val[0] : val;
}
//# sourceMappingURL=BasicStatsCalculator.js.map