"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invalidateAnnotation = exports.resetAnnotationManager = exports.getAnnotationManager = exports.setAnnotationManager = exports.removeAllAnnotations = exports.removeAnnotation = exports.getAnnotation = exports.addAnnotation = exports.getNumberOfAnnotations = exports.addChildAnnotation = exports.clearParentAnnotation = exports.getChildAnnotations = exports.getParentAnnotation = exports.getAnnotations = exports.getAllAnnotations = void 0;
const core_1 = require("@cornerstonejs/core");
const enums_1 = require("../../enums");
const FrameOfReferenceSpecificAnnotationManager_1 = require("./FrameOfReferenceSpecificAnnotationManager");
const state_1 = require("./helpers/state");
let defaultManager = FrameOfReferenceSpecificAnnotationManager_1.defaultFrameOfReferenceSpecificAnnotationManager;
function getAnnotationManager() {
    return defaultManager;
}
exports.getAnnotationManager = getAnnotationManager;
function setAnnotationManager(annotationManager) {
    defaultManager = annotationManager;
}
exports.setAnnotationManager = setAnnotationManager;
function resetAnnotationManager() {
    defaultManager = FrameOfReferenceSpecificAnnotationManager_1.defaultFrameOfReferenceSpecificAnnotationManager;
}
exports.resetAnnotationManager = resetAnnotationManager;
function getAnnotations(toolName, annotationGroupSelector) {
    const manager = getAnnotationManager();
    const groupKey = manager.getGroupKey(annotationGroupSelector);
    return manager.getAnnotations(groupKey, toolName);
}
exports.getAnnotations = getAnnotations;
function getAllAnnotations() {
    const manager = getAnnotationManager();
    return manager.getAllAnnotations();
}
exports.getAllAnnotations = getAllAnnotations;
function clearParentAnnotation(annotation) {
    const { annotationUID: childUID, parentAnnotationUID } = annotation;
    if (!parentAnnotationUID) {
        return;
    }
    const parentAnnotation = getAnnotation(parentAnnotationUID);
    const childUIDIndex = parentAnnotation.childAnnotationUIDs.indexOf(childUID);
    parentAnnotation.childAnnotationUIDs.splice(childUIDIndex, 1);
    annotation.parentAnnotationUID = undefined;
}
exports.clearParentAnnotation = clearParentAnnotation;
function addChildAnnotation(parentAnnotation, childAnnotation) {
    const { annotationUID: parentUID } = parentAnnotation;
    const { annotationUID: childUID } = childAnnotation;
    clearParentAnnotation(childAnnotation);
    if (!parentAnnotation.childAnnotationUIDs) {
        parentAnnotation.childAnnotationUIDs = [];
    }
    if (parentAnnotation.childAnnotationUIDs.includes(childUID)) {
        return;
    }
    parentAnnotation.childAnnotationUIDs.push(childUID);
    childAnnotation.parentAnnotationUID = parentUID;
}
exports.addChildAnnotation = addChildAnnotation;
function getParentAnnotation(annotation) {
    return annotation.parentAnnotationUID
        ? getAnnotation(annotation.parentAnnotationUID)
        : undefined;
}
exports.getParentAnnotation = getParentAnnotation;
function getChildAnnotations(annotation) {
    var _a, _b;
    return ((_b = (_a = annotation.childAnnotationUIDs) === null || _a === void 0 ? void 0 : _a.map((childAnnotationUID) => getAnnotation(childAnnotationUID))) !== null && _b !== void 0 ? _b : []);
}
exports.getChildAnnotations = getChildAnnotations;
function addAnnotation(annotation, annotationGroupSelector) {
    if (!annotation.annotationUID) {
        annotation.annotationUID = core_1.utilities.uuidv4();
    }
    const manager = getAnnotationManager();
    if (annotationGroupSelector instanceof HTMLDivElement) {
        const groupKey = manager.getGroupKey(annotationGroupSelector);
        manager.addAnnotation(annotation, groupKey);
        (0, state_1.triggerAnnotationAddedForElement)(annotation, annotationGroupSelector);
    }
    else {
        manager.addAnnotation(annotation);
        (0, state_1.triggerAnnotationAddedForFOR)(annotation);
    }
    return annotation.annotationUID;
}
exports.addAnnotation = addAnnotation;
function getNumberOfAnnotations(toolName, annotationGroupSelector) {
    const manager = getAnnotationManager();
    const groupKey = manager.getGroupKey(annotationGroupSelector);
    return manager.getNumberOfAnnotations(groupKey, toolName);
}
exports.getNumberOfAnnotations = getNumberOfAnnotations;
function removeAnnotation(annotationUID) {
    var _a;
    if (!annotationUID) {
        return;
    }
    const manager = getAnnotationManager();
    const annotation = manager.getAnnotation(annotationUID);
    if (!annotation) {
        return;
    }
    (_a = annotation.childAnnotationUIDs) === null || _a === void 0 ? void 0 : _a.forEach((childAnnotationUID) => removeAnnotation(childAnnotationUID));
    manager.removeAnnotation(annotationUID);
    const eventType = enums_1.Events.ANNOTATION_REMOVED;
    const eventDetail = {
        annotation,
        annotationManagerUID: manager.uid,
    };
    (0, core_1.triggerEvent)(core_1.eventTarget, eventType, eventDetail);
}
exports.removeAnnotation = removeAnnotation;
function getAnnotation(annotationUID) {
    const manager = getAnnotationManager();
    const annotation = manager.getAnnotation(annotationUID);
    return annotation;
}
exports.getAnnotation = getAnnotation;
function removeAllAnnotations() {
    const manager = getAnnotationManager();
    manager.removeAllAnnotations();
}
exports.removeAllAnnotations = removeAllAnnotations;
function invalidateAnnotation(annotation) {
    let currAnnotation = annotation;
    while (currAnnotation) {
        currAnnotation.invalidated = true;
        currAnnotation = currAnnotation.parentAnnotationUID
            ? getAnnotation(currAnnotation.parentAnnotationUID)
            : undefined;
    }
}
exports.invalidateAnnotation = invalidateAnnotation;
//# sourceMappingURL=annotationState.js.map