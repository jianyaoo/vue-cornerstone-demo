{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n  getPreviewCurveSegments(controlPointPreview, closeSpline) {\n    const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n    const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n    const endCurveSegIndex = closeSpline ? previewNumCurveSegments : previewNumCurveSegments - 1;\n    const transformMatrix = this.getTransformMatrix();\n    const controlPoints = [...this.controlPoints];\n    const curveSegments = [];\n    if (!closeSpline) {\n      controlPoints.push(controlPointPreview);\n    }\n    for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n      const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n      curveSegments.push(curveSegment);\n    }\n    return curveSegments;\n  }\n  getSplineCurves() {\n    const numCurveSegments = this._getNumCurveSegments();\n    const curveSegments = new Array(numCurveSegments);\n    if (numCurveSegments <= 0) {\n      return [];\n    }\n    const transformMatrix = this.getTransformMatrix();\n    let previousCurveSegmentsLength = 0;\n    for (let i = 0; i < numCurveSegments; i++) {\n      const curveSegment = this._getCurveSegment(i, transformMatrix);\n      curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n      curveSegments[i] = curveSegment;\n      previousCurveSegmentsLength += curveSegment.length;\n    }\n    return curveSegments;\n  }\n  _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n    return closed ? controlPoints.length : Math.max(0, controlPoints.length - 1);\n  }\n  _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n    const uInt = Math.floor(u);\n    let curveSegmentIndex = uInt % numCurveSegments;\n    const t = u - uInt;\n    const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n    if (curveSegmentIndexOutOfBounds) {\n      if (this.closed) {\n        curveSegmentIndex = (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n      } else {\n        return;\n      }\n    }\n    const {\n      p0,\n      p1,\n      p2,\n      p3\n    } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n    const tt = t * t;\n    const ttt = tt * t;\n    const tValues = vec4.fromValues(1, t, tt, ttt);\n    const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n    return [vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])), vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1]))];\n  }\n  _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n    const p1Index = curveSegmentIndex;\n    const p0Index = p1Index - 1;\n    const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n    const p3Index = p2Index + 1;\n    const p1 = controlPoints[p1Index];\n    const p2 = controlPoints[p2Index];\n    let p0;\n    let p3;\n    if (p0Index >= 0) {\n      p0 = controlPoints[p0Index];\n    } else {\n      p0 = closed ? controlPoints[controlPoints.length - 1] : math.point.mirror(p2, p1);\n    }\n    if (p3Index < controlPoints.length) {\n      p3 = controlPoints[p3Index];\n    } else {\n      p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n    }\n    return {\n      p0,\n      p1,\n      p2,\n      p3\n    };\n  }\n  _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n    const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n    const numLineSegments = this.resolution + 1;\n    const inc = 1 / numLineSegments;\n    const minU = curveSegmentIndex;\n    let maxU = minU + 1;\n    if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n      maxU -= MAX_U_ERROR;\n    }\n    const lineSegments = [];\n    let startPoint;\n    let endPoint;\n    let previousLineSegmentsLength = 0;\n    for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n      u = u > maxU ? maxU : u;\n      const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n      if (!i) {\n        startPoint = point;\n        continue;\n      }\n      endPoint = point;\n      const dx = endPoint[0] - startPoint[0];\n      const dy = endPoint[1] - startPoint[1];\n      const length = Math.sqrt(dx ** 2 + dy ** 2);\n      const aabb = {\n        minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n        maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n        minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n        maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1]\n      };\n      lineSegments.push({\n        points: {\n          start: startPoint,\n          end: endPoint\n        },\n        aabb,\n        length,\n        previousLineSegmentsLength\n      });\n      startPoint = endPoint;\n      previousLineSegmentsLength += length;\n    }\n    return lineSegments;\n  }\n  _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n    const {\n      p0,\n      p1,\n      p2,\n      p3\n    } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n    const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n    let curveSegmentLength = 0;\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    lineSegments.forEach(({\n      aabb: lineSegAABB,\n      length: lineSegLength\n    }) => {\n      minX = Math.min(minX, lineSegAABB.minX);\n      minY = Math.min(minY, lineSegAABB.minY);\n      maxX = Math.max(maxX, lineSegAABB.maxX);\n      maxY = Math.max(maxY, lineSegAABB.maxY);\n      curveSegmentLength += lineSegLength;\n    });\n    return {\n      controlPoints: {\n        p0,\n        p1,\n        p2,\n        p3\n      },\n      aabb: {\n        minX,\n        minY,\n        maxX,\n        maxY\n      },\n      length: curveSegmentLength,\n      previousCurveSegmentsLength: 0,\n      lineSegments\n    };\n  }\n}\nexport { CubicSpline as default, CubicSpline };","map":{"version":3,"names":["vec4","Spline","math","MAX_U_ERROR","CubicSpline","getPreviewCurveSegments","controlPointPreview","closeSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","Math","max","endCurveSegIndex","transformMatrix","getTransformMatrix","controlPoints","curveSegments","push","i","curveSegment","_getCurveSegment","getSplineCurves","numCurveSegments","Array","previousCurveSegmentsLength","length","closed","_getPoint","u","uInt","floor","curveSegmentIndex","t","curveSegmentIndexOutOfBounds","p0","p1","p2","p3","_getCurveSegmentPoints","tt","ttt","tValues","fromValues","qValues","transformMat4","create","dot","p1Index","p0Index","p2Index","p3Index","point","mirror","_getLineSegments","numLineSegments","resolution","inc","minU","maxU","lineSegments","startPoint","endPoint","previousLineSegmentsLength","dx","dy","sqrt","aabb","minX","maxX","minY","maxY","points","start","end","curveSegmentLength","Infinity","forEach","lineSegAABB","lineSegLength","min","default"],"sources":["../../../../../src/tools/annotation/splines/CubicSpline.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}