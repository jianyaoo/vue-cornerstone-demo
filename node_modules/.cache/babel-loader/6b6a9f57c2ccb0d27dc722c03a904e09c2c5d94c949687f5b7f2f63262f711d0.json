{"ast":null,"code":"import { glMatrix, mat4, vec3 } from 'gl-matrix';\nimport { transformIJKToCanvas } from './transformIJKToCanvas';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n  const {\n    dimensions,\n    scalarData\n  } = viewport.getImageData();\n  const {\n    width: canvasWidth,\n    height: canvasHeight\n  } = viewport.getCanvas();\n  const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n  const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n  const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n  const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n  const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n  const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n  vec3.normalize(ijkRowVec, ijkRowVec);\n  vec3.normalize(ijkColVec, ijkColVec);\n  vec3.normalize(ijkSliceVec, ijkSliceVec);\n  const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n  const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n  if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n    throw new Error('Livewire is not available for rotate/oblique viewports');\n  }\n  const [sx, sy, sz] = dimensions;\n  const ijkCorners = [[0, 0, 0], [sx - 1, 0, 0], [0, sy - 1, 0], [sx - 1, sy - 1, 0], [0, 0, sz - 1], [sx - 1, 0, sz - 1], [0, sy - 1, sz - 1], [sx - 1, sy - 1, sz - 1]];\n  const canvasCorners = ijkCorners.map(ijkCorner => transformIJKToCanvas(viewport, ijkCorner));\n  const canvasAABB = canvasCorners.reduce((aabb, canvasPoint) => {\n    aabb.minX = Math.min(aabb.minX, canvasPoint[0]);\n    aabb.minY = Math.min(aabb.minY, canvasPoint[1]);\n    aabb.maxX = Math.max(aabb.maxX, canvasPoint[0]);\n    aabb.maxY = Math.max(aabb.maxY, canvasPoint[1]);\n    return aabb;\n  }, {\n    minX: Infinity,\n    minY: Infinity,\n    maxX: -Infinity,\n    maxY: -Infinity\n  });\n  const ijkTopLeft = transformCanvasToIJK(viewport, [canvasAABB.minX, canvasAABB.minY]);\n  const ijkBottomRight = transformCanvasToIJK(viewport, [canvasAABB.maxX, canvasAABB.maxY]);\n  const ijkDiagonal = vec3.sub(vec3.create(), ijkBottomRight, ijkTopLeft);\n  const sliceToIndexMatrix = mat4.fromValues(ijkRowVec[0], ijkRowVec[1], ijkRowVec[2], 0, ijkColVec[0], ijkColVec[1], ijkColVec[2], 0, ijkSliceVec[0], ijkSliceVec[1], ijkSliceVec[2], 0, ijkTopLeft[0], ijkTopLeft[1], ijkTopLeft[2], 1);\n  const indexToSliceMatrix = mat4.invert(mat4.create(), sliceToIndexMatrix);\n  const sliceWidth = vec3.dot(ijkRowVec, ijkDiagonal) + 1;\n  const sliceHeight = vec3.dot(ijkColVec, ijkDiagonal) + 1;\n  const TypedArray = scalarData.constructor;\n  const sliceData = new TypedArray(sliceWidth * sliceHeight);\n  const pixelsPerSlice = dimensions[0] * dimensions[1];\n  const ijkPixelRow = vec3.clone(ijkTopLeft);\n  const ijkPixelCol = vec3.create();\n  let slicePixelIndex = 0;\n  for (let y = 0; y < sliceHeight; y++) {\n    vec3.copy(ijkPixelCol, ijkPixelRow);\n    for (let x = 0; x < sliceWidth; x++) {\n      const volumePixelIndex = ijkPixelCol[2] * pixelsPerSlice + ijkPixelCol[1] * dimensions[0] + ijkPixelCol[0];\n      if (volumePixelIndex < scalarData.length) {\n        sliceData[slicePixelIndex] = scalarData[volumePixelIndex];\n      }\n      slicePixelIndex++;\n      vec3.add(ijkPixelCol, ijkPixelCol, ijkRowVec);\n    }\n    vec3.add(ijkPixelRow, ijkPixelRow, ijkColVec);\n  }\n  return {\n    width: sliceWidth,\n    height: sliceHeight,\n    scalarData: sliceData,\n    sliceToIndexMatrix,\n    indexToSliceMatrix\n  };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice };","map":{"version":3,"names":["glMatrix","mat4","vec3","transformIJKToCanvas","transformCanvasToIJK","getCurrentVolumeViewportSlice","viewport","dimensions","scalarData","getImageData","width","canvasWidth","height","canvasHeight","getCanvas","ijkOriginPoint","ijkRowPoint","ijkColPoint","ijkRowVec","sub","create","ijkColVec","ijkSliceVec","cross","normalize","maxIJKRowVec","Math","max","abs","maxIJKColVec","equals","Error","sx","sy","sz","ijkCorners","canvasCorners","map","ijkCorner","canvasAABB","reduce","aabb","canvasPoint","minX","min","minY","maxX","maxY","Infinity","ijkTopLeft","ijkBottomRight","ijkDiagonal","sliceToIndexMatrix","fromValues","indexToSliceMatrix","invert","sliceWidth","dot","sliceHeight","TypedArray","constructor","sliceData","pixelsPerSlice","ijkPixelRow","clone","ijkPixelCol","slicePixelIndex","y","copy","x","volumePixelIndex","length","add","default"],"sources":["../../../src/utilities/getCurrentVolumeViewportSlice.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}