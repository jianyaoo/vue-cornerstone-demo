"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@cornerstonejs/core");
const triggerSegmentationEvents_1 = require("../../stateManagement/segmentation/triggerSegmentationEvents");
const PlanarFreehandROITool_1 = __importDefault(require("./PlanarFreehandROITool"));
class PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool_1.default {
    constructor(toolProps) {
        const initialProps = core_1.utilities.deepMerge({
            configuration: {
                calculateStats: false,
                allowOpenContours: false,
            },
        }, toolProps);
        super(initialProps);
    }
    isContourSegmentationTool() {
        return true;
    }
    renderAnnotationInstance(renderContext) {
        const annotation = renderContext.annotation;
        const { invalidated } = annotation;
        const renderResult = super.renderAnnotationInstance(renderContext);
        if (invalidated) {
            const { segmentationId } = annotation.data.segmentation;
            (0, triggerSegmentationEvents_1.triggerSegmentationDataModified)(segmentationId);
        }
        return renderResult;
    }
}
PlanarFreehandContourSegmentationTool.toolName =
    'PlanarFreehandContourSegmentationTool';
exports.default = PlanarFreehandContourSegmentationTool;
//# sourceMappingURL=PlanarFreehandContourSegmentationTool.js.map