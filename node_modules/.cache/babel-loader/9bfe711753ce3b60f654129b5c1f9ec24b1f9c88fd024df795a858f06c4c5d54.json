{"ast":null,"code":"import macro from '@kitware/vtk.js/macros';\nimport vtkOpenGLTexture from '@kitware/vtk.js/Rendering/OpenGL/Texture';\nimport HalfFloat from '@kitware/vtk.js/Common/Core/HalfFloat';\nimport { getConfiguration } from '../../init';\nfunction vtkStreamingOpenGLTexture(publicAPI, model) {\n  model.classHierarchy.push('vtkStreamingOpenGLTexture');\n  const superCreate3DFilterableFromRaw = publicAPI.create3DFilterableFromRaw;\n  publicAPI.create3DFilterableFromRaw = (width, height, depth, numComps, dataType, data, preferSizeOverAccuracy) => {\n    model.inputDataType = dataType;\n    model.inputNumComps = numComps;\n    superCreate3DFilterableFromRaw(width, height, depth, numComps, dataType, data, preferSizeOverAccuracy);\n  };\n  publicAPI.update3DFromRaw = data => {\n    const {\n      updatedFrames\n    } = model;\n    if (!updatedFrames.length) {\n      return;\n    }\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind();\n    let bytesPerVoxel;\n    let TypedArrayConstructor;\n    if (data instanceof Uint8Array) {\n      bytesPerVoxel = 1;\n      TypedArrayConstructor = Uint8Array;\n    } else if (data instanceof Int16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Int16Array;\n    } else if (data instanceof Uint16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Uint16Array;\n    } else if (data instanceof Float32Array) {\n      bytesPerVoxel = 4;\n      TypedArrayConstructor = Float32Array;\n    } else {\n      throw new Error(`No support for given TypedArray.`);\n    }\n    for (let i = 0; i < updatedFrames.length; i++) {\n      if (updatedFrames[i]) {\n        model.fillSubImage3D(data, i, bytesPerVoxel, TypedArrayConstructor);\n      }\n    }\n    model.updatedFrames = [];\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n    publicAPI.deactivate();\n    return true;\n  };\n  model.fillSubImage3D = (data, frameIndex, bytesPerVoxel, TypedArrayConstructor) => {\n    const buffer = data.buffer;\n    const frameLength = model.width * model.height;\n    const frameLengthInBytes = frameLength * model.components * bytesPerVoxel;\n    const zOffset = frameIndex * frameLengthInBytes;\n    const rowLength = model.width * model.components;\n    const gl = model.context;\n    const MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    let blockHeight = Math.floor(bytesPerVoxel * MAX_TEXTURE_SIZE / model.width);\n    blockHeight = Math.min(blockHeight, model.height);\n    const {\n      useNorm16Texture,\n      preferSizeOverAccuracy\n    } = getConfiguration().rendering;\n    if (useNorm16Texture && !preferSizeOverAccuracy) {\n      blockHeight = 1;\n    }\n    const multiRowBlockLength = rowLength * blockHeight;\n    const multiRowBlockLengthInBytes = multiRowBlockLength * bytesPerVoxel;\n    const normalBlocks = Math.floor(model.height / blockHeight);\n    const lastBlockHeight = model.height % blockHeight;\n    const multiRowLastBlockLength = rowLength * lastBlockHeight;\n    for (let block = 0; block < normalBlocks; block++) {\n      const yOffset = block * blockHeight;\n      let dataView = new TypedArrayConstructor(buffer, zOffset + block * multiRowBlockLengthInBytes, multiRowBlockLength);\n      if (model.useHalfFloat && (TypedArrayConstructor === Uint16Array || TypedArrayConstructor === Int16Array)) {\n        for (let idx = 0; idx < dataView.length; idx++) {\n          dataView[idx] = HalfFloat.toHalf(dataView[idx]);\n        }\n        if (TypedArrayConstructor === Int16Array) {\n          dataView = new Uint16Array(dataView);\n        }\n      }\n      gl.texSubImage3D(model.target, 0, 0, yOffset, frameIndex, model.width, blockHeight, 1, model.format, model.openGLDataType, dataView);\n    }\n    if (lastBlockHeight !== 0) {\n      const yOffset = normalBlocks * blockHeight;\n      const dataView = new TypedArrayConstructor(buffer, zOffset + normalBlocks * multiRowBlockLengthInBytes, multiRowLastBlockLength);\n      gl.texSubImage3D(model.target, 0, 0, yOffset, frameIndex, model.width, lastBlockHeight, 1, model.format, model.openGLDataType, dataView);\n    }\n  };\n  publicAPI.getTextureParameters = () => {\n    return {\n      width: model.width,\n      height: model.height,\n      depth: model.depth,\n      numComps: model.inputNumComps,\n      dataType: model.inputDataType\n    };\n  };\n  publicAPI.setUpdatedFrame = frameIndex => {\n    model.updatedFrames[frameIndex] = true;\n  };\n}\nconst DEFAULT_VALUES = {\n  updatedFrames: []\n};\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkOpenGLTexture.extend(publicAPI, model, initialValues);\n  vtkStreamingOpenGLTexture(publicAPI, model);\n}\nexport const newInstance = macro.newInstance(extend, 'vtkStreamingOpenGLTexture');\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkOpenGLTexture","HalfFloat","getConfiguration","vtkStreamingOpenGLTexture","publicAPI","model","classHierarchy","push","superCreate3DFilterableFromRaw","create3DFilterableFromRaw","width","height","depth","numComps","dataType","data","preferSizeOverAccuracy","inputDataType","inputNumComps","update3DFromRaw","updatedFrames","length","_openGLRenderWindow","activateTexture","createTexture","bind","bytesPerVoxel","TypedArrayConstructor","Uint8Array","Int16Array","Uint16Array","Float32Array","Error","i","fillSubImage3D","generateMipmap","context","target","deactivate","frameIndex","buffer","frameLength","frameLengthInBytes","components","zOffset","rowLength","gl","MAX_TEXTURE_SIZE","getParameter","blockHeight","Math","floor","min","useNorm16Texture","rendering","multiRowBlockLength","multiRowBlockLengthInBytes","normalBlocks","lastBlockHeight","multiRowLastBlockLength","block","yOffset","dataView","useHalfFloat","idx","toHalf","texSubImage3D","format","openGLDataType","getTextureParameters","setUpdatedFrame","DEFAULT_VALUES","extend","initialValues","Object","assign","newInstance"],"sources":["../../../../src/RenderingEngine/vtkClasses/vtkStreamingOpenGLTexture.js"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}