{"ast":null,"code":"import { metaData } from '../';\nexport default function makeVolumeMetadata(imageIds) {\n  const imageId0 = imageIds[0];\n  const {\n    pixelRepresentation,\n    bitsAllocated,\n    bitsStored,\n    highBit,\n    photometricInterpretation,\n    samplesPerPixel\n  } = metaData.get('imagePixelModule', imageId0);\n  const voiLut = [];\n  const voiLutModule = metaData.get('voiLutModule', imageId0);\n  let voiLUTFunction;\n  if (voiLutModule) {\n    const {\n      windowWidth,\n      windowCenter\n    } = voiLutModule;\n    voiLUTFunction = voiLutModule?.voiLUTFunction;\n    if (Array.isArray(windowWidth)) {\n      for (let i = 0; i < windowWidth.length; i++) {\n        voiLut.push({\n          windowWidth: windowWidth[i],\n          windowCenter: windowCenter[i]\n        });\n      }\n    } else {\n      voiLut.push({\n        windowWidth: windowWidth,\n        windowCenter: windowCenter\n      });\n    }\n  } else {\n    voiLut.push({\n      windowWidth: undefined,\n      windowCenter: undefined\n    });\n  }\n  const {\n    modality,\n    seriesInstanceUID\n  } = metaData.get('generalSeriesModule', imageId0);\n  const {\n    imageOrientationPatient,\n    pixelSpacing,\n    frameOfReferenceUID,\n    columns,\n    rows\n  } = metaData.get('imagePlaneModule', imageId0);\n  return {\n    BitsAllocated: bitsAllocated,\n    BitsStored: bitsStored,\n    SamplesPerPixel: samplesPerPixel,\n    HighBit: highBit,\n    PhotometricInterpretation: photometricInterpretation,\n    PixelRepresentation: pixelRepresentation,\n    Modality: modality,\n    ImageOrientationPatient: imageOrientationPatient,\n    PixelSpacing: pixelSpacing,\n    FrameOfReferenceUID: frameOfReferenceUID,\n    Columns: columns,\n    Rows: rows,\n    voiLut,\n    VOILUTFunction: voiLUTFunction,\n    SeriesInstanceUID: seriesInstanceUID\n  };\n}","map":{"version":3,"names":["metaData","makeVolumeMetadata","imageIds","imageId0","pixelRepresentation","bitsAllocated","bitsStored","highBit","photometricInterpretation","samplesPerPixel","get","voiLut","voiLutModule","voiLUTFunction","windowWidth","windowCenter","Array","isArray","i","length","push","undefined","modality","seriesInstanceUID","imageOrientationPatient","pixelSpacing","frameOfReferenceUID","columns","rows","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","Modality","ImageOrientationPatient","PixelSpacing","FrameOfReferenceUID","Columns","Rows","VOILUTFunction","SeriesInstanceUID"],"sources":["../../../src/utilities/makeVolumeMetadata.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,QAAQ,QAAQ,KAAK;AAU9B,eAAc,SAAUC,kBAAkBA,CAACC,QAAuB;EAChE,MAAMC,QAAQ,GAAGD,QAAQ,CAAC,CAAC,CAAC;EAE5B,MAAM;IACJE,mBAAmB;IACnBC,aAAa;IACbC,UAAU;IACVC,OAAO;IACPC,yBAAyB;IACzBC;EAAe,CAChB,GAAGT,QAAQ,CAACU,GAAG,CAAC,kBAAkB,EAAEP,QAAQ,CAAC;EAG9C,MAAMQ,MAAM,GAAG,EAAE;EAEjB,MAAMC,YAAY,GAAGZ,QAAQ,CAACU,GAAG,CAAC,cAAc,EAAEP,QAAQ,CAAC;EAG3D,IAAIU,cAAc;EAClB,IAAID,YAAY,EAAE;IAChB,MAAM;MAAEE,WAAW;MAAEC;IAAY,CAAE,GAAGH,YAAY;IAClDC,cAAc,GAAGD,YAAY,EAAEC,cAAc;IAE7C,IAAIG,KAAK,CAACC,OAAO,CAACH,WAAW,CAAC,EAAE;MAC9B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;QAC3CP,MAAM,CAACS,IAAI,CAAC;UACVN,WAAW,EAAEA,WAAW,CAACI,CAAC,CAAC;UAC3BH,YAAY,EAAEA,YAAY,CAACG,CAAC;SAC7B,CAAC;;KAEL,MAAM;MACLP,MAAM,CAACS,IAAI,CAAC;QACVN,WAAW,EAAEA,WAAW;QACxBC,YAAY,EAAEA;OACf,CAAC;;GAEL,MAAM;IACLJ,MAAM,CAACS,IAAI,CAAC;MACVN,WAAW,EAAEO,SAAS;MACtBN,YAAY,EAAEM;KACf,CAAC;;EAGJ,MAAM;IAAEC,QAAQ;IAAEC;EAAiB,CAAE,GAAGvB,QAAQ,CAACU,GAAG,CAClD,qBAAqB,EACrBP,QAAQ,CACT;EAED,MAAM;IACJqB,uBAAuB;IACvBC,YAAY;IACZC,mBAAmB;IACnBC,OAAO;IACPC;EAAI,CACL,GAAG5B,QAAQ,CAACU,GAAG,CAAC,kBAAkB,EAAEP,QAAQ,CAAC;EAI9C,OAAO;IACL0B,aAAa,EAAExB,aAAa;IAC5ByB,UAAU,EAAExB,UAAU;IACtByB,eAAe,EAAEtB,eAAe;IAChCuB,OAAO,EAAEzB,OAAO;IAChB0B,yBAAyB,EAAEzB,yBAAyB;IACpD0B,mBAAmB,EAAE9B,mBAAmB;IACxC+B,QAAQ,EAAEb,QAAQ;IAClBc,uBAAuB,EAAEZ,uBAAuB;IAChDa,YAAY,EAAEZ,YAAY;IAC1Ba,mBAAmB,EAAEZ,mBAAmB;IACxCa,OAAO,EAAEZ,OAAO;IAChBa,IAAI,EAAEZ,IAAI;IAEVjB,MAAM;IACN8B,cAAc,EAAE5B,cAAc;IAC9B6B,iBAAiB,EAAEnB;GACpB;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}