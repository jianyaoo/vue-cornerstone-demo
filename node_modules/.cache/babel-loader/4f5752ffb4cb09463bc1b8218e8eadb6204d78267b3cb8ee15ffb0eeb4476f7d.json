{"ast":null,"code":"import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst {\n  EPSILON\n} = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n  constructor(toolProps = {}, defaultToolProps = {\n    supportedInteractionTypes: ['Mouse', 'Touch'],\n    configuration: {\n      sourceImageIds: []\n    }\n  }) {\n    super(toolProps, defaultToolProps);\n    this.onSetToolEnabled = () => {\n      this._init();\n    };\n    this.onSetToolActive = () => {\n      this._init();\n    };\n    this._init = () => {\n      const sourceImageIds = this.configuration.sourceImageIds;\n      if (!sourceImageIds?.length) {\n        console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n        return;\n      }\n      const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n      if (!imagePlaneModule) {\n        console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n        return;\n      }\n      const {\n        frameOfReferenceUID\n      } = imagePlaneModule;\n      const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n      if (!viewportsInfo?.length) {\n        console.warn('OverlayGridTool: No viewports found');\n        return;\n      }\n      const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n      if (!annotations?.length) {\n        const pointSets = sourceImageIds.map(id => {\n          return this.calculateImageIdPointSets(id);\n        });\n        const newAnnotation = {\n          highlighted: true,\n          invalidated: true,\n          metadata: {\n            toolName: this.getToolName(),\n            FrameOfReferenceUID: frameOfReferenceUID,\n            referencedImageId: null\n          },\n          data: {\n            viewportData: new Map(),\n            pointSets\n          }\n        };\n        addAnnotation(newAnnotation, frameOfReferenceUID);\n      }\n      triggerAnnotationRenderForViewportIds(getRenderingEngine(viewportsInfo[0].renderingEngineId), viewportsInfo.map(({\n        viewportId\n      }) => viewportId));\n    };\n    this.calculateImageIdPointSets = imageId => {\n      const {\n        imagePositionPatient,\n        rows,\n        columns,\n        rowCosines,\n        columnCosines,\n        rowPixelSpacing,\n        columnPixelSpacing\n      } = metaData.get('imagePlaneModule', imageId);\n      const topLeft = [...imagePositionPatient];\n      const topRight = [...imagePositionPatient];\n      const bottomLeft = [...imagePositionPatient];\n      const bottomRight = [...imagePositionPatient];\n      vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n      vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n      vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n      const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n      const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n      return {\n        pointSet1,\n        pointSet2\n      };\n    };\n    this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n      const sourceImageIds = this.configuration.sourceImageIds;\n      let renderStatus = false;\n      if (!sourceImageIds?.length) {\n        return renderStatus;\n      }\n      const {\n        viewport: targetViewport,\n        FrameOfReferenceUID\n      } = enabledElement;\n      const targetImageIds = targetViewport.getImageIds();\n      if (targetImageIds.length < 2) {\n        return renderStatus;\n      }\n      const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n      if (!annotations?.length) {\n        return renderStatus;\n      }\n      const annotation = annotations[0];\n      const {\n        annotationUID\n      } = annotation;\n      const {\n        focalPoint,\n        viewPlaneNormal\n      } = targetViewport.getCamera();\n      const styleSpecifier = {\n        toolGroupId: this.toolGroupId,\n        toolName: this.getToolName(),\n        viewportId: enabledElement.viewport.id\n      };\n      const imageIdNormal = this.getImageIdNormal(sourceImageIds[0]);\n      if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n        return renderStatus;\n      }\n      const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n      const pointSets = annotation.data.pointSets;\n      const viewportData = annotation.data.viewportData;\n      for (let i = 0; i < sourceImageIds.length; i++) {\n        const {\n          pointSet1,\n          pointSet2\n        } = pointSets[i];\n        const targetData = viewportData.get(targetViewport.id) || this.initializeViewportData(viewportData, targetViewport.id);\n        if (!targetData.pointSetsToUse[i]) {\n          let pointSetToUse = pointSet1;\n          let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n          topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n          if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n            pointSetToUse = pointSet2;\n          }\n          targetData.pointSetsToUse[i] = pointSetToUse;\n          targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n          targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n        }\n        const lineStartWorld = targetData.lineStartsWorld[i];\n        const lineEndWorld = targetData.lineEndsWorld[i];\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const canvasCoordinates = [lineStartWorld, lineEndWorld].map(world => targetViewport.worldToCanvas(world));\n        const dataId = `${annotationUID}-line`;\n        const lineUID = `${i}`;\n        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow\n        }, dataId);\n      }\n      renderStatus = true;\n      return renderStatus;\n    };\n    this.initializeViewportData = (viewportData, id) => {\n      viewportData.set(id, {\n        pointSetsToUse: [],\n        lineStartsWorld: [],\n        lineEndsWorld: []\n      });\n      return viewportData.get(id);\n    };\n    this.isPerpendicular = (vec1, vec2) => {\n      const dot = vec3.dot(vec1, vec2);\n      return Math.abs(dot) < EPSILON;\n    };\n  }\n  isParallel(vec1, vec2) {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n  getImageIdNormal(imageId) {\n    const {\n      imageOrientationPatient\n    } = metaData.get('imagePlaneModule', imageId);\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n  }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;","map":{"version":3,"names":["vec3","metaData","CONSTANTS","getRenderingEngine","utilities","csUtils","addAnnotation","getAnnotations","getToolGroup","drawLine","drawLineSvg","triggerAnnotationRenderForViewportIds","AnnotationDisplayTool","EPSILON","OverlayGridTool","constructor","toolProps","defaultToolProps","supportedInteractionTypes","configuration","sourceImageIds","onSetToolEnabled","_init","onSetToolActive","length","console","warn","imagePlaneModule","get","frameOfReferenceUID","viewportsInfo","toolGroupId","annotations","getToolName","pointSets","map","id","calculateImageIdPointSets","newAnnotation","highlighted","invalidated","metadata","toolName","FrameOfReferenceUID","referencedImageId","data","viewportData","Map","renderingEngineId","viewportId","imageId","imagePositionPatient","rows","columns","rowCosines","columnCosines","rowPixelSpacing","columnPixelSpacing","topLeft","topRight","bottomLeft","bottomRight","scaleAndAdd","pointSet1","pointSet2","renderAnnotation","enabledElement","svgDrawingHelper","renderStatus","viewport","targetViewport","targetImageIds","getImageIds","annotation","annotationUID","focalPoint","viewPlaneNormal","getCamera","styleSpecifier","imageIdNormal","getImageIdNormal","isParallel","targetViewportPlane","planar","planeEquation","i","targetData","initializeViewportData","pointSetsToUse","pointSetToUse","topBottomVec","subtract","create","normalize","isPerpendicular","lineStartsWorld","linePlaneIntersection","lineEndsWorld","lineStartWorld","lineEndWorld","lineWidth","getStyle","lineDash","color","shadow","canvasCoordinates","world","worldToCanvas","dataId","lineUID","width","set","vec1","vec2","dot","Math","abs","imageOrientationPatient","rowCosineVec","fromValues","colCosineVec","cross"],"sources":["../../../src/tools/OverlayGridTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}