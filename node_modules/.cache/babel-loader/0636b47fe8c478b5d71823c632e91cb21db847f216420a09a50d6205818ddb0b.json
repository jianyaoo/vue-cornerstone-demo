{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as math from '../../../utilities/math';\nclass Spline {\n  constructor(props) {\n    this._controlPoints = [];\n    this._invalidated = false;\n    this._length = 0;\n    this._controlPoints = [];\n    this._resolution = props?.resolution ?? 20;\n    this._closed = props?.closed ?? false;\n    this._invalidated = true;\n  }\n  get controlPoints() {\n    return this._controlPoints;\n  }\n  get numControlPoints() {\n    return this._controlPoints.length;\n  }\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(resolution) {\n    if (this._resolution === resolution) {\n      return;\n    }\n    this._resolution = resolution;\n    this.invalidated = true;\n  }\n  get closed() {\n    return this._closed;\n  }\n  set closed(closed) {\n    if (this._closed === closed) {\n      return;\n    }\n    this._closed = closed;\n    this.invalidated = true;\n  }\n  get aabb() {\n    this._update();\n    return this._aabb;\n  }\n  get length() {\n    this._update();\n    return this._length;\n  }\n  get invalidated() {\n    return this._invalidated;\n  }\n  set invalidated(invalidated) {\n    this._invalidated = invalidated;\n  }\n  hasTangentPoints() {\n    return false;\n  }\n  addControlPoint(point) {\n    this._controlPoints.push([point[0], point[1]]);\n    this.invalidated = true;\n  }\n  addControlPoints(points) {\n    points.forEach(point => this.addControlPoint(point));\n  }\n  addControlPointAtU(u) {\n    const lineSegment = this._getLineSegmentAt(u);\n    const {\n      start: startPoint,\n      end: endPoint\n    } = lineSegment.points;\n    const curveSegmentIndex = Math.floor(u);\n    const curveSegment = this._curveSegments[curveSegmentIndex];\n    const t = u - Math.floor(curveSegmentIndex);\n    const controlPointPos = [startPoint[0] + t * (endPoint[0] - startPoint[0]), startPoint[1] + t * (endPoint[1] - startPoint[1])];\n    const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n    this._controlPoints.splice(insertIndex, 0, controlPointPos);\n    this.invalidated = true;\n    return {\n      index: insertIndex,\n      point: controlPointPos\n    };\n  }\n  deleteControlPointByIndex(index) {\n    const minControlPoints = this._closed ? 3 : 1;\n    const canDelete = index >= 0 && index < this._controlPoints.length && this._controlPoints.length > minControlPoints;\n    if (!canDelete) {\n      return false;\n    }\n    this._controlPoints.splice(index, 1);\n    this.invalidated = true;\n    return true;\n  }\n  clearControlPoints() {\n    this._controlPoints = [];\n    this.invalidated = true;\n  }\n  setControlPoints(points) {\n    this.clearControlPoints();\n    this.addControlPoints(points);\n  }\n  updateControlPoint(index, newControlPoint) {\n    if (index < 0 || index >= this._controlPoints.length) {\n      throw new Error('Index out of bounds');\n    }\n    this._controlPoints[index] = [...newControlPoint];\n    this.invalidated = true;\n  }\n  getControlPoints() {\n    return this._controlPoints.map(controlPoint => [controlPoint[0], controlPoint[1]]);\n  }\n  getClosestControlPoint(point) {\n    const controlPoints = this._controlPoints;\n    let minSquaredDist = Infinity;\n    let closestPointIndex = -1;\n    for (let i = 0, len = controlPoints.length; i < len; i++) {\n      const controlPoint = controlPoints[i];\n      const dx = point[0] - controlPoint[0];\n      const dy = point[1] - controlPoint[1];\n      const squaredDist = dx * dx + dy * dy;\n      if (squaredDist < minSquaredDist) {\n        minSquaredDist = squaredDist;\n        closestPointIndex = i;\n      }\n    }\n    return {\n      index: closestPointIndex,\n      point: closestPointIndex === -1 ? undefined : [...controlPoints[closestPointIndex]],\n      distance: Math.sqrt(minSquaredDist)\n    };\n  }\n  getClosestControlPointWithinDistance(point, maxDist) {\n    const closestControlPoint = this.getClosestControlPoint(point);\n    return closestControlPoint.distance <= maxDist ? closestControlPoint : undefined;\n  }\n  getClosestPoint(point) {\n    this._update();\n    const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n    if (!curveSegmentsDistInfo.length) {\n      return;\n    }\n    curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n    let closestPoint;\n    let closestPointCurveSegmentIndex = -1;\n    let minDistSquared = Infinity;\n    let minDistCurveSegment;\n    let minDistLineSegment;\n    for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n      const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n      if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n        continue;\n      }\n      const {\n        curveSegmentIndex,\n        curveSegment\n      } = curveSegmentDistInfo;\n      const {\n        lineSegments\n      } = curveSegment;\n      for (let j = 0; j < lineSegments.length; j++) {\n        const lineSegment = lineSegments[j];\n        const {\n          point: lineSegPoint,\n          distanceSquared: lineSegDistSquared\n        } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n        if (lineSegDistSquared < minDistSquared) {\n          minDistLineSegment = lineSegment;\n          closestPointCurveSegmentIndex = curveSegmentIndex;\n          minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n          closestPoint = lineSegPoint;\n          minDistSquared = lineSegDistSquared;\n        }\n      }\n    }\n    const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength + math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n    const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n    const u = closestPointCurveSegmentIndex + t;\n    return {\n      point: closestPoint,\n      uValue: u,\n      distance: Math.sqrt(minDistSquared)\n    };\n  }\n  getClosestPointOnControlPointLines(point) {\n    const linePoints = [...this._controlPoints];\n    if (this._closed) {\n      linePoints.push(this._controlPoints[0]);\n    }\n    if (!linePoints.length) {\n      return;\n    }\n    let closestPoint;\n    let minDistSquared = Infinity;\n    let startPoint = linePoints[0];\n    for (let i = 1, len = linePoints.length; i < len; i++) {\n      const endPoint = linePoints[i];\n      const {\n        point: lineSegPoint,\n        distanceSquared: lineSegDistSquared\n      } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n      if (lineSegDistSquared < minDistSquared) {\n        closestPoint = lineSegPoint;\n        minDistSquared = lineSegDistSquared;\n      }\n      startPoint = endPoint;\n    }\n    return {\n      point: closestPoint,\n      distance: Math.sqrt(minDistSquared)\n    };\n  }\n  getPolylinePoints() {\n    this._update();\n    return this._convertCurveSegmentsToPolyline(this._curveSegments);\n  }\n  getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n    if (this._closed) {\n      return [];\n    }\n    this._update();\n    const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n    const closeSpline = closestControlPoint?.index === 0;\n    const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n    return previewCurveSegments?.length ? this._convertCurveSegmentsToPolyline(previewCurveSegments) : [];\n  }\n  isPointNearCurve(point, maxDist) {\n    this._update();\n    const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n    const maxDistSquared = maxDist * maxDist;\n    for (let i = 0; i < curveSegments.length; i++) {\n      const {\n        lineSegments\n      } = curveSegments[i];\n      for (let j = 0; j < lineSegments.length; j++) {\n        const lineSegment = lineSegments[j];\n        const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n        if (lineDistSquared <= maxDistSquared) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  containsPoint(point) {\n    this._update();\n    const controlPoints = this._controlPoints;\n    if (controlPoints.length < 3) {\n      return false;\n    }\n    const curveSegments = [...this._curveSegments];\n    const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n    if (closingCurveSegment) {\n      curveSegments.push(closingCurveSegment);\n    }\n    let numIntersections = 0;\n    for (let i = 0; i < curveSegments.length; i++) {\n      const curveSegment = curveSegments[i];\n      const {\n        aabb: curveSegAABB\n      } = curveSegment;\n      const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX && point[1] >= curveSegAABB.minY && point[1] < curveSegAABB.maxY;\n      if (!mayIntersectCurveSegment) {\n        continue;\n      }\n      const {\n        lineSegments\n      } = curveSegment;\n      for (let i = 0; i < lineSegments.length; i++) {\n        const lineSegment = lineSegments[i];\n        const {\n          aabb: lineSegmentAABB\n        } = lineSegment;\n        const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX && point[1] >= lineSegmentAABB.minY && point[1] < lineSegmentAABB.maxY;\n        if (mayIntersectLineSegment) {\n          const {\n            start: p1,\n            end: p2\n          } = lineSegment.points;\n          const isVerticalLine = p1[0] === p2[0];\n          const xIntersection = (point[1] - p1[1]) * (p2[0] - p1[0]) / (p2[1] - p1[1]) + p1[0];\n          numIntersections += isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n        }\n      }\n    }\n    return numIntersections % 2 === 1;\n  }\n  _update() {\n    if (!this._invalidated) {\n      return;\n    }\n    const curveSegments = this.getSplineCurves();\n    let length = 0;\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    for (let i = 0, len = curveSegments.length; i < len; i++) {\n      const {\n        aabb: curveSegAABB,\n        length: curveSegLength\n      } = curveSegments[i];\n      minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n      minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n      maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n      maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n      length += curveSegLength;\n    }\n    this._curveSegments = curveSegments;\n    this._aabb = {\n      minX,\n      minY,\n      maxX,\n      maxY\n    };\n    this._length = length;\n    this._invalidated = false;\n  }\n  _convertCurveSegmentsToPolyline(curveSegments) {\n    this._update();\n    const polylinePoints = [];\n    curveSegments.forEach(({\n      lineSegments\n    }, curveSegIndex) => {\n      lineSegments.forEach((lineSegment, lineSegIndex) => {\n        if (curveSegIndex === 0 && lineSegIndex === 0) {\n          polylinePoints.push([...lineSegment.points.start]);\n        }\n        polylinePoints.push([...lineSegment.points.end]);\n      });\n    });\n    return polylinePoints;\n  }\n  _getCurveSegmmentsDistanceSquaredInfo(point) {\n    this._update();\n    const curveSegmentsDistanceSquared = [];\n    const {\n      _curveSegments: curveSegments\n    } = this;\n    for (let i = 0; i < curveSegments.length; i++) {\n      const curveSegment = curveSegments[i];\n      const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n      curveSegmentsDistanceSquared.push({\n        curveSegmentIndex: i,\n        curveSegment,\n        distanceSquared\n      });\n    }\n    return curveSegmentsDistanceSquared;\n  }\n  _getCurveSegmmentsWithinDistance(point, maxDist) {\n    this._update();\n    const maxDistSquared = maxDist * maxDist;\n    if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n      return [];\n    }\n    const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n    const curveSegmentsWithinRange = [];\n    for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n      const {\n        curveSegment,\n        distanceSquared: curveSegmentDistSquared\n      } = curveSegmentsDistance[i];\n      if (curveSegmentDistSquared <= maxDistSquared) {\n        curveSegmentsWithinRange.push(curveSegment);\n      }\n    }\n    return curveSegmentsWithinRange;\n  }\n  _getLineSegmentAt(u) {\n    this._update();\n    const curveSegmentIndex = Math.floor(u);\n    const t = u - curveSegmentIndex;\n    const curveSegment = this._curveSegments[curveSegmentIndex];\n    const {\n      lineSegments\n    } = curveSegment;\n    const pointLength = curveSegment.length * t;\n    for (let i = 0; i < lineSegments.length; i++) {\n      const lineSegment = lineSegments[i];\n      const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n      if (pointLength >= lineSegment.previousLineSegmentsLength && pointLength <= lengthEnd) {\n        return lineSegment;\n      }\n    }\n  }\n  _getClosingCurveSegmentWithStraightLineSegment() {\n    if (this.closed) {\n      return;\n    }\n    const controlPoints = this._controlPoints;\n    const startControlPoint = controlPoints[0];\n    const endControlPoint = controlPoints[controlPoints.length - 1];\n    const closingLineSegment = {\n      points: {\n        start: [...startControlPoint],\n        end: [...endControlPoint]\n      },\n      aabb: {\n        minX: Math.min(startControlPoint[0], endControlPoint[0]),\n        minY: Math.min(startControlPoint[1], endControlPoint[1]),\n        maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n        maxY: Math.max(startControlPoint[1], endControlPoint[1])\n      }\n    };\n    return {\n      aabb: {\n        minX: closingLineSegment.aabb.minX,\n        minY: closingLineSegment.aabb.minY,\n        maxX: closingLineSegment.aabb.maxX,\n        maxY: closingLineSegment.aabb.maxY\n      },\n      lineSegments: [closingLineSegment]\n    };\n  }\n}\nexport { Spline as default, Spline };","map":{"version":3,"names":["math","Spline","constructor","props","_controlPoints","_invalidated","_length","_resolution","resolution","_closed","closed","controlPoints","numControlPoints","length","invalidated","aabb","_update","_aabb","hasTangentPoints","addControlPoint","point","push","addControlPoints","points","forEach","addControlPointAtU","u","lineSegment","_getLineSegmentAt","start","startPoint","end","endPoint","curveSegmentIndex","Math","floor","curveSegment","_curveSegments","t","controlPointPos","insertIndex","indexOf","p1","splice","index","deleteControlPointByIndex","minControlPoints","canDelete","clearControlPoints","setControlPoints","updateControlPoint","newControlPoint","Error","getControlPoints","map","controlPoint","getClosestControlPoint","minSquaredDist","Infinity","closestPointIndex","i","len","dx","dy","squaredDist","undefined","distance","sqrt","getClosestControlPointWithinDistance","maxDist","closestControlPoint","getClosestPoint","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","sort","csA","csB","distanceSquared","closestPoint","closestPointCurveSegmentIndex","minDistSquared","minDistCurveSegment","minDistLineSegment","curveSegmentDistInfo","lineSegments","j","lineSegPoint","lineSegDistSquared","distanceToPointSquaredInfo","curveSegmentLengthToPoint","previousLineSegmentsLength","distanceToPoint","uValue","getClosestPointOnControlPointLines","linePoints","getPolylinePoints","_convertCurveSegmentsToPolyline","getPreviewPolylinePoints","controlPointPreview","closeDistance","closeSpline","previewCurveSegments","getPreviewCurveSegments","isPointNearCurve","curveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","lineDistSquared","distanceToPointSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","mayIntersectCurveSegment","maxX","minY","maxY","lineSegmentAABB","mayIntersectLineSegment","p2","isVerticalLine","xIntersection","getSplineCurves","minX","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","min","max","default"],"sources":["../../../../../src/tools/annotation/splines/Spline.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}