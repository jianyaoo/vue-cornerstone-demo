{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var v0 = v[0],\n    v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","rotate","rad","s","Math","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","hypot","LDU","L","D","U","add","subtract","exactEquals","equals","abs","EPSILON","max","multiplyScalar","multiplyScalarAndAdd","mul","sub"],"sources":["/root/vue-cornerstone-demo/node_modules/gl-matrix/esm/mat2.js"],"sourcesContent":["import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;"],"mappings":";;;AAAA,OAAO,KAAKA,QAAQ,MAAM,aAAa;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACvB,IAAIC,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EAEpC,IAAIH,QAAQ,CAACG,UAAU,IAAIC,YAAY,EAAE;IACvCF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACZ;EAEAA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,KAAKA,CAACC,CAAC,EAAE;EACvB,IAAIJ,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EACpCD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACb,OAAOJ,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASK,IAAIA,CAACL,GAAG,EAAEI,CAAC,EAAE;EAC3BJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACb,OAAOJ,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,QAAQA,CAACN,GAAG,EAAE;EAC5BA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASO,UAAUA,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC7C,IAAIX,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EACpCD,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG;EACZR,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG;EACZT,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG;EACZV,GAAG,CAAC,CAAC,CAAC,GAAGW,GAAG;EACZ,OAAOX,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASY,GAAGA,CAACZ,GAAG,EAAEQ,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC3CX,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG;EACZR,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG;EACZT,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG;EACZV,GAAG,CAAC,CAAC,CAAC,GAAGW,GAAG;EACZ,OAAOX,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASa,SAASA,CAACb,GAAG,EAAEI,CAAC,EAAE;EAChC;EACA;EACA,IAAIJ,GAAG,KAAKI,CAAC,EAAE;IACb,IAAIU,EAAE,GAAGV,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGc,EAAE;EACb,CAAC,MAAM;IACLd,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACf;EAEA,OAAOJ,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASe,MAAMA,CAACf,GAAG,EAAEI,CAAC,EAAE;EAC7B,IAAIY,EAAE,GAAGZ,CAAC,CAAC,CAAC,CAAC;IACTU,EAAE,GAAGV,CAAC,CAAC,CAAC,CAAC;IACTa,EAAE,GAAGb,CAAC,CAAC,CAAC,CAAC;IACTc,EAAE,GAAGd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEf,IAAIe,GAAG,GAAGH,EAAE,GAAGE,EAAE,GAAGD,EAAE,GAAGH,EAAE;EAE3B,IAAI,CAACK,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EAEAA,GAAG,GAAG,GAAG,GAAGA,GAAG;EACfnB,GAAG,CAAC,CAAC,CAAC,GAAGkB,EAAE,GAAGC,GAAG;EACjBnB,GAAG,CAAC,CAAC,CAAC,GAAG,CAACc,EAAE,GAAGK,GAAG;EAClBnB,GAAG,CAAC,CAAC,CAAC,GAAG,CAACiB,EAAE,GAAGE,GAAG;EAClBnB,GAAG,CAAC,CAAC,CAAC,GAAGgB,EAAE,GAAGG,GAAG;EACjB,OAAOnB,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASoB,OAAOA,CAACpB,GAAG,EAAEI,CAAC,EAAE;EAC9B;EACA,IAAIY,EAAE,GAAGZ,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAACI,CAAC,CAAC,CAAC,CAAC;EACdJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAACI,CAAC,CAAC,CAAC,CAAC;EACdJ,GAAG,CAAC,CAAC,CAAC,GAAGgB,EAAE;EACX,OAAOhB,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASqB,WAAWA,CAACjB,CAAC,EAAE;EAC7B,OAAOA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASkB,QAAQA,CAACtB,GAAG,EAAEI,CAAC,EAAEmB,CAAC,EAAE;EAClC,IAAIP,EAAE,GAAGZ,CAAC,CAAC,CAAC,CAAC;IACTU,EAAE,GAAGV,CAAC,CAAC,CAAC,CAAC;IACTa,EAAE,GAAGb,CAAC,CAAC,CAAC,CAAC;IACTc,EAAE,GAAGd,CAAC,CAAC,CAAC,CAAC;EACb,IAAIoB,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;IACTE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;IACTG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;IACTI,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC;EACbvB,GAAG,CAAC,CAAC,CAAC,GAAGgB,EAAE,GAAGQ,EAAE,GAAGP,EAAE,GAAGQ,EAAE;EAC1BzB,GAAG,CAAC,CAAC,CAAC,GAAGc,EAAE,GAAGU,EAAE,GAAGN,EAAE,GAAGO,EAAE;EAC1BzB,GAAG,CAAC,CAAC,CAAC,GAAGgB,EAAE,GAAGU,EAAE,GAAGT,EAAE,GAAGU,EAAE;EAC1B3B,GAAG,CAAC,CAAC,CAAC,GAAGc,EAAE,GAAGY,EAAE,GAAGR,EAAE,GAAGS,EAAE;EAC1B,OAAO3B,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAS4B,MAAMA,CAAC5B,GAAG,EAAEI,CAAC,EAAEyB,GAAG,EAAE;EAClC,IAAIb,EAAE,GAAGZ,CAAC,CAAC,CAAC,CAAC;IACTU,EAAE,GAAGV,CAAC,CAAC,CAAC,CAAC;IACTa,EAAE,GAAGb,CAAC,CAAC,CAAC,CAAC;IACTc,EAAE,GAAGd,CAAC,CAAC,CAAC,CAAC;EACb,IAAI0B,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,GAAG,CAAC;EACrB,IAAII,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACL,GAAG,CAAC;EACrB7B,GAAG,CAAC,CAAC,CAAC,GAAGgB,EAAE,GAAGiB,CAAC,GAAGhB,EAAE,GAAGa,CAAC;EACxB9B,GAAG,CAAC,CAAC,CAAC,GAAGc,EAAE,GAAGmB,CAAC,GAAGf,EAAE,GAAGY,CAAC;EACxB9B,GAAG,CAAC,CAAC,CAAC,GAAGgB,EAAE,GAAG,CAACc,CAAC,GAAGb,EAAE,GAAGgB,CAAC;EACzBjC,GAAG,CAAC,CAAC,CAAC,GAAGc,EAAE,GAAG,CAACgB,CAAC,GAAGZ,EAAE,GAAGe,CAAC;EACzB,OAAOjC,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASmC,KAAKA,CAACnC,GAAG,EAAEI,CAAC,EAAEgC,CAAC,EAAE;EAC/B,IAAIpB,EAAE,GAAGZ,CAAC,CAAC,CAAC,CAAC;IACTU,EAAE,GAAGV,CAAC,CAAC,CAAC,CAAC;IACTa,EAAE,GAAGb,CAAC,CAAC,CAAC,CAAC;IACTc,EAAE,GAAGd,CAAC,CAAC,CAAC,CAAC;EACb,IAAIiC,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;IACTE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;EACbpC,GAAG,CAAC,CAAC,CAAC,GAAGgB,EAAE,GAAGqB,EAAE;EAChBrC,GAAG,CAAC,CAAC,CAAC,GAAGc,EAAE,GAAGuB,EAAE;EAChBrC,GAAG,CAAC,CAAC,CAAC,GAAGiB,EAAE,GAAGqB,EAAE;EAChBtC,GAAG,CAAC,CAAC,CAAC,GAAGkB,EAAE,GAAGoB,EAAE;EAChB,OAAOtC,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASuC,YAAYA,CAACvC,GAAG,EAAE6B,GAAG,EAAE;EACrC,IAAIC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,GAAG,CAAC;EACrB,IAAII,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACL,GAAG,CAAC;EACrB7B,GAAG,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACVjC,GAAG,CAAC,CAAC,CAAC,GAAG8B,CAAC;EACV9B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC8B,CAAC;EACX9B,GAAG,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACV,OAAOjC,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASwC,WAAWA,CAACxC,GAAG,EAAEoC,CAAC,EAAE;EAClCpC,GAAG,CAAC,CAAC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC;EACbpC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGoC,CAAC,CAAC,CAAC,CAAC;EACb,OAAOpC,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASyC,GAAGA,CAACrC,CAAC,EAAE;EACrB,OAAO,OAAO,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASsC,IAAIA,CAACtC,CAAC,EAAE;EACtB,OAAO2B,IAAI,CAACY,KAAK,CAACvC,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASwC,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE3C,CAAC,EAAE;EAC9ByC,CAAC,CAAC,CAAC,CAAC,GAAGzC,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;EAClB2C,CAAC,CAAC,CAAC,CAAC,GAAG3C,CAAC,CAAC,CAAC,CAAC;EACX2C,CAAC,CAAC,CAAC,CAAC,GAAG3C,CAAC,CAAC,CAAC,CAAC;EACX2C,CAAC,CAAC,CAAC,CAAC,GAAG3C,CAAC,CAAC,CAAC,CAAC,GAAGyC,CAAC,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACzB,OAAO,CAACF,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,GAAGA,CAAChD,GAAG,EAAEI,CAAC,EAAEmB,CAAC,EAAE;EAC7BvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC;EACpBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC;EACpBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC;EACpBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC;EACpB,OAAOvB,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASiD,QAAQA,CAACjD,GAAG,EAAEI,CAAC,EAAEmB,CAAC,EAAE;EAClCvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC;EACpBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC;EACpBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC;EACpBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC;EACpB,OAAOvB,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASkD,WAAWA,CAAC9C,CAAC,EAAEmB,CAAC,EAAE;EAChC,OAAOnB,CAAC,CAAC,CAAC,CAAC,KAAKmB,CAAC,CAAC,CAAC,CAAC,IAAInB,CAAC,CAAC,CAAC,CAAC,KAAKmB,CAAC,CAAC,CAAC,CAAC,IAAInB,CAAC,CAAC,CAAC,CAAC,KAAKmB,CAAC,CAAC,CAAC,CAAC,IAAInB,CAAC,CAAC,CAAC,CAAC,KAAKmB,CAAC,CAAC,CAAC,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAS4B,MAAMA,CAAC/C,CAAC,EAAEmB,CAAC,EAAE;EAC3B,IAAIP,EAAE,GAAGZ,CAAC,CAAC,CAAC,CAAC;IACTU,EAAE,GAAGV,CAAC,CAAC,CAAC,CAAC;IACTa,EAAE,GAAGb,CAAC,CAAC,CAAC,CAAC;IACTc,EAAE,GAAGd,CAAC,CAAC,CAAC,CAAC;EACb,IAAIoB,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;IACTE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;IACTG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;IACTI,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC;EACb,OAAOQ,IAAI,CAACqB,GAAG,CAACpC,EAAE,GAAGQ,EAAE,CAAC,IAAI1B,QAAQ,CAACuD,OAAO,GAAGtB,IAAI,CAACuB,GAAG,CAAC,GAAG,EAAEvB,IAAI,CAACqB,GAAG,CAACpC,EAAE,CAAC,EAAEe,IAAI,CAACqB,GAAG,CAAC5B,EAAE,CAAC,CAAC,IAAIO,IAAI,CAACqB,GAAG,CAACtC,EAAE,GAAGW,EAAE,CAAC,IAAI3B,QAAQ,CAACuD,OAAO,GAAGtB,IAAI,CAACuB,GAAG,CAAC,GAAG,EAAEvB,IAAI,CAACqB,GAAG,CAACtC,EAAE,CAAC,EAAEiB,IAAI,CAACqB,GAAG,CAAC3B,EAAE,CAAC,CAAC,IAAIM,IAAI,CAACqB,GAAG,CAACnC,EAAE,GAAGS,EAAE,CAAC,IAAI5B,QAAQ,CAACuD,OAAO,GAAGtB,IAAI,CAACuB,GAAG,CAAC,GAAG,EAAEvB,IAAI,CAACqB,GAAG,CAACnC,EAAE,CAAC,EAAEc,IAAI,CAACqB,GAAG,CAAC1B,EAAE,CAAC,CAAC,IAAIK,IAAI,CAACqB,GAAG,CAAClC,EAAE,GAAGS,EAAE,CAAC,IAAI7B,QAAQ,CAACuD,OAAO,GAAGtB,IAAI,CAACuB,GAAG,CAAC,GAAG,EAAEvB,IAAI,CAACqB,GAAG,CAAClC,EAAE,CAAC,EAAEa,IAAI,CAACqB,GAAG,CAACzB,EAAE,CAAC,CAAC;AACzV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAS4B,cAAcA,CAACvD,GAAG,EAAEI,CAAC,EAAEmB,CAAC,EAAE;EACxCvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC;EACjBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC;EACjBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC;EACjBvB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC;EACjB,OAAOvB,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASwD,oBAAoBA,CAACxD,GAAG,EAAEI,CAAC,EAAEmB,CAAC,EAAEY,KAAK,EAAE;EACrDnC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC,GAAGY,KAAK;EAC5BnC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC,GAAGY,KAAK;EAC5BnC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC,GAAGY,KAAK;EAC5BnC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,CAAC,CAAC,GAAGY,KAAK;EAC5B,OAAOnC,GAAG;AACZ;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIyD,GAAG,GAAGnC,QAAQ;AACzB;AACA;AACA;AACA;;AAEA,OAAO,IAAIoC,GAAG,GAAGT,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}