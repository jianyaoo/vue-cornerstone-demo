{"ast":null,"code":"import { getImageSliceDataForVolumeViewport, triggerEvent } from '../../utilities';\nimport { Events } from '../../enums';\nimport { getRenderingEngine } from '../getRenderingEngine';\nimport BaseVolumeViewport from '../BaseVolumeViewport';\nconst state = {};\nexport function resetVolumeNewImageState(viewportId) {\n  if (state[viewportId] !== undefined) {\n    delete state[viewportId];\n  }\n}\nfunction volumeNewImageEventDispatcher(cameraEvent) {\n  const {\n    renderingEngineId,\n    viewportId\n  } = cameraEvent.detail;\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n  const viewport = renderingEngine.getViewport(viewportId);\n  if (!(viewport instanceof BaseVolumeViewport)) {\n    throw new Error(`volumeNewImageEventDispatcher: viewport is not a BaseVolumeViewport`);\n  }\n  if (state[viewport.id] === undefined) {\n    state[viewport.id] = 0;\n  }\n  const sliceData = getImageSliceDataForVolumeViewport(viewport);\n  if (!sliceData) {\n    console.warn(`volumeNewImageEventDispatcher: sliceData is undefined for viewport ${viewport.id}`);\n    return;\n  }\n  const {\n    numberOfSlices,\n    imageIndex\n  } = sliceData;\n  if (state[viewport.id] === imageIndex) {\n    return;\n  }\n  state[viewport.id] = imageIndex;\n  const eventDetail = {\n    imageIndex,\n    viewportId,\n    renderingEngineId,\n    numberOfSlices\n  };\n  triggerEvent(viewport.element, Events.VOLUME_NEW_IMAGE, eventDetail);\n}\nexport default volumeNewImageEventDispatcher;","map":{"version":3,"names":["getImageSliceDataForVolumeViewport","triggerEvent","Events","getRenderingEngine","BaseVolumeViewport","state","resetVolumeNewImageState","viewportId","undefined","volumeNewImageEventDispatcher","cameraEvent","renderingEngineId","detail","renderingEngine","viewport","getViewport","Error","id","sliceData","console","warn","numberOfSlices","imageIndex","eventDetail","element","VOLUME_NEW_IMAGE"],"sources":["../../../../src/RenderingEngine/helpers/volumeNewImageEventDispatcher.ts"],"sourcesContent":[null],"mappings":"AAAA,SACEA,kCAAkC,EAClCC,YAAY,QACP,iBAAiB;AAExB,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,OAAOC,kBAAkB,MAAM,uBAAuB;AAKtD,MAAMC,KAAK,GAAqB,EAAE;AAElC,OAAM,SAAUC,wBAAwBA,CAACC,UAAkB;EACzD,IAAIF,KAAK,CAACE,UAAU,CAAC,KAAKC,SAAS,EAAE;IACnC,OAAOH,KAAK,CAACE,UAAU,CAAC;;AAE5B;AAYA,SAASE,6BAA6BA,CACpCC,WAA2C;EAE3C,MAAM;IAAEC,iBAAiB;IAAEJ;EAAU,CAAE,GAAGG,WAAW,CAACE,MAAM;EAC5D,MAAMC,eAAe,GAAGV,kBAAkB,CAACQ,iBAAiB,CAAC;EAC7D,MAAMG,QAAQ,GAAGD,eAAe,CAACE,WAAW,CAACR,UAAU,CAAC;EAExD,IAAI,EAAEO,QAAQ,YAAYV,kBAAkB,CAAC,EAAE;IAC7C,MAAM,IAAIY,KAAK,CACb,qEAAqE,CACtE;;EAGH,IAAIX,KAAK,CAACS,QAAQ,CAACG,EAAE,CAAC,KAAKT,SAAS,EAAE;IACpCH,KAAK,CAACS,QAAQ,CAACG,EAAE,CAAC,GAAG,CAAC;;EAGxB,MAAMC,SAAS,GAAGlB,kCAAkC,CAACc,QAAQ,CAAC;EAE9D,IAAI,CAACI,SAAS,EAAE;IACdC,OAAO,CAACC,IAAI,CACV,sEAAsEN,QAAQ,CAACG,EAAE,EAAE,CACpF;IACD;;EAGF,MAAM;IAAEI,cAAc;IAAEC;EAAU,CAAE,GAAGJ,SAAS;EAEhD,IAAIb,KAAK,CAACS,QAAQ,CAACG,EAAE,CAAC,KAAKK,UAAU,EAAE;IACrC;;EAGFjB,KAAK,CAACS,QAAQ,CAACG,EAAE,CAAC,GAAGK,UAAU;EAE/B,MAAMC,WAAW,GAAyC;IACxDD,UAAU;IACVf,UAAU;IACVI,iBAAiB;IACjBU;GACD;EAEDpB,YAAY,CAACa,QAAQ,CAACU,OAAO,EAAEtB,MAAM,CAACuB,gBAAgB,EAAEF,WAAW,CAAC;AACtE;AAEA,eAAed,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}