{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { api } from \"dicomweb-client\";\nimport dcmjs from \"dcmjs\";\nimport { calculateSUVScalingFactors } from \"@cornerstonejs/calculate-suv\";\nimport cornerstoneDICOMImageLoader from \"@cornerstonejs/dicom-image-loader\";\nimport { utilities } from \"@cornerstonejs/core\";\nimport { getPTImageIdInstanceMetadata } from \"./getPTImageIdInstanceMetadata\";\nimport getPixelSpacingInformation from \"./getPixelSpacingInformation\";\nimport { convertMultiframeImageIds } from \"./convertMultiframeImageIds\";\nimport removeInvalidTags from \"./removeInvalidTags\";\nimport ptScalingMetaDataProvider from \"../ptScalingMetaDataProvider\";\nconst {\n  DicomMetaDictionary\n} = dcmjs.data;\nconst {\n  calibratedPixelSpacingMetadataProvider\n} = utilities;\n\n/**\n/**\n * Uses dicomweb-client to fetch metadata of a study, cache it in cornerstone,\n * and return a list of imageIds for the frames.\n *\n * Uses the app config to choose which study to fetch, and which\n * dicom-web server to fetch it from.\n *\n * @returns {string[]} An array of imageIds for instances in the study.\n */\n\nexport default async function createImageIdsAndCacheMetaData({\n  StudyInstanceUID,\n  SeriesInstanceUID,\n  SOPInstanceUID = null,\n  wadoRsRoot,\n  client = null\n}) {\n  const SOP_INSTANCE_UID = \"00080018\";\n  const SERIES_INSTANCE_UID = \"0020000E\";\n  const MODALITY = \"00080060\";\n  const studySearchOptions = {\n    studyInstanceUID: StudyInstanceUID,\n    seriesInstanceUID: SeriesInstanceUID\n  };\n  client = client || new api.DICOMwebClient({\n    url: wadoRsRoot\n  });\n  let instances = await client.retrieveSeriesMetadata(studySearchOptions);\n\n  // if sop instance is provided we should filter the instances to only include the one we want\n  if (SOPInstanceUID) {\n    instances = instances.filter(instance => {\n      return instance[SOP_INSTANCE_UID].Value[0] === SOPInstanceUID;\n    });\n  }\n  const modality = instances[0][MODALITY].Value[0];\n  let imageIds = instances.map(instanceMetaData => {\n    const SeriesInstanceUID = instanceMetaData[SERIES_INSTANCE_UID].Value[0];\n    const SOPInstanceUIDToUse = SOPInstanceUID || instanceMetaData[SOP_INSTANCE_UID].Value[0];\n    const prefix = \"wadors:\";\n    const imageId = prefix + wadoRsRoot + \"/studies/\" + StudyInstanceUID + \"/series/\" + SeriesInstanceUID + \"/instances/\" + SOPInstanceUIDToUse + \"/frames/1\";\n    cornerstoneDICOMImageLoader.wadors.metaDataManager.add(imageId, instanceMetaData);\n    return imageId;\n  });\n\n  // if the image ids represent multiframe information, creates a new list with one image id per frame\n  // if not multiframe data available, just returns the same list given\n  imageIds = convertMultiframeImageIds(imageIds);\n  imageIds.forEach(imageId => {\n    let instanceMetaData = cornerstoneDICOMImageLoader.wadors.metaDataManager.get(imageId);\n\n    // It was using JSON.parse(JSON.stringify(...)) before but it is 8x slower\n    instanceMetaData = removeInvalidTags(instanceMetaData);\n    if (instanceMetaData) {\n      // Add calibrated pixel spacing\n      const metadata = DicomMetaDictionary.naturalizeDataset(instanceMetaData);\n      const pixelSpacing = getPixelSpacingInformation(metadata);\n      if (pixelSpacing) {\n        calibratedPixelSpacingMetadataProvider.add(imageId, {\n          rowPixelSpacing: parseFloat(pixelSpacing[0]),\n          columnPixelSpacing: parseFloat(pixelSpacing[1])\n        });\n      }\n    }\n  });\n\n  // we don't want to add non-pet\n  // Note: for 99% of scanners SUV calculation is consistent bw slices\n  if (modality === \"PT\") {\n    const InstanceMetadataArray = [];\n    imageIds.forEach(imageId => {\n      const instanceMetadata = getPTImageIdInstanceMetadata(imageId);\n\n      // TODO: Temporary fix because static-wado is producing a string, not an array of values\n      // (or maybe dcmjs isn't parsing it correctly?)\n      // It's showing up like 'DECY\\\\ATTN\\\\SCAT\\\\DTIM\\\\RAN\\\\RADL\\\\DCAL\\\\SLSENS\\\\NORM'\n      // but calculate-suv expects ['DECY', 'ATTN', ...]\n      if (typeof instanceMetadata.CorrectedImage === \"string\") {\n        instanceMetadata.CorrectedImage = instanceMetadata.CorrectedImage.split(\"\\\\\");\n      }\n      if (instanceMetadata) {\n        InstanceMetadataArray.push(instanceMetadata);\n      }\n    });\n    if (InstanceMetadataArray.length) {\n      try {\n        const suvScalingFactors = calculateSUVScalingFactors(InstanceMetadataArray);\n        InstanceMetadataArray.forEach((instanceMetadata, index) => {\n          ptScalingMetaDataProvider.addInstance(imageIds[index], suvScalingFactors[index]);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n  return imageIds;\n}","map":{"version":3,"names":["api","dcmjs","calculateSUVScalingFactors","cornerstoneDICOMImageLoader","utilities","getPTImageIdInstanceMetadata","getPixelSpacingInformation","convertMultiframeImageIds","removeInvalidTags","ptScalingMetaDataProvider","DicomMetaDictionary","data","calibratedPixelSpacingMetadataProvider","createImageIdsAndCacheMetaData","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","wadoRsRoot","client","SOP_INSTANCE_UID","SERIES_INSTANCE_UID","MODALITY","studySearchOptions","studyInstanceUID","seriesInstanceUID","DICOMwebClient","url","instances","retrieveSeriesMetadata","filter","instance","Value","modality","imageIds","map","instanceMetaData","SOPInstanceUIDToUse","prefix","imageId","wadors","metaDataManager","add","forEach","get","metadata","naturalizeDataset","pixelSpacing","rowPixelSpacing","parseFloat","columnPixelSpacing","InstanceMetadataArray","instanceMetadata","CorrectedImage","split","push","length","suvScalingFactors","index","addInstance","error","console","log"],"sources":["/Users/yzy/Documents/Playground/vue-cornerstone-demo/src/cornerstone/dicomwebClient/createImageIdsAndCacheMetaData.js"],"sourcesContent":["import { api } from \"dicomweb-client\";\nimport dcmjs from \"dcmjs\";\nimport { calculateSUVScalingFactors } from \"@cornerstonejs/calculate-suv\";\nimport cornerstoneDICOMImageLoader from \"@cornerstonejs/dicom-image-loader\";\nimport { utilities } from \"@cornerstonejs/core\";\n\nimport { getPTImageIdInstanceMetadata } from \"./getPTImageIdInstanceMetadata\";\nimport getPixelSpacingInformation from \"./getPixelSpacingInformation\";\nimport { convertMultiframeImageIds } from \"./convertMultiframeImageIds\";\nimport removeInvalidTags from \"./removeInvalidTags\";\n\nimport ptScalingMetaDataProvider from \"../ptScalingMetaDataProvider\";\n\nconst { DicomMetaDictionary } = dcmjs.data;\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\n\n/**\n/**\n * Uses dicomweb-client to fetch metadata of a study, cache it in cornerstone,\n * and return a list of imageIds for the frames.\n *\n * Uses the app config to choose which study to fetch, and which\n * dicom-web server to fetch it from.\n *\n * @returns {string[]} An array of imageIds for instances in the study.\n */\n\nexport default async function createImageIdsAndCacheMetaData({\n  StudyInstanceUID,\n  SeriesInstanceUID,\n  SOPInstanceUID = null,\n  wadoRsRoot,\n  client = null,\n}) {\n  const SOP_INSTANCE_UID = \"00080018\";\n  const SERIES_INSTANCE_UID = \"0020000E\";\n  const MODALITY = \"00080060\";\n\n  const studySearchOptions = {\n    studyInstanceUID: StudyInstanceUID,\n    seriesInstanceUID: SeriesInstanceUID,\n  };\n\n  client = client || new api.DICOMwebClient({ url: wadoRsRoot });\n  let instances = await client.retrieveSeriesMetadata(studySearchOptions);\n\n  // if sop instance is provided we should filter the instances to only include the one we want\n  if (SOPInstanceUID) {\n    instances = instances.filter((instance) => {\n      return instance[SOP_INSTANCE_UID].Value[0] === SOPInstanceUID;\n    });\n  }\n\n  const modality = instances[0][MODALITY].Value[0];\n  let imageIds = instances.map((instanceMetaData) => {\n    const SeriesInstanceUID = instanceMetaData[SERIES_INSTANCE_UID].Value[0];\n    const SOPInstanceUIDToUse =\n      SOPInstanceUID || instanceMetaData[SOP_INSTANCE_UID].Value[0];\n\n    const prefix = \"wadors:\";\n\n    const imageId =\n      prefix +\n      wadoRsRoot +\n      \"/studies/\" +\n      StudyInstanceUID +\n      \"/series/\" +\n      SeriesInstanceUID +\n      \"/instances/\" +\n      SOPInstanceUIDToUse +\n      \"/frames/1\";\n\n    cornerstoneDICOMImageLoader.wadors.metaDataManager.add(\n      imageId,\n      instanceMetaData\n    );\n    return imageId;\n  });\n\n  // if the image ids represent multiframe information, creates a new list with one image id per frame\n  // if not multiframe data available, just returns the same list given\n  imageIds = convertMultiframeImageIds(imageIds);\n\n  imageIds.forEach((imageId) => {\n    let instanceMetaData =\n      cornerstoneDICOMImageLoader.wadors.metaDataManager.get(imageId);\n\n    // It was using JSON.parse(JSON.stringify(...)) before but it is 8x slower\n    instanceMetaData = removeInvalidTags(instanceMetaData);\n\n    if (instanceMetaData) {\n      // Add calibrated pixel spacing\n      const metadata = DicomMetaDictionary.naturalizeDataset(instanceMetaData);\n      const pixelSpacing = getPixelSpacingInformation(metadata);\n\n      if (pixelSpacing) {\n        calibratedPixelSpacingMetadataProvider.add(imageId, {\n          rowPixelSpacing: parseFloat(pixelSpacing[0]),\n          columnPixelSpacing: parseFloat(pixelSpacing[1]),\n        });\n      }\n    }\n  });\n\n  // we don't want to add non-pet\n  // Note: for 99% of scanners SUV calculation is consistent bw slices\n  if (modality === \"PT\") {\n    const InstanceMetadataArray = [];\n    imageIds.forEach((imageId) => {\n      const instanceMetadata = getPTImageIdInstanceMetadata(imageId);\n\n      // TODO: Temporary fix because static-wado is producing a string, not an array of values\n      // (or maybe dcmjs isn't parsing it correctly?)\n      // It's showing up like 'DECY\\\\ATTN\\\\SCAT\\\\DTIM\\\\RAN\\\\RADL\\\\DCAL\\\\SLSENS\\\\NORM'\n      // but calculate-suv expects ['DECY', 'ATTN', ...]\n      if (typeof instanceMetadata.CorrectedImage === \"string\") {\n        instanceMetadata.CorrectedImage =\n          instanceMetadata.CorrectedImage.split(\"\\\\\");\n      }\n\n      if (instanceMetadata) {\n        InstanceMetadataArray.push(instanceMetadata);\n      }\n    });\n    if (InstanceMetadataArray.length) {\n      try {\n        const suvScalingFactors = calculateSUVScalingFactors(\n          InstanceMetadataArray\n        );\n        InstanceMetadataArray.forEach((instanceMetadata, index) => {\n          ptScalingMetaDataProvider.addInstance(\n            imageIds[index],\n            suvScalingFactors[index]\n          );\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  return imageIds;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}