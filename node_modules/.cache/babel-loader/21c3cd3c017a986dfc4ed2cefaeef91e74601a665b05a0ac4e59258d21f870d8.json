{"ast":null,"code":"import cache, { ImageVolume } from '../cache';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({\n  viewport,\n  options\n}) {\n  const volumeViewport = viewport;\n  const {\n    id,\n    element\n  } = volumeViewport;\n  const renderingEngine = viewport.getRenderingEngine();\n  const imageIdIndex = viewport.getCurrentImageIdIndex();\n  const {\n    background\n  } = options;\n  const viewportId = options.viewportId || id;\n  const actorEntry = volumeViewport.getDefaultActor();\n  const {\n    uid: volumeId\n  } = actorEntry;\n  const volume = cache.getVolume(volumeId);\n  if (!(volume instanceof ImageVolume)) {\n    throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n  }\n  const viewportInput = {\n    viewportId,\n    type: ViewportType.STACK,\n    element,\n    defaultOptions: {\n      background\n    }\n  };\n  renderingEngine.enableElement(viewportInput);\n  const stackViewport = renderingEngine.getViewport(viewportId);\n  const hasCachedImages = volume.imageCacheOffsetMap.size > 0;\n  let isAllImagesCached = false;\n  if (hasCachedImages) {\n    isAllImagesCached = volume.imageIds.every(imageId => cache.getImage(imageId));\n  }\n  const volumeUsedInOtherViewports = renderingEngine.getVolumeViewports().find(vp => vp.hasVolumeId(volumeId));\n  volume.decache(!volumeUsedInOtherViewports && isAllImagesCached);\n  const stack = [...volume.imageIds].reverse();\n  let imageIdIndexToJump = Math.max(volume.imageIds.length - imageIdIndex - 1, 0);\n  const imageToJump = cache.getImage(stack[imageIdIndexToJump]);\n  if (!imageToJump) {\n    let minDistance = Infinity;\n    let minDistanceIndex = null;\n    stack.forEach((imageId, index) => {\n      const image = cache.getImage(imageId);\n      if (image) {\n        const distance = Math.abs(imageIdIndexToJump - index);\n        if (distance < minDistance) {\n          minDistance = distance;\n          minDistanceIndex = index;\n        }\n      }\n    });\n    imageIdIndexToJump = minDistanceIndex;\n  }\n  await stackViewport.setStack(stack, imageIdIndexToJump);\n  stackViewport.render();\n  return stackViewport;\n}\nexport { convertVolumeToStackViewport };","map":{"version":3,"names":["cache","ImageVolume","ViewportType","convertVolumeToStackViewport","viewport","options","volumeViewport","id","element","renderingEngine","getRenderingEngine","imageIdIndex","getCurrentImageIdIndex","background","viewportId","actorEntry","getDefaultActor","uid","volumeId","volume","getVolume","Error","viewportInput","type","STACK","defaultOptions","enableElement","stackViewport","getViewport","hasCachedImages","imageCacheOffsetMap","size","isAllImagesCached","imageIds","every","imageId","getImage","volumeUsedInOtherViewports","getVolumeViewports","find","vp","hasVolumeId","decache","stack","reverse","imageIdIndexToJump","Math","max","length","imageToJump","minDistance","Infinity","minDistanceIndex","forEach","index","image","distance","abs","setStack","render"],"sources":["../../../src/utilities/convertVolumeToStackViewport.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}