"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@cornerstonejs/core");
const Events_1 = __importDefault(require("../enums/Events"));
class AnnotationFrameRange {
    static imageIdToFrames(imageId) {
        const match = imageId.match(this.frameRangeExtractor);
        if (!match || !match[2]) {
            return null;
        }
        const range = match[2].split('-').map((it) => Number(it));
        if (range.length === 1) {
            return range[0];
        }
        return range;
    }
    static framesToString(range) {
        if (Array.isArray(range)) {
            return `${range[0]}-${range[1]}`;
        }
        return String(range);
    }
    static framesToImageId(imageId, range) {
        const match = imageId.match(this.frameRangeExtractor);
        if (!match || !match[2]) {
            return null;
        }
        const newRangeString = this.framesToString(range);
        return imageId.replace(this.frameRangeExtractor, `${match[1]}${newRangeString}`);
    }
    static setFrameRange(annotation, range, eventBase) {
        const { referencedImageId } = annotation.metadata;
        annotation.metadata.referencedImageId = this.framesToImageId(referencedImageId, range);
        const eventDetail = Object.assign(Object.assign({}, eventBase), { annotation });
        (0, core_1.triggerEvent)(core_1.eventTarget, Events_1.default.ANNOTATION_MODIFIED, eventDetail);
    }
    static getFrameRange(annotation) {
        return this.imageIdToFrames(annotation.metadata.referencedImageId);
    }
}
exports.default = AnnotationFrameRange;
AnnotationFrameRange.frameRangeExtractor = /(\/frames\/|[&?]frameNumber=)([^/&?]*)/i;
//# sourceMappingURL=annotationFrameRange.js.map