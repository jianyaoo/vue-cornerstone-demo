{"ast":null,"code":"import vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport { cache, getEnabledElementByIds, StackViewport, VolumeViewport } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport addLabelmapToElement from './addLabelmapToElement';\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\nimport { isVolumeSegmentation } from '../../segmentation/strategies/utils/stackVolumeCheck';\nconst MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\nfunction getRepresentationRenderingConfig() {\n  const cfun = vtkColorTransferFunction.newInstance();\n  const ofun = vtkPiecewiseFunction.newInstance();\n  ofun.addPoint(0, 0);\n  return {\n    ofun,\n    cfun\n  };\n}\nfunction removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID, renderImmediate = false) {\n  _removeLabelmapFromToolGroupViewports(toolGroupId, segmentationRepresentationUID);\n  SegmentationState.removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID);\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({\n      viewportId,\n      renderingEngineId\n    }) => {\n      const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n      enabledElement.viewport.render();\n    });\n  }\n}\nfunction isSameFrameOfReference(viewport, referencedVolumeId) {\n  if (!referencedVolumeId) {\n    return true;\n  }\n  const defaultActor = viewport.getDefaultActor();\n  if (!defaultActor) {\n    return false;\n  }\n  const {\n    uid: defaultActorUID\n  } = defaultActor;\n  const volume = cache.getVolume(defaultActorUID);\n  if (volume) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (referencedVolume && volume.metadata.FrameOfReferenceUID === referencedVolume.metadata.FrameOfReferenceUID) {\n      return true;\n    }\n  }\n  return false;\n}\nasync function render(viewport, representation, toolGroupConfig) {\n  const {\n    colorLUTIndex,\n    active,\n    segmentationId,\n    segmentationRepresentationUID,\n    segmentsHidden,\n    config: renderingConfig\n  } = representation;\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  if (!segmentation) {\n    console.warn('No segmentation found for segmentationId: ', segmentationId);\n    return;\n  }\n  const labelmapData = segmentation.representationData[Representations.Labelmap];\n  let actorEntry = viewport.getActor(segmentationRepresentationUID);\n  if (isVolumeSegmentation(labelmapData)) {\n    if (viewport instanceof StackViewport) {\n      return;\n    }\n    const {\n      volumeId: labelmapUID\n    } = labelmapData;\n    const labelmap = cache.getVolume(labelmapUID);\n    if (!labelmap) {\n      throw new Error(`No Labelmap found for volumeId: ${labelmapUID}`);\n    }\n    if (!isSameFrameOfReference(viewport, labelmapData?.referencedVolumeId)) {\n      return;\n    }\n    if (!actorEntry) {\n      await _addLabelmapToViewport(viewport, labelmapData, segmentationRepresentationUID);\n    }\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  } else {\n    if (viewport instanceof VolumeViewport) {\n      return;\n    }\n    const imageId = viewport.getCurrentImageId();\n    const {\n      imageIdReferenceMap\n    } = labelmapData;\n    if (!imageIdReferenceMap.has(imageId)) {\n      return;\n    }\n    if (!actorEntry) {\n      await _addLabelmapToViewport(viewport, labelmapData, segmentationRepresentationUID);\n    }\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  }\n  if (!actorEntry) {\n    return;\n  }\n  const {\n    cfun,\n    ofun\n  } = renderingConfig;\n  const renderInactiveSegmentations = toolGroupConfig.renderInactiveSegmentations;\n  _setLabelmapColorAndOpacity(viewport.id, actorEntry, cfun, ofun, colorLUTIndex, toolGroupConfig.representations[Representations.Labelmap], representation, active, renderInactiveSegmentations, segmentsHidden);\n}\nfunction _setLabelmapColorAndOpacity(viewportId, actorEntry, cfun, ofun, colorLUTIndex, toolGroupLabelmapConfig, segmentationRepresentation, isActiveLabelmap, renderInactiveSegmentations, segmentsHidden) {\n  const {\n    segmentSpecificConfig,\n    segmentationRepresentationSpecificConfig\n  } = segmentationRepresentation;\n  const segmentationRepresentationLabelmapConfig = segmentationRepresentationSpecificConfig[Representations.Labelmap];\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  const numColors = Math.min(256, colorLUT.length);\n  const {\n    uid: actorUID\n  } = actorEntry;\n  const {\n    outlineWidth,\n    renderOutline,\n    outlineOpacity\n  } = _getLabelmapConfig(toolGroupLabelmapConfig, segmentationRepresentationLabelmapConfig, isActiveLabelmap);\n  for (let i = 0; i < numColors; i++) {\n    const segmentIndex = i;\n    const segmentColor = colorLUT[segmentIndex];\n    const segmentSpecificLabelmapConfig = segmentSpecificConfig[segmentIndex]?.[Representations.Labelmap];\n    const {\n      fillAlpha,\n      outlineWidth,\n      renderFill,\n      renderOutline\n    } = _getLabelmapConfig(toolGroupLabelmapConfig, segmentationRepresentationLabelmapConfig, isActiveLabelmap, segmentSpecificLabelmapConfig);\n    const {\n      forceOpacityUpdate,\n      forceColorUpdate\n    } = _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, {\n      fillAlpha,\n      renderFill,\n      renderOutline,\n      segmentColor,\n      outlineWidth,\n      segmentsHidden\n    });\n    if (forceColorUpdate) {\n      cfun.addRGBPoint(segmentIndex, segmentColor[0] / MAX_NUMBER_COLORS, segmentColor[1] / MAX_NUMBER_COLORS, segmentColor[2] / MAX_NUMBER_COLORS);\n    }\n    if (forceOpacityUpdate) {\n      if (renderFill) {\n        const segmentOpacity = segmentsHidden.has(segmentIndex) ? 0 : segmentColor[3] / 255 * fillAlpha;\n        ofun.removePoint(segmentIndex);\n        ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n      } else {\n        ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n      }\n    }\n  }\n  const actor = actorEntry.actor;\n  actor.getProperty().setRGBTransferFunction(0, cfun);\n  ofun.setClamping(false);\n  actor.getProperty().setScalarOpacity(0, ofun);\n  actor.getProperty().setInterpolationTypeToNearest();\n  actor.getProperty().setUseLabelOutline(renderOutline);\n  actor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n  const {\n    activeSegmentIndex\n  } = SegmentationState.getSegmentation(segmentationRepresentation.segmentationId);\n  const outlineWidths = new Array(numColors - 1);\n  for (let i = 1; i < numColors; i++) {\n    outlineWidths[i - 1] = i === activeSegmentIndex ? outlineWidth + toolGroupLabelmapConfig.activeSegmentOutlineWidthDelta : outlineWidth;\n  }\n  actor.getProperty().setLabelOutlineThickness(outlineWidths);\n  const visible = isActiveLabelmap || renderInactiveSegmentations;\n  actor.setVisibility(visible);\n}\nfunction _getLabelmapConfig(toolGroupLabelmapConfig, segmentationRepresentationLabelmapConfig, isActiveLabelmap, segmentsLabelmapConfig) {\n  const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n  const configToUse = {\n    ...toolGroupLabelmapConfig,\n    ...segmentationRepresentationLabelmapConfig,\n    ...segmentLabelmapConfig\n  };\n  const fillAlpha = isActiveLabelmap ? configToUse.fillAlpha : configToUse.fillAlphaInactive;\n  const outlineWidth = isActiveLabelmap ? configToUse.outlineWidthActive : configToUse.outlineWidthInactive;\n  const renderFill = isActiveLabelmap ? configToUse.renderFill : configToUse.renderFillInactive;\n  const renderOutline = configToUse.renderOutline;\n  const outlineOpacity = isActiveLabelmap ? configToUse.outlineOpacity : configToUse.outlineOpacityInactive;\n  return {\n    fillAlpha,\n    outlineWidth,\n    renderFill,\n    renderOutline,\n    outlineOpacity\n  };\n}\nfunction _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, {\n  fillAlpha,\n  renderFill,\n  renderOutline,\n  segmentColor,\n  outlineWidth,\n  segmentsHidden\n}) {\n  const cacheUID = `${viewportId}-${actorUID}-${segmentIndex}`;\n  const oldConfig = labelMapConfigCache.get(cacheUID);\n  if (!oldConfig) {\n    labelMapConfigCache.set(cacheUID, {\n      fillAlpha,\n      renderFill,\n      renderOutline,\n      outlineWidth,\n      segmentColor: segmentColor.slice(),\n      segmentsHidden: new Set(segmentsHidden)\n    });\n    return {\n      forceOpacityUpdate: true,\n      forceColorUpdate: true\n    };\n  }\n  const {\n    fillAlpha: oldFillAlpha,\n    renderFill: oldRenderFill,\n    renderOutline: oldRenderOutline,\n    outlineWidth: oldOutlineWidth,\n    segmentColor: oldSegmentColor,\n    segmentsHidden: oldSegmentsHidden\n  } = oldConfig;\n  const forceColorUpdate = oldSegmentColor[0] !== segmentColor[0] || oldSegmentColor[1] !== segmentColor[1] || oldSegmentColor[2] !== segmentColor[2];\n  const forceOpacityUpdate = oldSegmentColor[3] !== segmentColor[3] || oldFillAlpha !== fillAlpha || oldRenderFill !== renderFill || oldRenderOutline !== renderOutline || oldOutlineWidth !== outlineWidth || oldSegmentsHidden.has(segmentIndex) !== segmentsHidden.has(segmentIndex);\n  labelMapConfigCache.set(cacheUID, {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    outlineWidth,\n    segmentColor: segmentColor.slice(),\n    segmentsHidden: new Set(segmentsHidden)\n  });\n  return {\n    forceOpacityUpdate,\n    forceColorUpdate\n  };\n}\nfunction _removeLabelmapFromToolGroupViewports(toolGroupId, segmentationRepresentationUID) {\n  const toolGroup = getToolGroup(toolGroupId);\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n  const {\n    viewportsInfo\n  } = toolGroup;\n  for (const viewportInfo of viewportsInfo) {\n    const {\n      viewportId,\n      renderingEngineId\n    } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n    removeLabelmapFromElement(enabledElement.viewport.element, segmentationRepresentationUID);\n  }\n}\nasync function _addLabelmapToViewport(viewport, labelmapData, segmentationRepresentationUID) {\n  await addLabelmapToElement(viewport.element, labelmapData, segmentationRepresentationUID);\n}\nexport default {\n  getRepresentationRenderingConfig,\n  render,\n  removeSegmentationRepresentation\n};\nexport { getRepresentationRenderingConfig, render, removeSegmentationRepresentation };","map":{"version":3,"names":["vtkPiecewiseFunction","vtkColorTransferFunction","cache","getEnabledElementByIds","StackViewport","VolumeViewport","Representations","SegmentationState","getToolGroup","addLabelmapToElement","removeLabelmapFromElement","isVolumeSegmentation","MAX_NUMBER_COLORS","labelMapConfigCache","Map","getRepresentationRenderingConfig","cfun","newInstance","ofun","addPoint","removeSegmentationRepresentation","toolGroupId","segmentationRepresentationUID","renderImmediate","_removeLabelmapFromToolGroupViewports","viewportsInfo","getViewportsInfo","forEach","viewportId","renderingEngineId","enabledElement","viewport","render","isSameFrameOfReference","referencedVolumeId","defaultActor","getDefaultActor","uid","defaultActorUID","volume","getVolume","referencedVolume","metadata","FrameOfReferenceUID","representation","toolGroupConfig","colorLUTIndex","active","segmentationId","segmentsHidden","config","renderingConfig","segmentation","getSegmentation","console","warn","labelmapData","representationData","Labelmap","actorEntry","getActor","volumeId","labelmapUID","labelmap","Error","_addLabelmapToViewport","imageId","getCurrentImageId","imageIdReferenceMap","has","renderInactiveSegmentations","_setLabelmapColorAndOpacity","id","representations","toolGroupLabelmapConfig","segmentationRepresentation","isActiveLabelmap","segmentSpecificConfig","segmentationRepresentationSpecificConfig","segmentationRepresentationLabelmapConfig","colorLUT","getColorLUT","numColors","Math","min","length","actorUID","outlineWidth","renderOutline","outlineOpacity","_getLabelmapConfig","i","segmentIndex","segmentColor","segmentSpecificLabelmapConfig","fillAlpha","renderFill","forceOpacityUpdate","forceColorUpdate","_needsTransferFunctionUpdate","addRGBPoint","segmentOpacity","removePoint","addPointLong","actor","getProperty","setRGBTransferFunction","setClamping","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","activeSegmentIndex","outlineWidths","Array","activeSegmentOutlineWidthDelta","setLabelOutlineThickness","visible","setVisibility","segmentsLabelmapConfig","segmentLabelmapConfig","configToUse","fillAlphaInactive","outlineWidthActive","outlineWidthInactive","renderFillInactive","outlineOpacityInactive","cacheUID","oldConfig","get","set","slice","Set","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","toolGroup","undefined","viewportInfo","element"],"sources":["../../../../../src/tools/displayTools/Labelmap/labelmapDisplay.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}