{"ast":null,"code":"import seedrandom from 'seedrandom';\nimport { m as macro } from '../../../macros2.js';\nimport { IDENTITY, IDENTITY_3X3, VTK_SMALL_NUMBER, EPSILON } from './Constants.js';\nconst {\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n/* eslint-disable camelcase                                                  */\n/* eslint-disable no-cond-assign                                             */\n/* eslint-disable no-bitwise                                                 */\n/* eslint-disable no-multi-assign                                            */\n// ----------------------------------------------------------------------------\nlet randomSeedValue = 0;\nconst VTK_MAX_ROTATIONS = 20;\nfunction notImplemented(method) {\n  return () => vtkErrorMacro(`vtkMath::${method} - NOT IMPLEMENTED`);\n}\n\n// Swap rows for n by n matrix\nfunction swapRowsMatrix_nxn(matrix, n, row1, row2) {\n  let tmp;\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[row1 * n + i];\n    matrix[row1 * n + i] = matrix[row2 * n + i];\n    matrix[row2 * n + i] = tmp;\n  }\n}\n\n// Swap columns for n by n matrix\nfunction swapColumnsMatrix_nxn(matrix, n, column1, column2) {\n  let tmp;\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[i * n + column1];\n    matrix[i * n + column1] = matrix[i * n + column2];\n    matrix[i * n + column2] = tmp;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction createArray() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  // faster than Array.from and/or while loop\n  const res = Array(size);\n  for (let i = 0; i < size; ++i) {\n    res[i] = 0;\n  }\n  return res;\n}\nconst Pi = () => Math.PI;\nfunction radiansFromDegrees(deg) {\n  return deg / 180 * Math.PI;\n}\nfunction degreesFromRadians(rad) {\n  return rad * 180 / Math.PI;\n}\nconst {\n  round,\n  floor,\n  ceil,\n  min,\n  max\n} = Math;\nfunction arrayMin(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let minValue = Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n  }\n  return minValue;\n}\nfunction arrayMax(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let maxValue = -Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n  return maxValue;\n}\nfunction arrayRange(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let minValue = Infinity;\n  let maxValue = -Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n  return [minValue, maxValue];\n}\nconst ceilLog2 = notImplemented('ceilLog2');\nconst factorial = notImplemented('factorial');\nfunction nearestPowerOfTwo(xi) {\n  let v = 1;\n  while (v < xi) {\n    v *= 2;\n  }\n  return v;\n}\nfunction isPowerOfTwo(x) {\n  return x === nearestPowerOfTwo(x);\n}\nfunction binomial(m, n) {\n  let r = 1;\n  for (let i = 1; i <= n; ++i) {\n    r *= (m - i + 1) / i;\n  }\n  return Math.floor(r);\n}\nfunction beginCombination(m, n) {\n  if (m < n) {\n    return 0;\n  }\n  const r = createArray(n);\n  for (let i = 0; i < n; ++i) {\n    r[i] = i;\n  }\n  return r;\n}\nfunction nextCombination(m, n, r) {\n  let status = 0;\n  for (let i = n - 1; i >= 0; --i) {\n    if (r[i] < m - n + i) {\n      let j = r[i] + 1;\n      while (i < n) {\n        r[i++] = j++;\n      }\n      status = 1;\n      break;\n    }\n  }\n  return status;\n}\nfunction randomSeed(seed) {\n  seedrandom(`${seed}`, {\n    global: true\n  });\n  randomSeedValue = seed;\n}\nfunction getSeed() {\n  return randomSeedValue;\n}\nfunction random() {\n  let minValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const delta = maxValue - minValue;\n  return minValue + delta * Math.random();\n}\nconst gaussian = notImplemented('gaussian');\n\n// Vect3 operations\nfunction add(a, b, out) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\nfunction subtract(a, b, out) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\nfunction multiplyScalar(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  vec[2] *= scalar;\n  return vec;\n}\nfunction multiplyScalar2D(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  return vec;\n}\nfunction multiplyAccumulate(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  out[2] = a[2] + b[2] * scalar;\n  return out;\n}\nfunction multiplyAccumulate2D(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  return out;\n}\nfunction dot(x, y) {\n  return x[0] * y[0] + x[1] * y[1] + x[2] * y[2];\n}\nfunction outer(x, y, out_3x3) {\n  out_3x3[0] = x[0] * y[0];\n  out_3x3[1] = x[0] * y[1];\n  out_3x3[2] = x[0] * y[2];\n  out_3x3[3] = x[1] * y[0];\n  out_3x3[4] = x[1] * y[1];\n  out_3x3[5] = x[1] * y[2];\n  out_3x3[6] = x[2] * y[0];\n  out_3x3[7] = x[2] * y[1];\n  out_3x3[8] = x[2] * y[2];\n}\nfunction cross(x, y, out) {\n  const Zx = x[1] * y[2] - x[2] * y[1];\n  const Zy = x[2] * y[0] - x[0] * y[2];\n  const Zz = x[0] * y[1] - x[1] * y[0];\n  out[0] = Zx;\n  out[1] = Zy;\n  out[2] = Zz;\n  return out;\n}\nfunction norm(x) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  switch (n) {\n    case 1:\n      return Math.abs(x);\n    case 2:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n    case 3:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n    default:\n      {\n        let sum = 0;\n        for (let i = 0; i < n; i++) {\n          sum += x[i] * x[i];\n        }\n        return Math.sqrt(sum);\n      }\n  }\n}\nfunction normalize(x) {\n  const den = norm(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n    x[2] /= den;\n  }\n  return den;\n}\nfunction perpendiculars(x, y, z, theta) {\n  const x2 = x[0] * x[0];\n  const y2 = x[1] * x[1];\n  const z2 = x[2] * x[2];\n  const r = Math.sqrt(x2 + y2 + z2);\n  let dx;\n  let dy;\n  let dz;\n\n  // transpose the vector to avoid divide-by-zero error\n  if (x2 > y2 && x2 > z2) {\n    dx = 0;\n    dy = 1;\n    dz = 2;\n  } else if (y2 > z2) {\n    dx = 1;\n    dy = 2;\n    dz = 0;\n  } else {\n    dx = 2;\n    dy = 0;\n    dz = 1;\n  }\n  const a = x[dx] / r;\n  const b = x[dy] / r;\n  const c = x[dz] / r;\n  const tmp = Math.sqrt(a * a + c * c);\n  if (theta !== 0) {\n    const sintheta = Math.sin(theta);\n    const costheta = Math.cos(theta);\n    if (y) {\n      y[dx] = (c * costheta - a * b * sintheta) / tmp;\n      y[dy] = sintheta * tmp;\n      y[dz] = (-(a * costheta) - b * c * sintheta) / tmp;\n    }\n    if (z) {\n      z[dx] = (-(c * sintheta) - a * b * costheta) / tmp;\n      z[dy] = costheta * tmp;\n      z[dz] = (a * sintheta - b * c * costheta) / tmp;\n    }\n  } else {\n    if (y) {\n      y[dx] = c / tmp;\n      y[dy] = 0;\n      y[dz] = -a / tmp;\n    }\n    if (z) {\n      z[dx] = -a * b / tmp;\n      z[dy] = tmp;\n      z[dz] = -b * c / tmp;\n    }\n  }\n}\nfunction projectVector(a, b, projection) {\n  const bSquared = dot(b, b);\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    projection[2] = 0;\n    return false;\n  }\n  const scale = dot(a, b) / bSquared;\n  for (let i = 0; i < 3; i++) {\n    projection[i] = b[i];\n  }\n  multiplyScalar(projection, scale);\n  return true;\n}\nfunction dot2D(x, y) {\n  return x[0] * y[0] + x[1] * y[1];\n}\nfunction projectVector2D(a, b, projection) {\n  const bSquared = dot2D(b, b);\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    return false;\n  }\n  const scale = dot2D(a, b) / bSquared;\n  for (let i = 0; i < 2; i++) {\n    projection[i] = b[i];\n  }\n  multiplyScalar2D(projection, scale);\n  return true;\n}\nfunction distance2BetweenPoints(x, y) {\n  return (x[0] - y[0]) * (x[0] - y[0]) + (x[1] - y[1]) * (x[1] - y[1]) + (x[2] - y[2]) * (x[2] - y[2]);\n}\nfunction angleBetweenVectors(v1, v2) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  return Math.atan2(norm(crossVect), dot(v1, v2));\n}\nfunction signedAngleBetweenVectors(v1, v2, vN) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  const angle = Math.atan2(norm(crossVect), dot(v1, v2));\n  return dot(crossVect, vN) >= 0 ? angle : -angle;\n}\nfunction gaussianAmplitude(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return 1 / Math.sqrt(2 * Math.PI * variance) * Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\nfunction gaussianWeight(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\nfunction outer2D(x, y, out_2x2) {\n  out_2x2[0] = x[0] * y[0];\n  out_2x2[1] = x[0] * y[1];\n  out_2x2[2] = x[1] * y[0];\n  out_2x2[3] = x[1] * y[1];\n}\nfunction norm2D(x2D) {\n  return Math.sqrt(x2D[0] * x2D[0] + x2D[1] * x2D[1]);\n}\nfunction normalize2D(x) {\n  const den = norm2D(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n  }\n  return den;\n}\nfunction rowsToMat4(row0, row1, row2, row3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[i] = row0[i];\n    mat[4 + i] = row1[i];\n    mat[8 + i] = row2[i];\n    mat[12 + i] = row3[i];\n  }\n  return mat;\n}\nfunction columnsToMat4(column0, column1, column2, column3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[4 * i] = column0[i];\n    mat[4 * i + 1] = column1[i];\n    mat[4 * i + 2] = column2[i];\n    mat[4 * i + 3] = column3[i];\n  }\n  return mat;\n}\nfunction rowsToMat3(row0, row1, row2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[i] = row0[i];\n    mat[3 + i] = row1[i];\n    mat[6 + i] = row2[i];\n  }\n  return mat;\n}\nfunction columnsToMat3(column0, column1, column2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[3 * i] = column0[i];\n    mat[3 * i + 1] = column1[i];\n    mat[3 * i + 2] = column2[i];\n  }\n  return mat;\n}\nfunction determinant2x2() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (args.length === 2) {\n    return args[0][0] * args[1][1] - args[1][0] * args[0][1];\n  }\n  if (args.length === 4) {\n    return args[0] * args[3] - args[1] * args[2];\n  }\n  return Number.NaN;\n}\nfunction LUFactor3x3(mat_3x3, index_3) {\n  let maxI;\n  let tmp;\n  let largest;\n  const scale = [0, 0, 0];\n\n  // Loop over rows to get implicit scaling information\n  for (let i = 0; i < 3; i++) {\n    largest = Math.abs(mat_3x3[i * 3]);\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 1])) > largest) {\n      largest = tmp;\n    }\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 2])) > largest) {\n      largest = tmp;\n    }\n    scale[i] = 1 / largest;\n  }\n\n  // Loop over all columns using Crout's method\n\n  // first column\n  largest = scale[0] * Math.abs(mat_3x3[0]);\n  maxI = 0;\n  if ((tmp = scale[1] * Math.abs(mat_3x3[3])) >= largest) {\n    largest = tmp;\n    maxI = 1;\n  }\n  if ((tmp = scale[2] * Math.abs(mat_3x3[6])) >= largest) {\n    maxI = 2;\n  }\n  if (maxI !== 0) {\n    swapRowsMatrix_nxn(mat_3x3, 3, maxI, 0);\n    scale[maxI] = scale[0];\n  }\n  index_3[0] = maxI;\n  mat_3x3[3] /= mat_3x3[0];\n  mat_3x3[6] /= mat_3x3[0];\n\n  // second column\n  mat_3x3[4] -= mat_3x3[3] * mat_3x3[1];\n  mat_3x3[7] -= mat_3x3[6] * mat_3x3[1];\n  largest = scale[1] * Math.abs(mat_3x3[4]);\n  maxI = 1;\n  if ((tmp = scale[2] * Math.abs(mat_3x3[7])) >= largest) {\n    maxI = 2;\n    swapRowsMatrix_nxn(mat_3x3, 3, 1, 2);\n    scale[2] = scale[1];\n  }\n  index_3[1] = maxI;\n  mat_3x3[7] /= mat_3x3[4];\n\n  // third column\n  mat_3x3[5] -= mat_3x3[3] * mat_3x3[2];\n  mat_3x3[8] -= mat_3x3[6] * mat_3x3[2] + mat_3x3[7] * mat_3x3[5];\n  index_3[2] = 2;\n}\nfunction LUSolve3x3(mat_3x3, index_3, x_3) {\n  // forward substitution\n  let sum = x_3[index_3[0]];\n  x_3[index_3[0]] = x_3[0];\n  x_3[0] = sum;\n  sum = x_3[index_3[1]];\n  x_3[index_3[1]] = x_3[1];\n  x_3[1] = sum - mat_3x3[3] * x_3[0];\n  sum = x_3[index_3[2]];\n  x_3[index_3[2]] = x_3[2];\n  x_3[2] = sum - mat_3x3[6] * x_3[0] - mat_3x3[7] * x_3[1];\n\n  // back substitution\n  x_3[2] /= mat_3x3[8];\n  x_3[1] = (x_3[1] - mat_3x3[5] * x_3[2]) / mat_3x3[4];\n  x_3[0] = (x_3[0] - mat_3x3[1] * x_3[1] - mat_3x3[2] * x_3[2]) / mat_3x3[0];\n}\nfunction linearSolve3x3(mat_3x3, x_3, y_3) {\n  const a1 = mat_3x3[0];\n  const b1 = mat_3x3[1];\n  const c1 = mat_3x3[2];\n  const a2 = mat_3x3[3];\n  const b2 = mat_3x3[4];\n  const c2 = mat_3x3[5];\n  const a3 = mat_3x3[6];\n  const b3 = mat_3x3[7];\n  const c3 = mat_3x3[8];\n\n  // Compute the adjoint\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2);\n\n  // Compute the determinant\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n\n  // Multiply by the adjoint\n  const v1 = d1 * x_3[0] + e1 * x_3[1] + f1 * x_3[2];\n  const v2 = d2 * x_3[0] + e2 * x_3[1] + f2 * x_3[2];\n  const v3 = d3 * x_3[0] + e3 * x_3[1] + f3 * x_3[2];\n\n  // Divide by the determinant\n  y_3[0] = v1 / det;\n  y_3[1] = v2 / det;\n  y_3[2] = v3 / det;\n}\nfunction multiply3x3_vect3(mat_3x3, in_3, out_3) {\n  const x = mat_3x3[0] * in_3[0] + mat_3x3[1] * in_3[1] + mat_3x3[2] * in_3[2];\n  const y = mat_3x3[3] * in_3[0] + mat_3x3[4] * in_3[1] + mat_3x3[5] * in_3[2];\n  const z = mat_3x3[6] * in_3[0] + mat_3x3[7] * in_3[1] + mat_3x3[8] * in_3[2];\n  out_3[0] = x;\n  out_3[1] = y;\n  out_3[2] = z;\n}\nfunction multiply3x3_mat3(a_3x3, b_3x3, out_3x3) {\n  const copyA = [...a_3x3];\n  const copyB = [...b_3x3];\n  for (let i = 0; i < 3; i++) {\n    out_3x3[i] = copyA[0] * copyB[i] + copyA[1] * copyB[i + 3] + copyA[2] * copyB[i + 6];\n    out_3x3[i + 3] = copyA[3] * copyB[i] + copyA[4] * copyB[i + 3] + copyA[5] * copyB[i + 6];\n    out_3x3[i + 6] = copyA[6] * copyB[i] + copyA[7] * copyB[i + 3] + copyA[8] * copyB[i + 6];\n  }\n}\nfunction multiplyMatrix(a, b, rowA, colA, rowB, colB, out_rowXcol) {\n  // we need colA == rowB\n  if (colA !== rowB) {\n    vtkErrorMacro('Number of columns of A must match number of rows of B.');\n  }\n\n  // If a or b is used to store the result, copying them is required\n  const copyA = [...a];\n  const copyB = [...b];\n  // output matrix is rowA*colB\n  // output row\n  for (let i = 0; i < rowA; i++) {\n    // output col\n    for (let j = 0; j < colB; j++) {\n      out_rowXcol[i * colB + j] = 0;\n      // sum for this point\n      for (let k = 0; k < colA; k++) {\n        out_rowXcol[i * colB + j] += copyA[i * colA + k] * copyB[j + colB * k];\n      }\n    }\n  }\n}\nfunction transpose3x3(in_3x3, outT_3x3) {\n  let tmp;\n\n  // off-diagonal elements\n  tmp = in_3x3[3];\n  outT_3x3[3] = in_3x3[1];\n  outT_3x3[1] = tmp;\n  tmp = in_3x3[6];\n  outT_3x3[6] = in_3x3[2];\n  outT_3x3[2] = tmp;\n  tmp = in_3x3[7];\n  outT_3x3[7] = in_3x3[5];\n  outT_3x3[5] = tmp;\n\n  // on-diagonal elements\n  outT_3x3[0] = in_3x3[0];\n  outT_3x3[4] = in_3x3[4];\n  outT_3x3[8] = in_3x3[8];\n}\nfunction invert3x3(in_3x3, outI_3x3) {\n  const a1 = in_3x3[0];\n  const b1 = in_3x3[1];\n  const c1 = in_3x3[2];\n  const a2 = in_3x3[3];\n  const b2 = in_3x3[4];\n  const c2 = in_3x3[5];\n  const a3 = in_3x3[6];\n  const b3 = in_3x3[7];\n  const c3 = in_3x3[8];\n\n  // Compute the adjoint\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2);\n\n  // Divide by the determinant\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n  if (det === 0) {\n    vtkWarningMacro('Matrix has 0 determinant');\n  }\n  outI_3x3[0] = d1 / det;\n  outI_3x3[3] = d2 / det;\n  outI_3x3[6] = d3 / det;\n  outI_3x3[1] = e1 / det;\n  outI_3x3[4] = e2 / det;\n  outI_3x3[7] = e3 / det;\n  outI_3x3[2] = f1 / det;\n  outI_3x3[5] = f2 / det;\n  outI_3x3[8] = f3 / det;\n}\nfunction determinant3x3(mat_3x3) {\n  return mat_3x3[0] * mat_3x3[4] * mat_3x3[8] + mat_3x3[3] * mat_3x3[7] * mat_3x3[2] + mat_3x3[6] * mat_3x3[1] * mat_3x3[5] - mat_3x3[0] * mat_3x3[7] * mat_3x3[5] - mat_3x3[3] * mat_3x3[1] * mat_3x3[8] - mat_3x3[6] * mat_3x3[4] * mat_3x3[2];\n}\n\n/**\n * Returns true if elements of both arrays are equals.\n * @param {Array} a an array of numbers (vector, point, matrix...)\n * @param {Array} b an array of numbers (vector, point, matrix...)\n * @param {Number} eps tolerance\n */\nfunction areEquals(a, b) {\n  let eps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSILON;\n  if (a.length !== b.length) {\n    return false;\n  }\n  function isEqual(element, index) {\n    return Math.abs(element - b[index]) <= eps;\n  }\n  return a.every(isEqual);\n}\nconst areMatricesEqual = areEquals;\nfunction identity3x3(mat_3x3) {\n  for (let i = 0; i < 3; i++) {\n    /* eslint-disable-next-line no-multi-assign */\n    mat_3x3[i * 3] = mat_3x3[i * 3 + 1] = mat_3x3[i * 3 + 2] = 0;\n    mat_3x3[i * 3 + i] = 1;\n  }\n}\nfunction identity(n, mat) {\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      mat[i * n + j] = 0;\n    }\n    mat[i * n + i] = 1;\n  }\n  return mat;\n}\nfunction isIdentity(mat) {\n  let eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return areMatricesEqual(mat, IDENTITY, eps);\n}\nfunction isIdentity3x3(mat) {\n  let eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return areMatricesEqual(mat, IDENTITY_3X3, eps);\n}\nfunction quaternionToMatrix3x3(quat_4, mat_3x3) {\n  const ww = quat_4[0] * quat_4[0];\n  const wx = quat_4[0] * quat_4[1];\n  const wy = quat_4[0] * quat_4[2];\n  const wz = quat_4[0] * quat_4[3];\n  const xx = quat_4[1] * quat_4[1];\n  const yy = quat_4[2] * quat_4[2];\n  const zz = quat_4[3] * quat_4[3];\n  const xy = quat_4[1] * quat_4[2];\n  const xz = quat_4[1] * quat_4[3];\n  const yz = quat_4[2] * quat_4[3];\n  const rr = xx + yy + zz;\n  // normalization factor, just in case quaternion was not normalized\n  let f = 1 / (ww + rr);\n  const s = (ww - rr) * f;\n  f *= 2;\n  mat_3x3[0] = xx * f + s;\n  mat_3x3[3] = (xy + wz) * f;\n  mat_3x3[6] = (xz - wy) * f;\n  mat_3x3[1] = (xy - wz) * f;\n  mat_3x3[4] = yy * f + s;\n  mat_3x3[7] = (yz + wx) * f;\n  mat_3x3[2] = (xz + wy) * f;\n  mat_3x3[5] = (yz - wx) * f;\n  mat_3x3[8] = zz * f + s;\n}\nfunction roundNumber(num) {\n  let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!`${num}`.includes('e')) {\n    return +`${Math.round(`${num}e+${digits}`)}e-${digits}`;\n  }\n  const arr = `${num}`.split('e');\n  let sig = '';\n  if (+arr[1] + digits > 0) {\n    sig = '+';\n  }\n  return +`${Math.round(`${+arr[0]}e${sig}${+arr[1] + digits}`)}e-${digits}`;\n}\nfunction roundVector(vector) {\n  let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n  let digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[0] = roundNumber(vector[0], digits);\n  out[1] = roundNumber(vector[1], digits);\n  out[2] = roundNumber(vector[2], digits);\n  return out;\n}\nfunction jacobiN(a, n, w, v) {\n  let i;\n  let j;\n  let k;\n  let iq;\n  let ip;\n  let numPos;\n  let tresh;\n  let theta;\n  let t;\n  let tau;\n  let sm;\n  let s;\n  let h;\n  let g;\n  let c;\n  let tmp;\n  const b = createArray(n);\n  const z = createArray(n);\n  const vtkROTATE = (aa, ii, jj) => {\n    g = aa[ii];\n    h = aa[jj];\n    aa[ii] = g - s * (h + g * tau);\n    aa[jj] = h + s * (g - h * tau);\n  };\n\n  // initialize\n  identity(n, v);\n  for (ip = 0; ip < n; ip++) {\n    b[ip] = w[ip] = a[ip + ip * n];\n    z[ip] = 0.0;\n  }\n\n  // begin rotation sequence\n  for (i = 0; i < VTK_MAX_ROTATIONS; i++) {\n    sm = 0.0;\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        sm += Math.abs(a[ip * n + iq]);\n      }\n    }\n    if (sm === 0.0) {\n      break;\n    }\n\n    // first 3 sweeps\n    if (i < 3) {\n      tresh = 0.2 * sm / (n * n);\n    } else {\n      tresh = 0.0;\n    }\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        g = 100.0 * Math.abs(a[ip * n + iq]);\n\n        // after 4 sweeps\n        if (i > 3 && Math.abs(w[ip]) + g === Math.abs(w[ip]) && Math.abs(w[iq]) + g === Math.abs(w[iq])) {\n          a[ip * n + iq] = 0.0;\n        } else if (Math.abs(a[ip * n + iq]) > tresh) {\n          h = w[iq] - w[ip];\n          if (Math.abs(h) + g === Math.abs(h)) {\n            t = a[ip * n + iq] / h;\n          } else {\n            theta = 0.5 * h / a[ip * n + iq];\n            t = 1.0 / (Math.abs(theta) + Math.sqrt(1.0 + theta * theta));\n            if (theta < 0.0) {\n              t = -t;\n            }\n          }\n          c = 1.0 / Math.sqrt(1 + t * t);\n          s = t * c;\n          tau = s / (1.0 + c);\n          h = t * a[ip * n + iq];\n          z[ip] -= h;\n          z[iq] += h;\n          w[ip] -= h;\n          w[iq] += h;\n          a[ip * n + iq] = 0.0;\n\n          // ip already shifted left by 1 unit\n          for (j = 0; j <= ip - 1; j++) {\n            vtkROTATE(a, j * n + ip, j * n + iq);\n          }\n          // ip and iq already shifted left by 1 unit\n          for (j = ip + 1; j <= iq - 1; j++) {\n            vtkROTATE(a, ip * n + j, j * n + iq);\n          }\n          // iq already shifted left by 1 unit\n          for (j = iq + 1; j < n; j++) {\n            vtkROTATE(a, ip * n + j, iq * n + j);\n          }\n          for (j = 0; j < n; j++) {\n            vtkROTATE(v, j * n + ip, j * n + iq);\n          }\n        }\n      }\n    }\n    for (ip = 0; ip < n; ip++) {\n      b[ip] += z[ip];\n      w[ip] = b[ip];\n      z[ip] = 0.0;\n    }\n  }\n\n  // this is NEVER called\n  if (i >= VTK_MAX_ROTATIONS) {\n    vtkWarningMacro('vtkMath::Jacobi: Error extracting eigenfunctions');\n    return 0;\n  }\n\n  // sort eigenfunctions: these changes do not affect accuracy\n  for (j = 0; j < n - 1; j++) {\n    // boundary incorrect\n    k = j;\n    tmp = w[k];\n    for (i = j + 1; i < n; i++) {\n      // boundary incorrect, shifted already\n      if (w[i] >= tmp || Math.abs(w[i] - tmp) < VTK_SMALL_NUMBER) {\n        // why exchange if same?\n        k = i;\n        tmp = w[k];\n      }\n    }\n    if (k !== j) {\n      w[k] = w[j];\n      w[j] = tmp;\n      swapColumnsMatrix_nxn(v, n, j, k);\n    }\n  }\n  // ensure eigenvector consistency (i.e., Jacobi can compute vectors that\n  // are negative of one another (.707,.707,0) and (-.707,-.707,0). This can\n  // reek havoc in hyperstreamline/other stuff. We will select the most\n  // positive eigenvector.\n  const ceil_half_n = (n >> 1) + (n & 1);\n  for (numPos = 0, i = 0; i < n * n; i++) {\n    if (v[i] >= 0.0) {\n      numPos++;\n    }\n  }\n  //    if ( numPos < ceil(double(n)/double(2.0)) )\n  if (numPos < ceil_half_n) {\n    for (i = 0; i < n; i++) {\n      v[i * n + j] *= -1.0;\n    }\n  }\n  return 1;\n}\nfunction matrix3x3ToQuaternion(mat_3x3, quat_4) {\n  const tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  // on-diagonal elements\n  tmp[0] = mat_3x3[0] + mat_3x3[4] + mat_3x3[8];\n  tmp[5] = mat_3x3[0] - mat_3x3[4] - mat_3x3[8];\n  tmp[10] = -mat_3x3[0] + mat_3x3[4] - mat_3x3[8];\n  tmp[15] = -mat_3x3[0] - mat_3x3[4] + mat_3x3[8];\n\n  // off-diagonal elements\n  tmp[1] = tmp[4] = mat_3x3[7] - mat_3x3[5];\n  tmp[2] = tmp[8] = mat_3x3[2] - mat_3x3[6];\n  tmp[3] = tmp[12] = mat_3x3[3] - mat_3x3[1];\n  tmp[6] = tmp[9] = mat_3x3[3] + mat_3x3[1];\n  tmp[7] = tmp[13] = mat_3x3[2] + mat_3x3[6];\n  tmp[11] = tmp[14] = mat_3x3[7] + mat_3x3[5];\n  const eigenvectors = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  const eigenvalues = [0, 0, 0, 0];\n\n  // convert into format that JacobiN can use,\n  // then use Jacobi to find eigenvalues and eigenvectors\n  // tmp is copied because jacobiN may modify it\n  const NTemp = [...tmp];\n  jacobiN(NTemp, 4, eigenvalues, eigenvectors);\n\n  // the first eigenvector is the one we want\n  quat_4[0] = eigenvectors[0];\n  quat_4[1] = eigenvectors[4];\n  quat_4[2] = eigenvectors[8];\n  quat_4[3] = eigenvectors[12];\n}\nfunction multiplyQuaternion(quat_1, quat_2, quat_out) {\n  const ww = quat_1[0] * quat_2[0];\n  const wx = quat_1[0] * quat_2[1];\n  const wy = quat_1[0] * quat_2[2];\n  const wz = quat_1[0] * quat_2[3];\n  const xw = quat_1[1] * quat_2[0];\n  const xx = quat_1[1] * quat_2[1];\n  const xy = quat_1[1] * quat_2[2];\n  const xz = quat_1[1] * quat_2[3];\n  const yw = quat_1[2] * quat_2[0];\n  const yx = quat_1[2] * quat_2[1];\n  const yy = quat_1[2] * quat_2[2];\n  const yz = quat_1[2] * quat_2[3];\n  const zw = quat_1[3] * quat_2[0];\n  const zx = quat_1[3] * quat_2[1];\n  const zy = quat_1[3] * quat_2[2];\n  const zz = quat_1[3] * quat_2[3];\n  quat_out[0] = ww - xx - yy - zz;\n  quat_out[1] = wx + xw + yz - zy;\n  quat_out[2] = wy - xz + yw + zx;\n  quat_out[3] = wz + xy - yx + zw;\n}\nfunction orthogonalize3x3(a_3x3, out_3x3) {\n  // copy the matrix\n  for (let i = 0; i < 9; i++) {\n    out_3x3[i] = a_3x3[i];\n  }\n\n  // Pivot the matrix to improve accuracy\n  const scale = createArray(3);\n  const index = createArray(3);\n  let largest;\n\n  // Loop over rows to get implicit scaling information\n  for (let i = 0; i < 3; i++) {\n    const x1 = Math.abs(out_3x3[i * 3]);\n    const x2 = Math.abs(out_3x3[i * 3 + 1]);\n    const x3 = Math.abs(out_3x3[i * 3 + 2]);\n    largest = x2 > x1 ? x2 : x1;\n    largest = x3 > largest ? x3 : largest;\n    scale[i] = 1;\n    if (largest !== 0) {\n      scale[i] /= largest;\n    }\n  }\n\n  // first column\n  const x1 = Math.abs(out_3x3[0]) * scale[0];\n  const x2 = Math.abs(out_3x3[3]) * scale[1];\n  const x3 = Math.abs(out_3x3[6]) * scale[2];\n  index[0] = 0;\n  largest = x1;\n  if (x2 >= largest) {\n    largest = x2;\n    index[0] = 1;\n  }\n  if (x3 >= largest) {\n    index[0] = 2;\n  }\n  if (index[0] !== 0) {\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n    scale[index[0]] = scale[0];\n  }\n\n  // second column\n  const y2 = Math.abs(out_3x3[4]) * scale[1];\n  const y3 = Math.abs(out_3x3[7]) * scale[2];\n  index[1] = 1;\n  largest = y2;\n  if (y3 >= largest) {\n    index[1] = 2;\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, 1, 2);\n  }\n\n  // third column\n  index[2] = 2;\n\n  // A quaternion can only describe a pure rotation, not\n  // a rotation with a flip, therefore the flip must be\n  // removed before the matrix is converted to a quaternion.\n  let flip = 0;\n  if (determinant3x3(out_3x3) < 0) {\n    flip = 1;\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  }\n\n  // Do orthogonalization using a quaternion intermediate\n  // (this, essentially, does the orthogonalization via\n  // diagonalization of an appropriately constructed symmetric\n  // 4x4 matrix rather than by doing SVD of the 3x3 matrix)\n  const quat = createArray(4);\n  matrix3x3ToQuaternion(out_3x3, quat);\n  quaternionToMatrix3x3(quat, out_3x3);\n\n  // Put the flip back into the orthogonalized matrix.\n  if (flip) {\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  }\n\n  // Undo the pivoting\n  if (index[1] !== 1) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[1], 1);\n  }\n  if (index[0] !== 0) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n  }\n}\nfunction diagonalize3x3(a_3x3, w_3, v_3x3) {\n  let i;\n  let j;\n  let k;\n  let maxI;\n  let tmp;\n  let maxVal;\n\n  // a is copied because jacobiN may modify it\n  const copyA = [...a_3x3];\n\n  // diagonalize using Jacobi\n  jacobiN(copyA, 3, w_3, v_3x3);\n\n  // if all the eigenvalues are the same, return identity matrix\n  if (w_3[0] === w_3[1] && w_3[0] === w_3[2]) {\n    identity3x3(v_3x3);\n    return;\n  }\n\n  // transpose temporarily, it makes it easier to sort the eigenvectors\n  transpose3x3(v_3x3, v_3x3);\n\n  // if two eigenvalues are the same, re-orthogonalize to optimally line\n  // up the eigenvectors with the x, y, and z axes\n  for (i = 0; i < 3; i++) {\n    // two eigenvalues are the same\n    if (w_3[(i + 1) % 3] === w_3[(i + 2) % 3]) {\n      // find maximum element of the independent eigenvector\n      maxVal = Math.abs(v_3x3[i * 3]);\n      maxI = 0;\n      for (j = 1; j < 3; j++) {\n        if (maxVal < (tmp = Math.abs(v_3x3[i * 3 + j]))) {\n          maxVal = tmp;\n          maxI = j;\n        }\n      }\n      // swap the eigenvector into its proper position\n      if (maxI !== i) {\n        tmp = w_3[maxI];\n        w_3[maxI] = w_3[i];\n        w_3[i] = tmp;\n        swapRowsMatrix_nxn(v_3x3, 3, i, maxI);\n      }\n      // maximum element of eigenvector should be positive\n      if (v_3x3[maxI * 3 + maxI] < 0) {\n        v_3x3[maxI * 3] = -v_3x3[maxI * 3];\n        v_3x3[maxI * 3 + 1] = -v_3x3[maxI * 3 + 1];\n        v_3x3[maxI * 3 + 2] = -v_3x3[maxI * 3 + 2];\n      }\n\n      // re-orthogonalize the other two eigenvectors\n      j = (maxI + 1) % 3;\n      k = (maxI + 2) % 3;\n      v_3x3[j * 3] = 0.0;\n      v_3x3[j * 3 + 1] = 0.0;\n      v_3x3[j * 3 + 2] = 0.0;\n      v_3x3[j * 3 + j] = 1.0;\n      const vectTmp1 = cross([v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], [v_3x3[j * 3], v_3x3[j * 3 + 1], v_3x3[j * 3 + 2]], []);\n      normalize(vectTmp1);\n      const vectTmp2 = cross(vectTmp1, [v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], []);\n      for (let t = 0; t < 3; t++) {\n        v_3x3[k * 3 + t] = vectTmp1[t];\n        v_3x3[j * 3 + t] = vectTmp2[t];\n      }\n\n      // transpose vectors back to columns\n      transpose3x3(v_3x3, v_3x3);\n      return;\n    }\n  }\n\n  // the three eigenvalues are different, just sort the eigenvectors\n  // to align them with the x, y, and z axes\n\n  // find the vector with the largest x element, make that vector\n  // the first vector\n  maxVal = Math.abs(v_3x3[0]);\n  maxI = 0;\n  for (i = 1; i < 3; i++) {\n    if (maxVal < (tmp = Math.abs(v_3x3[i * 3]))) {\n      maxVal = tmp;\n      maxI = i;\n    }\n  }\n  // swap eigenvalue and eigenvector\n  if (maxI !== 0) {\n    const eigenValTmp = w_3[maxI];\n    w_3[maxI] = w_3[0];\n    w_3[0] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, maxI, 0);\n  }\n  // do the same for the y element\n  if (Math.abs(v_3x3[4]) < Math.abs(v_3x3[7])) {\n    const eigenValTmp = w_3[2];\n    w_3[2] = w_3[1];\n    w_3[1] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, 1, 2);\n  }\n\n  // ensure that the sign of the eigenvectors is correct\n  for (i = 0; i < 2; i++) {\n    if (v_3x3[i * 3 + i] < 0) {\n      v_3x3[i * 3] = -v_3x3[i * 3];\n      v_3x3[i * 3 + 1] = -v_3x3[i * 3 + 1];\n      v_3x3[i * 3 + 2] = -v_3x3[i * 3 + 2];\n    }\n  }\n  // set sign of final eigenvector to ensure that determinant is positive\n  if (determinant3x3(v_3x3) < 0) {\n    v_3x3[6] = -v_3x3[6];\n    v_3x3[7] = -v_3x3[7];\n    v_3x3[8] = -v_3x3[8];\n  }\n\n  // transpose the eigenvectors back again\n  transpose3x3(v_3x3, v_3x3);\n}\nfunction singularValueDecomposition3x3(a_3x3, u_3x3, w_3, vT_3x3) {\n  let i;\n  // copy so that A can be used for U or VT without risk\n  const B = [...a_3x3];\n\n  // temporarily flip if determinant is negative\n  const d = determinant3x3(B);\n  if (d < 0) {\n    for (i = 0; i < 9; i++) {\n      B[i] = -B[i];\n    }\n  }\n\n  // orthogonalize, diagonalize, etc.\n  orthogonalize3x3(B, u_3x3);\n  transpose3x3(B, B);\n  multiply3x3_mat3(B, u_3x3, vT_3x3);\n  diagonalize3x3(vT_3x3, w_3, vT_3x3);\n  multiply3x3_mat3(u_3x3, vT_3x3, u_3x3);\n  transpose3x3(vT_3x3, vT_3x3);\n\n  // re-create the flip\n  if (d < 0) {\n    w_3[0] = -w_3[0];\n    w_3[1] = -w_3[1];\n    w_3[2] = -w_3[2];\n  }\n}\n\n/**\n * Factor linear equations Ax = b using LU decomposition A = LU. Output factorization LU is in matrix A.\n * @param {Matrix} A square matrix\n * @param {Number} index integer array of pivot indices index[0->n-1]\n * @param {Number} size matrix size\n */\nfunction luFactorLinearSystem(A, index, size) {\n  let i;\n  let j;\n  let k;\n  let largest;\n  let maxI = 0;\n  let sum;\n  let temp1;\n  let temp2;\n  const scale = createArray(size);\n\n  //\n  // Loop over rows to get implicit scaling information\n  //\n  for (i = 0; i < size; i++) {\n    for (largest = 0.0, j = 0; j < size; j++) {\n      if ((temp2 = Math.abs(A[i * size + j])) > largest) {\n        largest = temp2;\n      }\n    }\n    if (largest === 0.0) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n    scale[i] = 1.0 / largest;\n  }\n  //\n  // Loop over all columns using Crout's method\n  //\n  for (j = 0; j < size; j++) {\n    for (i = 0; i < j; i++) {\n      sum = A[i * size + j];\n      for (k = 0; k < i; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n      A[i * size + j] = sum;\n    }\n    //\n    // Begin search for largest pivot element\n    //\n    for (largest = 0.0, i = j; i < size; i++) {\n      sum = A[i * size + j];\n      for (k = 0; k < j; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n      A[i * size + j] = sum;\n      if ((temp1 = scale[i] * Math.abs(sum)) >= largest) {\n        largest = temp1;\n        maxI = i;\n      }\n    }\n    //\n    // Check for row interchange\n    //\n    if (j !== maxI) {\n      for (k = 0; k < size; k++) {\n        temp1 = A[maxI * size + k];\n        A[maxI * size + k] = A[j * size + k];\n        A[j * size + k] = temp1;\n      }\n      scale[maxI] = scale[j];\n    }\n    //\n    // Divide by pivot element and perform elimination\n    //\n    index[j] = maxI;\n    if (Math.abs(A[j * size + j]) <= VTK_SMALL_NUMBER) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n    if (j !== size - 1) {\n      temp1 = 1.0 / A[j * size + j];\n      for (i = j + 1; i < size; i++) {\n        A[i * size + j] *= temp1;\n      }\n    }\n  }\n  return 1;\n}\nfunction luSolveLinearSystem(A, index, x, size) {\n  let i;\n  let j;\n  let ii;\n  let idx;\n  let sum;\n  //\n  // Proceed with forward and backsubstitution for L and U\n  // matrices.  First, forward substitution.\n  //\n  for (ii = -1, i = 0; i < size; i++) {\n    idx = index[i];\n    sum = x[idx];\n    x[idx] = x[i];\n    if (ii >= 0) {\n      for (j = ii; j <= i - 1; j++) {\n        sum -= A[i * size + j] * x[j];\n      }\n    } else if (sum !== 0.0) {\n      ii = i;\n    }\n    x[i] = sum;\n  }\n  //\n  // Now, back substitution\n  //\n  for (i = size - 1; i >= 0; i--) {\n    sum = x[i];\n    for (j = i + 1; j < size; j++) {\n      sum -= A[i * size + j] * x[j];\n    }\n    x[i] = sum / A[i * size + i];\n  }\n}\nfunction solveLinearSystem(A, x, size) {\n  // if we solving something simple, just solve it\n  if (size === 2) {\n    const y = createArray(2);\n    const det = determinant2x2(A[0], A[1], A[2], A[3]);\n    if (det === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n    y[0] = (A[3] * x[0] - A[1] * x[1]) / det;\n    y[1] = (-(A[2] * x[0]) + A[0] * x[1]) / det;\n    x[0] = y[0];\n    x[1] = y[1];\n    return 1;\n  }\n  if (size === 1) {\n    if (A[0] === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n    x[0] /= A[0];\n    return 1;\n  }\n\n  //\n  // System of equations is not trivial, use Crout's method\n  //\n\n  // Check on allocation of working vectors\n  const index = createArray(size);\n\n  // Factor and solve matrix\n  if (luFactorLinearSystem(A, index, size) === 0) {\n    return 0;\n  }\n  luSolveLinearSystem(A, index, x, size);\n  return 1;\n}\n\n// Note that A is modified during the inversion !\nfunction invertMatrix(A, AI, size) {\n  let index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let column = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  const tmp1Size = index || createArray(size);\n  const tmp2Size = column || createArray(size);\n\n  // Factor matrix; then begin solving for inverse one column at a time.\n  // Note: tmp1Size returned value is used later, tmp2Size is just working\n  // memory whose values are not used in LUSolveLinearSystem\n  if (luFactorLinearSystem(A, tmp1Size, size) === 0) {\n    return null;\n  }\n  for (let j = 0; j < size; j++) {\n    for (let i = 0; i < size; i++) {\n      tmp2Size[i] = 0.0;\n    }\n    tmp2Size[j] = 1.0;\n    luSolveLinearSystem(A, tmp1Size, tmp2Size, size);\n    for (let i = 0; i < size; i++) {\n      AI[i * size + j] = tmp2Size[i];\n    }\n  }\n  return AI;\n}\nfunction estimateMatrixCondition(A, size) {\n  let minValue = +Number.MAX_VALUE;\n  let maxValue = -Number.MAX_VALUE;\n\n  // find the maximum value\n  for (let i = 0; i < size; i++) {\n    for (let j = i; j < size; j++) {\n      if (Math.abs(A[i * size + j]) > maxValue) {\n        maxValue = Math.abs(A[i * size + j]);\n      }\n    }\n  }\n\n  // find the minimum diagonal value\n  for (let i = 0; i < size; i++) {\n    if (Math.abs(A[i * size + i]) < minValue) {\n      minValue = Math.abs(A[i * size + i]);\n    }\n  }\n  if (minValue === 0.0) {\n    return Number.MAX_VALUE;\n  }\n  return maxValue / minValue;\n}\nfunction jacobi(a_3x3, w, v) {\n  return jacobiN(a_3x3, 3, w, v);\n}\nfunction solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt) {\n  // check dimensional consistency\n  if (numberOfSamples < xOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n  let i;\n  let j;\n  let k;\n\n  // set up intermediate variables\n  // Allocate matrix to hold X times transpose of X\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  // Allocate the array of eigenvalues and eigenvectors\n  const eigenvals = createArray(xOrder);\n  const eigenvecs = createArray(xOrder * xOrder);\n\n  // Calculate XXt upper half only, due to symmetry\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n    }\n  }\n\n  // now fill in the lower half of the XXt matrix\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n\n  // Compute the eigenvectors and eigenvalues\n  jacobiN(XXt, xOrder, eigenvals, eigenvecs);\n\n  // Smallest eigenval is at the end of the list (xOrder-1), and solution is\n  // corresponding eigenvec.\n  for (i = 0; i < xOrder; i++) {\n    mt[i] = eigenvecs[i * xOrder + xOrder - 1];\n  }\n  return 1;\n}\nfunction solveLeastSquares(numberOfSamples, xt, xOrder, yt, yOrder, mt) {\n  let checkHomogeneous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  // check dimensional consistency\n  if (numberOfSamples < xOrder || numberOfSamples < yOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n  const homogenFlags = createArray(yOrder);\n  let allHomogeneous = 1;\n  let hmt;\n  let homogRC = 0;\n  let i;\n  let j;\n  let k;\n  let someHomogeneous = 0;\n\n  // Ok, first init some flags check and see if all the systems are homogeneous\n  if (checkHomogeneous) {\n    // If Y' is zero, it's a homogeneous system and can't be solved via\n    // the pseudoinverse method. Detect this case, warn the user, and\n    // invoke SolveHomogeneousLeastSquares instead. Note that it doesn't\n    // really make much sense for yOrder to be greater than one in this case,\n    // since that's just yOrder occurrences of a 0 vector on the RHS, but\n    // we allow it anyway. N\n\n    // Initialize homogeneous flags on a per-right-hand-side basis\n    for (j = 0; j < yOrder; j++) {\n      homogenFlags[j] = 1;\n    }\n    for (i = 0; i < numberOfSamples; i++) {\n      for (j = 0; j < yOrder; j++) {\n        if (Math.abs(yt[i * yOrder + j]) > VTK_SMALL_NUMBER) {\n          allHomogeneous = 0;\n          homogenFlags[j] = 0;\n        }\n      }\n    }\n\n    // If we've got one system, and it's homogeneous, do it and bail out quickly.\n    if (allHomogeneous && yOrder === 1) {\n      vtkWarningMacro('Detected homogeneous system (Y=0), calling SolveHomogeneousLeastSquares()');\n      return solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt);\n    }\n\n    // Ok, we've got more than one system of equations.\n    // Figure out if we need to calculate the homogeneous equation solution for\n    // any of them.\n    if (allHomogeneous) {\n      someHomogeneous = 1;\n    } else {\n      for (j = 0; j < yOrder; j++) {\n        if (homogenFlags[j]) {\n          someHomogeneous = 1;\n        }\n      }\n    }\n  }\n\n  // If necessary, solve the homogeneous problem\n  if (someHomogeneous) {\n    // hmt is the homogeneous equation version of mt, the general solution.\n    // hmt should be xOrder x yOrder, but since we are solving only the homogeneous part, here it is xOrder x 1\n    hmt = createArray(xOrder);\n\n    // Ok, solve the homogeneous problem\n    homogRC = solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, hmt);\n  }\n\n  // set up intermediate variables\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  const XXtI = createArray(xOrder * xOrder); // size x by x\n  const XYt = createArray(xOrder * yOrder); // size x by y\n\n  // first find the pseudoinverse matrix\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      // first calculate the XXt matrix, only do the upper half (symmetrical)\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n\n      // now calculate the XYt matrix\n      for (j = 0; j < yOrder; j++) {\n        XYt[i * yOrder + j] += xt[k * xOrder + i] * yt[k * yOrder + j];\n      }\n    }\n  }\n\n  // now fill in the lower half of the XXt matrix\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n  const successFlag = invertMatrix(XXt, XXtI, xOrder);\n\n  // next get the inverse of XXt\n  if (successFlag) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = 0; j < yOrder; j++) {\n        mt[i * yOrder + j] = 0.0;\n        for (k = 0; k < xOrder; k++) {\n          mt[i * yOrder + j] += XXtI[i * xOrder + k] * XYt[k * yOrder + j];\n        }\n      }\n    }\n  }\n\n  // Fix up any of the solutions that correspond to the homogeneous equation\n  // problem.\n  if (someHomogeneous) {\n    for (j = 0; j < yOrder; j++) {\n      if (homogenFlags[j]) {\n        // Fix this one\n        for (i = 0; i < xOrder; i++) {\n          mt[i * yOrder + j] = hmt[i * yOrder];\n        }\n      }\n    }\n  }\n  if (someHomogeneous) {\n    return homogRC && successFlag;\n  }\n  return successFlag;\n}\nfunction hex2float(hexStr) {\n  let outFloatArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0.5, 1];\n  switch (hexStr.length) {\n    case 3:\n      // abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[0], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[2], 16) * 17 / 255;\n      return outFloatArray;\n    case 4:\n      // #abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[2], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[3], 16) * 17 / 255;\n      return outFloatArray;\n    case 6:\n      // ab01df => #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(0, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(2, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(4, 2), 16) / 255;\n      return outFloatArray;\n    case 7:\n      // #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      return outFloatArray;\n    case 9:\n      // #ab01df00\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      outFloatArray[3] = parseInt(hexStr.substr(7, 2), 16) / 255;\n      return outFloatArray;\n    default:\n      return outFloatArray;\n  }\n}\nfunction rgb2hsv(rgb, hsv) {\n  let h;\n  let s;\n  const [r, g, b] = rgb;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  let cmax = r;\n  let cmin = r;\n  if (g > cmax) {\n    cmax = g;\n  } else if (g < cmin) {\n    cmin = g;\n  }\n  if (b > cmax) {\n    cmax = b;\n  } else if (b < cmin) {\n    cmin = b;\n  }\n  const v = cmax;\n  if (v > 0.0) {\n    s = (cmax - cmin) / cmax;\n  } else {\n    s = 0.0;\n  }\n  if (s > 0) {\n    if (r === cmax) {\n      h = onesixth * (g - b) / (cmax - cmin);\n    } else if (g === cmax) {\n      h = onethird + onesixth * (b - r) / (cmax - cmin);\n    } else {\n      h = twothird + onesixth * (r - g) / (cmax - cmin);\n    }\n    if (h < 0.0) {\n      h += 1.0;\n    }\n  } else {\n    h = 0.0;\n  }\n\n  // Set the values back to the array\n  hsv[0] = h;\n  hsv[1] = s;\n  hsv[2] = v;\n}\nfunction hsv2rgb(hsv, rgb) {\n  const [h, s, v] = hsv;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  const fivesixth = 5.0 / 6.0;\n  let r;\n  let g;\n  let b;\n\n  // compute RGB from HSV\n  if (h > onesixth && h <= onethird) {\n    // green/red\n    g = 1.0;\n    r = (onethird - h) / onesixth;\n    b = 0.0;\n  } else if (h > onethird && h <= 0.5) {\n    // green/blue\n    g = 1.0;\n    b = (h - onethird) / onesixth;\n    r = 0.0;\n  } else if (h > 0.5 && h <= twothird) {\n    // blue/green\n    b = 1.0;\n    g = (twothird - h) / onesixth;\n    r = 0.0;\n  } else if (h > twothird && h <= fivesixth) {\n    // blue/red\n    b = 1.0;\n    r = (h - twothird) / onesixth;\n    g = 0.0;\n  } else if (h > fivesixth && h <= 1.0) {\n    // red/blue\n    r = 1.0;\n    b = (1.0 - h) / onesixth;\n    g = 0.0;\n  } else {\n    // red/green\n    r = 1.0;\n    g = h / onesixth;\n    b = 0.0;\n  }\n\n  // add Saturation to the equation.\n  r = s * r + (1.0 - s);\n  g = s * g + (1.0 - s);\n  b = s * b + (1.0 - s);\n  r *= v;\n  g *= v;\n  b *= v;\n\n  // Assign back to the array\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nfunction lab2xyz(lab, xyz) {\n  // LAB to XYZ\n  const [L, a, b] = lab;\n  let var_Y = (L + 16) / 116;\n  let var_X = a / 500 + var_Y;\n  let var_Z = var_Y - b / 200;\n  if (var_Y ** 3 > 0.008856) {\n    var_Y **= 3;\n  } else {\n    var_Y = (var_Y - 16.0 / 116.0) / 7.787;\n  }\n  if (var_X ** 3 > 0.008856) {\n    var_X **= 3;\n  } else {\n    var_X = (var_X - 16.0 / 116.0) / 7.787;\n  }\n  if (var_Z ** 3 > 0.008856) {\n    var_Z **= 3;\n  } else {\n    var_Z = (var_Z - 16.0 / 116.0) / 7.787;\n  }\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  xyz[0] = ref_X * var_X; // ref_X = 0.9505  Observer= 2 deg Illuminant= D65\n  xyz[1] = ref_Y * var_Y; // ref_Y = 1.000\n  xyz[2] = ref_Z * var_Z; // ref_Z = 1.089\n}\nfunction xyz2lab(xyz, lab) {\n  const [x, y, z] = xyz;\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  let var_X = x / ref_X; // ref_X = 0.9505  Observer= 2 deg, Illuminant= D65\n  let var_Y = y / ref_Y; // ref_Y = 1.000\n  let var_Z = z / ref_Z; // ref_Z = 1.089\n\n  if (var_X > 0.008856) var_X **= 1.0 / 3.0;else var_X = 7.787 * var_X + 16.0 / 116.0;\n  if (var_Y > 0.008856) var_Y **= 1.0 / 3.0;else var_Y = 7.787 * var_Y + 16.0 / 116.0;\n  if (var_Z > 0.008856) var_Z **= 1.0 / 3.0;else var_Z = 7.787 * var_Z + 16.0 / 116.0;\n  lab[0] = 116 * var_Y - 16;\n  lab[1] = 500 * (var_X - var_Y);\n  lab[2] = 200 * (var_Y - var_Z);\n}\nfunction xyz2rgb(xyz, rgb) {\n  const [x, y, z] = xyz;\n  let r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  let g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  let b = x * 0.0557 + y * -0.204 + z * 1.057;\n\n  // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n  if (r > 0.0031308) r = 1.055 * r ** (1 / 2.4) - 0.055;else r *= 12.92;\n  if (g > 0.0031308) g = 1.055 * g ** (1 / 2.4) - 0.055;else g *= 12.92;\n  if (b > 0.0031308) b = 1.055 * b ** (1 / 2.4) - 0.055;else b *= 12.92;\n\n  // Clip colors. ideally we would do something that is perceptually closest\n  // (since we can see colors outside of the display gamut), but this seems to\n  // work well enough.\n  let maxVal = r;\n  if (maxVal < g) maxVal = g;\n  if (maxVal < b) maxVal = b;\n  if (maxVal > 1.0) {\n    r /= maxVal;\n    g /= maxVal;\n    b /= maxVal;\n  }\n  if (r < 0) r = 0;\n  if (g < 0) g = 0;\n  if (b < 0) b = 0;\n\n  // Push values back to array\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nfunction rgb2xyz(rgb, xyz) {\n  let [r, g, b] = rgb;\n  // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n  if (r > 0.04045) r = ((r + 0.055) / 1.055) ** 2.4;else r /= 12.92;\n  if (g > 0.04045) g = ((g + 0.055) / 1.055) ** 2.4;else g /= 12.92;\n  if (b > 0.04045) b = ((b + 0.055) / 1.055) ** 2.4;else b /= 12.92;\n\n  // Observer. = 2 deg, Illuminant = D65\n  xyz[0] = r * 0.4124 + g * 0.3576 + b * 0.1805;\n  xyz[1] = r * 0.2126 + g * 0.7152 + b * 0.0722;\n  xyz[2] = r * 0.0193 + g * 0.1192 + b * 0.9505;\n}\nfunction rgb2lab(rgb, lab) {\n  const xyz = [0, 0, 0];\n  rgb2xyz(rgb, xyz);\n  xyz2lab(xyz, lab);\n}\nfunction lab2rgb(lab, rgb) {\n  const xyz = [0, 0, 0];\n  lab2xyz(lab, xyz);\n  xyz2rgb(xyz, rgb);\n}\nfunction uninitializeBounds(bounds) {\n  bounds[0] = 1.0;\n  bounds[1] = -1.0;\n  bounds[2] = 1.0;\n  bounds[3] = -1.0;\n  bounds[4] = 1.0;\n  bounds[5] = -1.0;\n  return bounds;\n}\nfunction areBoundsInitialized(bounds) {\n  return !(bounds[1] - bounds[0] < 0.0);\n}\n\n/**\n * @deprecated please use vtkBoundingBox.addPoints(vtkBoundingBox.reset([]), points)\n */\nfunction computeBoundsFromPoints(point1, point2, bounds) {\n  bounds[0] = Math.min(point1[0], point2[0]);\n  bounds[1] = Math.max(point1[0], point2[0]);\n  bounds[2] = Math.min(point1[1], point2[1]);\n  bounds[3] = Math.max(point1[1], point2[1]);\n  bounds[4] = Math.min(point1[2], point2[2]);\n  bounds[5] = Math.max(point1[2], point2[2]);\n  return bounds;\n}\nfunction clampValue(value, minValue, maxValue) {\n  if (value < minValue) {\n    return minValue;\n  }\n  if (value > maxValue) {\n    return maxValue;\n  }\n  return value;\n}\nfunction clampVector(vector, minVector, maxVector) {\n  let out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 0, 0];\n  out[0] = clampValue(vector[0], minVector[0], maxVector[0]);\n  out[1] = clampValue(vector[1], minVector[1], maxVector[1]);\n  out[2] = clampValue(vector[2], minVector[2], maxVector[2]);\n  return out;\n}\nfunction clampAndNormalizeValue(value, range) {\n  let result = 0;\n  if (range[0] !== range[1]) {\n    // clamp\n    if (value < range[0]) {\n      result = range[0];\n    } else if (value > range[1]) {\n      result = range[1];\n    } else {\n      result = value;\n    }\n    // normalize\n    result = (result - range[0]) / (range[1] - range[0]);\n  }\n  return result;\n}\nconst getScalarTypeFittingRange = notImplemented('GetScalarTypeFittingRange');\nconst getAdjustedScalarRange = notImplemented('GetAdjustedScalarRange');\nfunction extentIsWithinOtherExtent(extent1, extent2) {\n  if (!extent1 || !extent2) {\n    return 0;\n  }\n  for (let i = 0; i < 6; i += 2) {\n    if (extent1[i] < extent2[i] || extent1[i] > extent2[i + 1] || extent1[i + 1] < extent2[i] || extent1[i + 1] > extent2[i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction boundsIsWithinOtherBounds(bounds1_6, bounds2_6, delta_3) {\n  if (!bounds1_6 || !bounds2_6) {\n    return 0;\n  }\n  for (let i = 0; i < 6; i += 2) {\n    if (bounds1_6[i] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i] - delta_3[i / 2] > bounds2_6[i + 1] || bounds1_6[i + 1] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i + 1] - delta_3[i / 2] > bounds2_6[i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction pointIsWithinBounds(point_3, bounds_6, delta_3) {\n  if (!point_3 || !bounds_6 || !delta_3) {\n    return 0;\n  }\n  for (let i = 0; i < 3; i++) {\n    if (point_3[i] + delta_3[i] < bounds_6[2 * i] || point_3[i] - delta_3[i] > bounds_6[2 * i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction solve3PointCircle(p1, p2, p3, center) {\n  const v21 = createArray(3);\n  const v32 = createArray(3);\n  const v13 = createArray(3);\n  const v12 = createArray(3);\n  const v23 = createArray(3);\n  const v31 = createArray(3);\n  for (let i = 0; i < 3; ++i) {\n    v21[i] = p1[i] - p2[i];\n    v32[i] = p2[i] - p3[i];\n    v13[i] = p3[i] - p1[i];\n    v12[i] = -v21[i];\n    v23[i] = -v32[i];\n    v31[i] = -v13[i];\n  }\n  const norm12 = norm(v12);\n  const norm23 = norm(v23);\n  const norm13 = norm(v13);\n  const crossv21v32 = createArray(3);\n  cross(v21, v32, crossv21v32);\n  const normCross = norm(crossv21v32);\n  const radius = norm12 * norm23 * norm13 / (2 * normCross);\n  const normCross22 = 2 * normCross * normCross;\n  const alpha = norm23 * norm23 * dot(v21, v31) / normCross22;\n  const beta = norm13 * norm13 * dot(v12, v32) / normCross22;\n  const gamma = norm12 * norm12 * dot(v13, v23) / normCross22;\n  for (let i = 0; i < 3; ++i) {\n    center[i] = alpha * p1[i] + beta * p2[i] + gamma * p3[i];\n  }\n  return radius;\n}\nconst inf = Infinity;\nconst negInf = -Infinity;\nconst isInf = value => !Number.isFinite(value);\nconst {\n  isFinite,\n  isNaN\n} = Number;\nconst isNan = isNaN;\n\n// JavaScript - add-on ----------------------\n\nfunction createUninitializedBounds() {\n  return [].concat([Number.MAX_VALUE, -Number.MAX_VALUE,\n  // X\n  Number.MAX_VALUE, -Number.MAX_VALUE,\n  // Y\n  Number.MAX_VALUE, -Number.MAX_VALUE // Z\n  ]);\n}\nfunction getMajorAxisIndex(vector) {\n  let maxValue = -1;\n  let axisIndex = -1;\n  for (let i = 0; i < vector.length; i++) {\n    const value = Math.abs(vector[i]);\n    if (value > maxValue) {\n      axisIndex = i;\n      maxValue = value;\n    }\n  }\n  return axisIndex;\n}\n\n// Return the closest orthogonal matrix of 1, -1 and 0\n// It works for both column major and row major matrices\n// This function iteratively associate a column with a row by choosing\n// the greatest absolute value from the remaining row and columns\n// For each association, a -1 or a 1 is set in the output, depending on\n// the sign of the value in the original matrix\nfunction getSparseOrthogonalMatrix(matrix) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  // Initialize rows and columns to available indices\n  const rows = new Array(n);\n  const cols = new Array(n);\n  for (let i = 0; i < n; ++i) {\n    rows[i] = i;\n    cols[i] = i;\n  }\n  // No need for the last iteration: i = 0\n  for (let i = n - 1; i > 0; i--) {\n    // Loop invariant:\n    // rows[0:i] and cols[0:i] contain the remaining rows and columns\n    // rows]i:n[ and cols]i:n[ contain the associations found (rows[k] is associated with cols[k])\n    let bestValue = -Infinity;\n    let bestRowI = 0;\n    let bestColI = 0;\n    for (let rowI = 0; rowI <= i; ++rowI) {\n      const row = rows[rowI];\n      for (let colI = 0; colI <= i; ++colI) {\n        const col = cols[colI];\n        const absVal = Math.abs(matrix[row + n * col]);\n        if (absVal > bestValue) {\n          bestValue = absVal;\n          bestRowI = rowI;\n          bestColI = colI;\n        }\n      }\n    }\n    // Found an association between rows[bestRowI] and cols[bestColI]\n    // Put both at the end of their array by swapping with i\n    [rows[i], rows[bestRowI]] = [rows[bestRowI], rows[i]];\n    [cols[i], cols[bestColI]] = [cols[bestColI], cols[i]];\n  }\n\n  // Convert row/column association to a matrix\n  const output = new Array(n * n).fill(0);\n  for (let i = 0; i < n; ++i) {\n    const matIdx = rows[i] + n * cols[i];\n    output[matIdx] = matrix[matIdx] < 0 ? -1 : 1;\n  }\n  return output;\n}\nfunction floatToHex2(value) {\n  const integer = Math.floor(value * 255);\n  if (integer > 15) {\n    return integer.toString(16);\n  }\n  return `0${integer.toString(16)}`;\n}\nfunction floatRGB2HexCode(rgbArray) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#';\n  return `${prefix}${rgbArray.map(floatToHex2).join('')}`;\n}\nfunction floatToChar(f) {\n  return Math.round(f * 255);\n}\nfunction float2CssRGBA(rgbArray) {\n  if (rgbArray.length === 3) {\n    return `rgb(${rgbArray.map(floatToChar).join(', ')})`;\n  }\n  return `rgba(${floatToChar(rgbArray[0] || 0)}, ${floatToChar(rgbArray[1] || 0)}, ${floatToChar(rgbArray[2] || 0)}, ${rgbArray[3] || 0})`;\n}\n\n// ----------------------------------------------------------------------------\n// Only Static API\n// ----------------------------------------------------------------------------\n\nvar vtkMath = {\n  Pi,\n  radiansFromDegrees,\n  degreesFromRadians,\n  round,\n  floor,\n  ceil,\n  ceilLog2,\n  min,\n  max,\n  arrayMin,\n  arrayMax,\n  arrayRange,\n  isPowerOfTwo,\n  nearestPowerOfTwo,\n  factorial,\n  binomial,\n  beginCombination,\n  nextCombination,\n  randomSeed,\n  getSeed,\n  random,\n  gaussian,\n  add,\n  subtract,\n  multiplyScalar,\n  multiplyScalar2D,\n  multiplyAccumulate,\n  multiplyAccumulate2D,\n  dot,\n  outer,\n  cross,\n  norm,\n  normalize,\n  perpendiculars,\n  projectVector,\n  projectVector2D,\n  distance2BetweenPoints,\n  angleBetweenVectors,\n  gaussianAmplitude,\n  gaussianWeight,\n  dot2D,\n  outer2D,\n  norm2D,\n  normalize2D,\n  determinant2x2,\n  LUFactor3x3,\n  LUSolve3x3,\n  linearSolve3x3,\n  multiply3x3_vect3,\n  multiply3x3_mat3,\n  multiplyMatrix,\n  transpose3x3,\n  invert3x3,\n  identity3x3,\n  identity,\n  isIdentity,\n  isIdentity3x3,\n  determinant3x3,\n  quaternionToMatrix3x3,\n  areEquals,\n  areMatricesEqual,\n  roundNumber,\n  roundVector,\n  matrix3x3ToQuaternion,\n  multiplyQuaternion,\n  orthogonalize3x3,\n  diagonalize3x3,\n  singularValueDecomposition3x3,\n  solveLinearSystem,\n  invertMatrix,\n  luFactorLinearSystem,\n  luSolveLinearSystem,\n  estimateMatrixCondition,\n  jacobi,\n  jacobiN,\n  solveHomogeneousLeastSquares,\n  solveLeastSquares,\n  hex2float,\n  rgb2hsv,\n  hsv2rgb,\n  lab2xyz,\n  xyz2lab,\n  xyz2rgb,\n  rgb2xyz,\n  rgb2lab,\n  lab2rgb,\n  uninitializeBounds,\n  areBoundsInitialized,\n  computeBoundsFromPoints,\n  clampValue,\n  clampVector,\n  clampAndNormalizeValue,\n  getScalarTypeFittingRange,\n  getAdjustedScalarRange,\n  extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds,\n  pointIsWithinBounds,\n  solve3PointCircle,\n  inf,\n  negInf,\n  isInf,\n  isNan: isNaN,\n  isNaN,\n  isFinite,\n  // JS add-on\n  createUninitializedBounds,\n  getMajorAxisIndex,\n  getSparseOrthogonalMatrix,\n  floatToHex2,\n  floatRGB2HexCode,\n  float2CssRGBA\n};\nvar vtkMath$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createArray: createArray,\n  Pi: Pi,\n  radiansFromDegrees: radiansFromDegrees,\n  degreesFromRadians: degreesFromRadians,\n  round: round,\n  floor: floor,\n  ceil: ceil,\n  min: min,\n  max: max,\n  arrayMin: arrayMin,\n  arrayMax: arrayMax,\n  arrayRange: arrayRange,\n  ceilLog2: ceilLog2,\n  factorial: factorial,\n  nearestPowerOfTwo: nearestPowerOfTwo,\n  isPowerOfTwo: isPowerOfTwo,\n  binomial: binomial,\n  beginCombination: beginCombination,\n  nextCombination: nextCombination,\n  randomSeed: randomSeed,\n  getSeed: getSeed,\n  random: random,\n  gaussian: gaussian,\n  add: add,\n  subtract: subtract,\n  multiplyScalar: multiplyScalar,\n  multiplyScalar2D: multiplyScalar2D,\n  multiplyAccumulate: multiplyAccumulate,\n  multiplyAccumulate2D: multiplyAccumulate2D,\n  dot: dot,\n  outer: outer,\n  cross: cross,\n  norm: norm,\n  normalize: normalize,\n  perpendiculars: perpendiculars,\n  projectVector: projectVector,\n  dot2D: dot2D,\n  projectVector2D: projectVector2D,\n  distance2BetweenPoints: distance2BetweenPoints,\n  angleBetweenVectors: angleBetweenVectors,\n  signedAngleBetweenVectors: signedAngleBetweenVectors,\n  gaussianAmplitude: gaussianAmplitude,\n  gaussianWeight: gaussianWeight,\n  outer2D: outer2D,\n  norm2D: norm2D,\n  normalize2D: normalize2D,\n  rowsToMat4: rowsToMat4,\n  columnsToMat4: columnsToMat4,\n  rowsToMat3: rowsToMat3,\n  columnsToMat3: columnsToMat3,\n  determinant2x2: determinant2x2,\n  LUFactor3x3: LUFactor3x3,\n  LUSolve3x3: LUSolve3x3,\n  linearSolve3x3: linearSolve3x3,\n  multiply3x3_vect3: multiply3x3_vect3,\n  multiply3x3_mat3: multiply3x3_mat3,\n  multiplyMatrix: multiplyMatrix,\n  transpose3x3: transpose3x3,\n  invert3x3: invert3x3,\n  determinant3x3: determinant3x3,\n  areEquals: areEquals,\n  areMatricesEqual: areMatricesEqual,\n  identity3x3: identity3x3,\n  identity: identity,\n  isIdentity: isIdentity,\n  isIdentity3x3: isIdentity3x3,\n  quaternionToMatrix3x3: quaternionToMatrix3x3,\n  roundNumber: roundNumber,\n  roundVector: roundVector,\n  jacobiN: jacobiN,\n  matrix3x3ToQuaternion: matrix3x3ToQuaternion,\n  multiplyQuaternion: multiplyQuaternion,\n  orthogonalize3x3: orthogonalize3x3,\n  diagonalize3x3: diagonalize3x3,\n  singularValueDecomposition3x3: singularValueDecomposition3x3,\n  luFactorLinearSystem: luFactorLinearSystem,\n  luSolveLinearSystem: luSolveLinearSystem,\n  solveLinearSystem: solveLinearSystem,\n  invertMatrix: invertMatrix,\n  estimateMatrixCondition: estimateMatrixCondition,\n  jacobi: jacobi,\n  solveHomogeneousLeastSquares: solveHomogeneousLeastSquares,\n  solveLeastSquares: solveLeastSquares,\n  hex2float: hex2float,\n  rgb2hsv: rgb2hsv,\n  hsv2rgb: hsv2rgb,\n  lab2xyz: lab2xyz,\n  xyz2lab: xyz2lab,\n  xyz2rgb: xyz2rgb,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n  lab2rgb: lab2rgb,\n  uninitializeBounds: uninitializeBounds,\n  areBoundsInitialized: areBoundsInitialized,\n  computeBoundsFromPoints: computeBoundsFromPoints,\n  clampValue: clampValue,\n  clampVector: clampVector,\n  clampAndNormalizeValue: clampAndNormalizeValue,\n  getScalarTypeFittingRange: getScalarTypeFittingRange,\n  getAdjustedScalarRange: getAdjustedScalarRange,\n  extentIsWithinOtherExtent: extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds: boundsIsWithinOtherBounds,\n  pointIsWithinBounds: pointIsWithinBounds,\n  solve3PointCircle: solve3PointCircle,\n  inf: inf,\n  negInf: negInf,\n  isInf: isInf,\n  isFinite: isFinite,\n  isNaN: isNaN,\n  isNan: isNan,\n  createUninitializedBounds: createUninitializedBounds,\n  getMajorAxisIndex: getMajorAxisIndex,\n  getSparseOrthogonalMatrix: getSparseOrthogonalMatrix,\n  floatToHex2: floatToHex2,\n  floatRGB2HexCode: floatRGB2HexCode,\n  float2CssRGBA: float2CssRGBA,\n  'default': vtkMath\n});\nexport { arrayMax as $, degreesFromRadians as A, areEquals as B, clampValue as C, arrayRange as D, getMajorAxisIndex as E, createUninitializedBounds as F, isIdentity3x3 as G, floor as H, isInf as I, rgb2hsv as J, rgb2lab as K, lab2rgb as L, round as M, normalize2D as N, nearestPowerOfTwo as O, multiply3x3_vect3 as P, getSparseOrthogonalMatrix as Q, areBoundsInitialized as R, isPowerOfTwo as S, angleBetweenVectors as T, signedAngleBetweenVectors as U, createArray as V, Pi as W, ceil as X, min as Y, max as Z, arrayMin as _, areMatricesEqual as a, float2CssRGBA as a$, ceilLog2 as a0, factorial as a1, binomial as a2, beginCombination as a3, nextCombination as a4, randomSeed as a5, getSeed as a6, gaussian as a7, multiplyScalar2D as a8, multiplyAccumulate2D as a9, diagonalize3x3 as aA, singularValueDecomposition3x3 as aB, luFactorLinearSystem as aC, luSolveLinearSystem as aD, invertMatrix as aE, estimateMatrixCondition as aF, solveHomogeneousLeastSquares as aG, solveLeastSquares as aH, hex2float as aI, lab2xyz as aJ, xyz2lab as aK, xyz2rgb as aL, rgb2xyz as aM, computeBoundsFromPoints as aN, clampAndNormalizeValue as aO, getScalarTypeFittingRange as aP, getAdjustedScalarRange as aQ, extentIsWithinOtherExtent as aR, boundsIsWithinOtherBounds as aS, pointIsWithinBounds as aT, solve3PointCircle as aU, inf as aV, negInf as aW, isFinite as aX, isNaN as aY, floatToHex2 as aZ, floatRGB2HexCode as a_, outer as aa, projectVector as ab, dot2D as ac, projectVector2D as ad, gaussianAmplitude as ae, gaussianWeight as af, outer2D as ag, norm2D as ah, rowsToMat4 as ai, columnsToMat4 as aj, columnsToMat3 as ak, LUFactor3x3 as al, LUSolve3x3 as am, linearSolve3x3 as an, multiply3x3_mat3 as ao, multiplyMatrix as ap, transpose3x3 as aq, invert3x3 as ar, identity3x3 as as, identity as at, isIdentity as au, quaternionToMatrix3x3 as av, roundNumber as aw, matrix3x3ToQuaternion as ax, multiplyQuaternion as ay, orthogonalize3x3 as az, roundVector as b, clampVector as c, dot as d, distance2BetweenPoints as e, vtkMath as f, solveLinearSystem as g, hsv2rgb as h, isNan as i, cross as j, add as k, normalize as l, multiplyAccumulate as m, norm as n, determinant2x2 as o, jacobiN as p, perpendiculars as q, radiansFromDegrees as r, subtract as s, jacobi as t, uninitializeBounds as u, vtkMath$1 as v, multiplyScalar as w, random as x, determinant3x3 as y, rowsToMat3 as z };","map":{"version":3,"names":["seedrandom","m","macro","IDENTITY","IDENTITY_3X3","VTK_SMALL_NUMBER","EPSILON","vtkErrorMacro","vtkWarningMacro","randomSeedValue","VTK_MAX_ROTATIONS","notImplemented","method","swapRowsMatrix_nxn","matrix","n","row1","row2","tmp","i","swapColumnsMatrix_nxn","column1","column2","createArray","size","arguments","length","undefined","res","Array","Pi","Math","PI","radiansFromDegrees","deg","degreesFromRadians","rad","round","floor","ceil","min","max","arrayMin","arr","offset","stride","minValue","Infinity","len","arrayMax","maxValue","arrayRange","ceilLog2","factorial","nearestPowerOfTwo","xi","v","isPowerOfTwo","x","binomial","r","beginCombination","nextCombination","status","j","randomSeed","seed","global","getSeed","random","delta","gaussian","add","a","b","out","subtract","multiplyScalar","vec","scalar","multiplyScalar2D","multiplyAccumulate","multiplyAccumulate2D","dot","y","outer","out_3x3","cross","Zx","Zy","Zz","norm","abs","sqrt","sum","normalize","den","perpendiculars","z","theta","x2","y2","z2","dx","dy","dz","c","sintheta","sin","costheta","cos","projectVector","projection","bSquared","scale","dot2D","projectVector2D","distance2BetweenPoints","angleBetweenVectors","v1","v2","crossVect","atan2","signedAngleBetweenVectors","vN","angle","gaussianAmplitude","mean","variance","position","distanceFromMean","exp","gaussianWeight","outer2D","out_2x2","norm2D","x2D","normalize2D","rowsToMat4","row0","row3","mat","columnsToMat4","column0","column3","rowsToMat3","columnsToMat3","determinant2x2","_len","args","_key","Number","NaN","LUFactor3x3","mat_3x3","index_3","maxI","largest","LUSolve3x3","x_3","linearSolve3x3","y_3","a1","b1","c1","a2","b2","c2","a3","b3","c3","d1","d2","d3","e1","e2","e3","f1","f2","f3","det","v3","multiply3x3_vect3","in_3","out_3","multiply3x3_mat3","a_3x3","b_3x3","copyA","copyB","multiplyMatrix","rowA","colA","rowB","colB","out_rowXcol","k","transpose3x3","in_3x3","outT_3x3","invert3x3","outI_3x3","determinant3x3","areEquals","eps","isEqual","element","index","every","areMatricesEqual","identity3x3","identity","isIdentity","isIdentity3x3","quaternionToMatrix3x3","quat_4","ww","wx","wy","wz","xx","yy","zz","xy","xz","yz","rr","f","s","roundNumber","num","digits","includes","split","sig","roundVector","vector","jacobiN","w","iq","ip","numPos","tresh","t","tau","sm","h","g","vtkROTATE","aa","ii","jj","ceil_half_n","matrix3x3ToQuaternion","eigenvectors","eigenvalues","NTemp","multiplyQuaternion","quat_1","quat_2","quat_out","xw","yw","yx","zw","zx","zy","orthogonalize3x3","x1","x3","y3","flip","quat","diagonalize3x3","w_3","v_3x3","maxVal","vectTmp1","vectTmp2","eigenValTmp","singularValueDecomposition3x3","u_3x3","vT_3x3","B","d","luFactorLinearSystem","A","temp1","temp2","luSolveLinearSystem","idx","solveLinearSystem","invertMatrix","AI","column","tmp1Size","tmp2Size","estimateMatrixCondition","MAX_VALUE","jacobi","solveHomogeneousLeastSquares","numberOfSamples","xt","xOrder","mt","XXt","eigenvals","eigenvecs","solveLeastSquares","yt","yOrder","checkHomogeneous","homogenFlags","allHomogeneous","hmt","homogRC","someHomogeneous","XXtI","XYt","successFlag","hex2float","hexStr","outFloatArray","parseInt","substr","rgb2hsv","rgb","hsv","onethird","onesixth","twothird","cmax","cmin","hsv2rgb","fivesixth","lab2xyz","lab","xyz","L","var_Y","var_X","var_Z","ref_X","ref_Y","ref_Z","xyz2lab","xyz2rgb","rgb2xyz","rgb2lab","lab2rgb","uninitializeBounds","bounds","areBoundsInitialized","computeBoundsFromPoints","point1","point2","clampValue","value","clampVector","minVector","maxVector","clampAndNormalizeValue","range","result","getScalarTypeFittingRange","getAdjustedScalarRange","extentIsWithinOtherExtent","extent1","extent2","boundsIsWithinOtherBounds","bounds1_6","bounds2_6","delta_3","pointIsWithinBounds","point_3","bounds_6","solve3PointCircle","p1","p2","p3","center","v21","v32","v13","v12","v23","v31","norm12","norm23","norm13","crossv21v32","normCross","radius","normCross22","alpha","beta","gamma","inf","negInf","isInf","isFinite","isNaN","isNan","createUninitializedBounds","concat","getMajorAxisIndex","axisIndex","getSparseOrthogonalMatrix","rows","cols","bestValue","bestRowI","bestColI","rowI","row","colI","col","absVal","output","fill","matIdx","floatToHex2","integer","toString","floatRGB2HexCode","rgbArray","prefix","map","join","floatToChar","float2CssRGBA","vtkMath","vtkMath$1","Object","freeze","__proto__","$","C","D","E","F","G","H","I","J","K","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","_","a$","a0","a4","a5","a6","a7","a8","a9","aA","aB","aC","aD","aE","aF","aG","aH","aI","aJ","aK","aL","aM","aN","aO","aP","aQ","aR","aS","aT","aU","aV","aW","aX","aY","aZ","a_","ab","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","an","ao","ap","aq","ar","as","at","au","av","aw","ax","ay","az","e","l","o","p","q","u"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Common/Core/Math/index.js"],"sourcesContent":["import seedrandom from 'seedrandom';\nimport { m as macro } from '../../../macros2.js';\nimport { IDENTITY, IDENTITY_3X3, VTK_SMALL_NUMBER, EPSILON } from './Constants.js';\n\nconst {\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n/* eslint-disable camelcase                                                  */\n/* eslint-disable no-cond-assign                                             */\n/* eslint-disable no-bitwise                                                 */\n/* eslint-disable no-multi-assign                                            */\n// ----------------------------------------------------------------------------\nlet randomSeedValue = 0;\nconst VTK_MAX_ROTATIONS = 20;\nfunction notImplemented(method) {\n  return () => vtkErrorMacro(`vtkMath::${method} - NOT IMPLEMENTED`);\n}\n\n// Swap rows for n by n matrix\nfunction swapRowsMatrix_nxn(matrix, n, row1, row2) {\n  let tmp;\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[row1 * n + i];\n    matrix[row1 * n + i] = matrix[row2 * n + i];\n    matrix[row2 * n + i] = tmp;\n  }\n}\n\n// Swap columns for n by n matrix\nfunction swapColumnsMatrix_nxn(matrix, n, column1, column2) {\n  let tmp;\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[i * n + column1];\n    matrix[i * n + column1] = matrix[i * n + column2];\n    matrix[i * n + column2] = tmp;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction createArray() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  // faster than Array.from and/or while loop\n  const res = Array(size);\n  for (let i = 0; i < size; ++i) {\n    res[i] = 0;\n  }\n  return res;\n}\nconst Pi = () => Math.PI;\nfunction radiansFromDegrees(deg) {\n  return deg / 180 * Math.PI;\n}\nfunction degreesFromRadians(rad) {\n  return rad * 180 / Math.PI;\n}\nconst {\n  round,\n  floor,\n  ceil,\n  min,\n  max\n} = Math;\nfunction arrayMin(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let minValue = Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n  }\n  return minValue;\n}\nfunction arrayMax(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let maxValue = -Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n  return maxValue;\n}\nfunction arrayRange(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let minValue = Infinity;\n  let maxValue = -Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n  return [minValue, maxValue];\n}\nconst ceilLog2 = notImplemented('ceilLog2');\nconst factorial = notImplemented('factorial');\nfunction nearestPowerOfTwo(xi) {\n  let v = 1;\n  while (v < xi) {\n    v *= 2;\n  }\n  return v;\n}\nfunction isPowerOfTwo(x) {\n  return x === nearestPowerOfTwo(x);\n}\nfunction binomial(m, n) {\n  let r = 1;\n  for (let i = 1; i <= n; ++i) {\n    r *= (m - i + 1) / i;\n  }\n  return Math.floor(r);\n}\nfunction beginCombination(m, n) {\n  if (m < n) {\n    return 0;\n  }\n  const r = createArray(n);\n  for (let i = 0; i < n; ++i) {\n    r[i] = i;\n  }\n  return r;\n}\nfunction nextCombination(m, n, r) {\n  let status = 0;\n  for (let i = n - 1; i >= 0; --i) {\n    if (r[i] < m - n + i) {\n      let j = r[i] + 1;\n      while (i < n) {\n        r[i++] = j++;\n      }\n      status = 1;\n      break;\n    }\n  }\n  return status;\n}\nfunction randomSeed(seed) {\n  seedrandom(`${seed}`, {\n    global: true\n  });\n  randomSeedValue = seed;\n}\nfunction getSeed() {\n  return randomSeedValue;\n}\nfunction random() {\n  let minValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const delta = maxValue - minValue;\n  return minValue + delta * Math.random();\n}\nconst gaussian = notImplemented('gaussian');\n\n// Vect3 operations\nfunction add(a, b, out) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\nfunction subtract(a, b, out) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\nfunction multiplyScalar(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  vec[2] *= scalar;\n  return vec;\n}\nfunction multiplyScalar2D(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  return vec;\n}\nfunction multiplyAccumulate(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  out[2] = a[2] + b[2] * scalar;\n  return out;\n}\nfunction multiplyAccumulate2D(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  return out;\n}\nfunction dot(x, y) {\n  return x[0] * y[0] + x[1] * y[1] + x[2] * y[2];\n}\nfunction outer(x, y, out_3x3) {\n  out_3x3[0] = x[0] * y[0];\n  out_3x3[1] = x[0] * y[1];\n  out_3x3[2] = x[0] * y[2];\n  out_3x3[3] = x[1] * y[0];\n  out_3x3[4] = x[1] * y[1];\n  out_3x3[5] = x[1] * y[2];\n  out_3x3[6] = x[2] * y[0];\n  out_3x3[7] = x[2] * y[1];\n  out_3x3[8] = x[2] * y[2];\n}\nfunction cross(x, y, out) {\n  const Zx = x[1] * y[2] - x[2] * y[1];\n  const Zy = x[2] * y[0] - x[0] * y[2];\n  const Zz = x[0] * y[1] - x[1] * y[0];\n  out[0] = Zx;\n  out[1] = Zy;\n  out[2] = Zz;\n  return out;\n}\nfunction norm(x) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  switch (n) {\n    case 1:\n      return Math.abs(x);\n    case 2:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n    case 3:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n    default:\n      {\n        let sum = 0;\n        for (let i = 0; i < n; i++) {\n          sum += x[i] * x[i];\n        }\n        return Math.sqrt(sum);\n      }\n  }\n}\nfunction normalize(x) {\n  const den = norm(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n    x[2] /= den;\n  }\n  return den;\n}\nfunction perpendiculars(x, y, z, theta) {\n  const x2 = x[0] * x[0];\n  const y2 = x[1] * x[1];\n  const z2 = x[2] * x[2];\n  const r = Math.sqrt(x2 + y2 + z2);\n  let dx;\n  let dy;\n  let dz;\n\n  // transpose the vector to avoid divide-by-zero error\n  if (x2 > y2 && x2 > z2) {\n    dx = 0;\n    dy = 1;\n    dz = 2;\n  } else if (y2 > z2) {\n    dx = 1;\n    dy = 2;\n    dz = 0;\n  } else {\n    dx = 2;\n    dy = 0;\n    dz = 1;\n  }\n  const a = x[dx] / r;\n  const b = x[dy] / r;\n  const c = x[dz] / r;\n  const tmp = Math.sqrt(a * a + c * c);\n  if (theta !== 0) {\n    const sintheta = Math.sin(theta);\n    const costheta = Math.cos(theta);\n    if (y) {\n      y[dx] = (c * costheta - a * b * sintheta) / tmp;\n      y[dy] = sintheta * tmp;\n      y[dz] = (-(a * costheta) - b * c * sintheta) / tmp;\n    }\n    if (z) {\n      z[dx] = (-(c * sintheta) - a * b * costheta) / tmp;\n      z[dy] = costheta * tmp;\n      z[dz] = (a * sintheta - b * c * costheta) / tmp;\n    }\n  } else {\n    if (y) {\n      y[dx] = c / tmp;\n      y[dy] = 0;\n      y[dz] = -a / tmp;\n    }\n    if (z) {\n      z[dx] = -a * b / tmp;\n      z[dy] = tmp;\n      z[dz] = -b * c / tmp;\n    }\n  }\n}\nfunction projectVector(a, b, projection) {\n  const bSquared = dot(b, b);\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    projection[2] = 0;\n    return false;\n  }\n  const scale = dot(a, b) / bSquared;\n  for (let i = 0; i < 3; i++) {\n    projection[i] = b[i];\n  }\n  multiplyScalar(projection, scale);\n  return true;\n}\nfunction dot2D(x, y) {\n  return x[0] * y[0] + x[1] * y[1];\n}\nfunction projectVector2D(a, b, projection) {\n  const bSquared = dot2D(b, b);\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    return false;\n  }\n  const scale = dot2D(a, b) / bSquared;\n  for (let i = 0; i < 2; i++) {\n    projection[i] = b[i];\n  }\n  multiplyScalar2D(projection, scale);\n  return true;\n}\nfunction distance2BetweenPoints(x, y) {\n  return (x[0] - y[0]) * (x[0] - y[0]) + (x[1] - y[1]) * (x[1] - y[1]) + (x[2] - y[2]) * (x[2] - y[2]);\n}\nfunction angleBetweenVectors(v1, v2) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  return Math.atan2(norm(crossVect), dot(v1, v2));\n}\nfunction signedAngleBetweenVectors(v1, v2, vN) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  const angle = Math.atan2(norm(crossVect), dot(v1, v2));\n  return dot(crossVect, vN) >= 0 ? angle : -angle;\n}\nfunction gaussianAmplitude(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return 1 / Math.sqrt(2 * Math.PI * variance) * Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\nfunction gaussianWeight(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\nfunction outer2D(x, y, out_2x2) {\n  out_2x2[0] = x[0] * y[0];\n  out_2x2[1] = x[0] * y[1];\n  out_2x2[2] = x[1] * y[0];\n  out_2x2[3] = x[1] * y[1];\n}\nfunction norm2D(x2D) {\n  return Math.sqrt(x2D[0] * x2D[0] + x2D[1] * x2D[1]);\n}\nfunction normalize2D(x) {\n  const den = norm2D(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n  }\n  return den;\n}\nfunction rowsToMat4(row0, row1, row2, row3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[i] = row0[i];\n    mat[4 + i] = row1[i];\n    mat[8 + i] = row2[i];\n    mat[12 + i] = row3[i];\n  }\n  return mat;\n}\nfunction columnsToMat4(column0, column1, column2, column3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[4 * i] = column0[i];\n    mat[4 * i + 1] = column1[i];\n    mat[4 * i + 2] = column2[i];\n    mat[4 * i + 3] = column3[i];\n  }\n  return mat;\n}\nfunction rowsToMat3(row0, row1, row2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[i] = row0[i];\n    mat[3 + i] = row1[i];\n    mat[6 + i] = row2[i];\n  }\n  return mat;\n}\nfunction columnsToMat3(column0, column1, column2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[3 * i] = column0[i];\n    mat[3 * i + 1] = column1[i];\n    mat[3 * i + 2] = column2[i];\n  }\n  return mat;\n}\nfunction determinant2x2() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (args.length === 2) {\n    return args[0][0] * args[1][1] - args[1][0] * args[0][1];\n  }\n  if (args.length === 4) {\n    return args[0] * args[3] - args[1] * args[2];\n  }\n  return Number.NaN;\n}\nfunction LUFactor3x3(mat_3x3, index_3) {\n  let maxI;\n  let tmp;\n  let largest;\n  const scale = [0, 0, 0];\n\n  // Loop over rows to get implicit scaling information\n  for (let i = 0; i < 3; i++) {\n    largest = Math.abs(mat_3x3[i * 3]);\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 1])) > largest) {\n      largest = tmp;\n    }\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 2])) > largest) {\n      largest = tmp;\n    }\n    scale[i] = 1 / largest;\n  }\n\n  // Loop over all columns using Crout's method\n\n  // first column\n  largest = scale[0] * Math.abs(mat_3x3[0]);\n  maxI = 0;\n  if ((tmp = scale[1] * Math.abs(mat_3x3[3])) >= largest) {\n    largest = tmp;\n    maxI = 1;\n  }\n  if ((tmp = scale[2] * Math.abs(mat_3x3[6])) >= largest) {\n    maxI = 2;\n  }\n  if (maxI !== 0) {\n    swapRowsMatrix_nxn(mat_3x3, 3, maxI, 0);\n    scale[maxI] = scale[0];\n  }\n  index_3[0] = maxI;\n  mat_3x3[3] /= mat_3x3[0];\n  mat_3x3[6] /= mat_3x3[0];\n\n  // second column\n  mat_3x3[4] -= mat_3x3[3] * mat_3x3[1];\n  mat_3x3[7] -= mat_3x3[6] * mat_3x3[1];\n  largest = scale[1] * Math.abs(mat_3x3[4]);\n  maxI = 1;\n  if ((tmp = scale[2] * Math.abs(mat_3x3[7])) >= largest) {\n    maxI = 2;\n    swapRowsMatrix_nxn(mat_3x3, 3, 1, 2);\n    scale[2] = scale[1];\n  }\n  index_3[1] = maxI;\n  mat_3x3[7] /= mat_3x3[4];\n\n  // third column\n  mat_3x3[5] -= mat_3x3[3] * mat_3x3[2];\n  mat_3x3[8] -= mat_3x3[6] * mat_3x3[2] + mat_3x3[7] * mat_3x3[5];\n  index_3[2] = 2;\n}\nfunction LUSolve3x3(mat_3x3, index_3, x_3) {\n  // forward substitution\n  let sum = x_3[index_3[0]];\n  x_3[index_3[0]] = x_3[0];\n  x_3[0] = sum;\n  sum = x_3[index_3[1]];\n  x_3[index_3[1]] = x_3[1];\n  x_3[1] = sum - mat_3x3[3] * x_3[0];\n  sum = x_3[index_3[2]];\n  x_3[index_3[2]] = x_3[2];\n  x_3[2] = sum - mat_3x3[6] * x_3[0] - mat_3x3[7] * x_3[1];\n\n  // back substitution\n  x_3[2] /= mat_3x3[8];\n  x_3[1] = (x_3[1] - mat_3x3[5] * x_3[2]) / mat_3x3[4];\n  x_3[0] = (x_3[0] - mat_3x3[1] * x_3[1] - mat_3x3[2] * x_3[2]) / mat_3x3[0];\n}\nfunction linearSolve3x3(mat_3x3, x_3, y_3) {\n  const a1 = mat_3x3[0];\n  const b1 = mat_3x3[1];\n  const c1 = mat_3x3[2];\n  const a2 = mat_3x3[3];\n  const b2 = mat_3x3[4];\n  const c2 = mat_3x3[5];\n  const a3 = mat_3x3[6];\n  const b3 = mat_3x3[7];\n  const c3 = mat_3x3[8];\n\n  // Compute the adjoint\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2);\n\n  // Compute the determinant\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n\n  // Multiply by the adjoint\n  const v1 = d1 * x_3[0] + e1 * x_3[1] + f1 * x_3[2];\n  const v2 = d2 * x_3[0] + e2 * x_3[1] + f2 * x_3[2];\n  const v3 = d3 * x_3[0] + e3 * x_3[1] + f3 * x_3[2];\n\n  // Divide by the determinant\n  y_3[0] = v1 / det;\n  y_3[1] = v2 / det;\n  y_3[2] = v3 / det;\n}\nfunction multiply3x3_vect3(mat_3x3, in_3, out_3) {\n  const x = mat_3x3[0] * in_3[0] + mat_3x3[1] * in_3[1] + mat_3x3[2] * in_3[2];\n  const y = mat_3x3[3] * in_3[0] + mat_3x3[4] * in_3[1] + mat_3x3[5] * in_3[2];\n  const z = mat_3x3[6] * in_3[0] + mat_3x3[7] * in_3[1] + mat_3x3[8] * in_3[2];\n  out_3[0] = x;\n  out_3[1] = y;\n  out_3[2] = z;\n}\nfunction multiply3x3_mat3(a_3x3, b_3x3, out_3x3) {\n  const copyA = [...a_3x3];\n  const copyB = [...b_3x3];\n  for (let i = 0; i < 3; i++) {\n    out_3x3[i] = copyA[0] * copyB[i] + copyA[1] * copyB[i + 3] + copyA[2] * copyB[i + 6];\n    out_3x3[i + 3] = copyA[3] * copyB[i] + copyA[4] * copyB[i + 3] + copyA[5] * copyB[i + 6];\n    out_3x3[i + 6] = copyA[6] * copyB[i] + copyA[7] * copyB[i + 3] + copyA[8] * copyB[i + 6];\n  }\n}\nfunction multiplyMatrix(a, b, rowA, colA, rowB, colB, out_rowXcol) {\n  // we need colA == rowB\n  if (colA !== rowB) {\n    vtkErrorMacro('Number of columns of A must match number of rows of B.');\n  }\n\n  // If a or b is used to store the result, copying them is required\n  const copyA = [...a];\n  const copyB = [...b];\n  // output matrix is rowA*colB\n  // output row\n  for (let i = 0; i < rowA; i++) {\n    // output col\n    for (let j = 0; j < colB; j++) {\n      out_rowXcol[i * colB + j] = 0;\n      // sum for this point\n      for (let k = 0; k < colA; k++) {\n        out_rowXcol[i * colB + j] += copyA[i * colA + k] * copyB[j + colB * k];\n      }\n    }\n  }\n}\nfunction transpose3x3(in_3x3, outT_3x3) {\n  let tmp;\n\n  // off-diagonal elements\n  tmp = in_3x3[3];\n  outT_3x3[3] = in_3x3[1];\n  outT_3x3[1] = tmp;\n  tmp = in_3x3[6];\n  outT_3x3[6] = in_3x3[2];\n  outT_3x3[2] = tmp;\n  tmp = in_3x3[7];\n  outT_3x3[7] = in_3x3[5];\n  outT_3x3[5] = tmp;\n\n  // on-diagonal elements\n  outT_3x3[0] = in_3x3[0];\n  outT_3x3[4] = in_3x3[4];\n  outT_3x3[8] = in_3x3[8];\n}\nfunction invert3x3(in_3x3, outI_3x3) {\n  const a1 = in_3x3[0];\n  const b1 = in_3x3[1];\n  const c1 = in_3x3[2];\n  const a2 = in_3x3[3];\n  const b2 = in_3x3[4];\n  const c2 = in_3x3[5];\n  const a3 = in_3x3[6];\n  const b3 = in_3x3[7];\n  const c3 = in_3x3[8];\n\n  // Compute the adjoint\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2);\n\n  // Divide by the determinant\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n  if (det === 0) {\n    vtkWarningMacro('Matrix has 0 determinant');\n  }\n  outI_3x3[0] = d1 / det;\n  outI_3x3[3] = d2 / det;\n  outI_3x3[6] = d3 / det;\n  outI_3x3[1] = e1 / det;\n  outI_3x3[4] = e2 / det;\n  outI_3x3[7] = e3 / det;\n  outI_3x3[2] = f1 / det;\n  outI_3x3[5] = f2 / det;\n  outI_3x3[8] = f3 / det;\n}\nfunction determinant3x3(mat_3x3) {\n  return mat_3x3[0] * mat_3x3[4] * mat_3x3[8] + mat_3x3[3] * mat_3x3[7] * mat_3x3[2] + mat_3x3[6] * mat_3x3[1] * mat_3x3[5] - mat_3x3[0] * mat_3x3[7] * mat_3x3[5] - mat_3x3[3] * mat_3x3[1] * mat_3x3[8] - mat_3x3[6] * mat_3x3[4] * mat_3x3[2];\n}\n\n/**\n * Returns true if elements of both arrays are equals.\n * @param {Array} a an array of numbers (vector, point, matrix...)\n * @param {Array} b an array of numbers (vector, point, matrix...)\n * @param {Number} eps tolerance\n */\nfunction areEquals(a, b) {\n  let eps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSILON;\n  if (a.length !== b.length) {\n    return false;\n  }\n  function isEqual(element, index) {\n    return Math.abs(element - b[index]) <= eps;\n  }\n  return a.every(isEqual);\n}\nconst areMatricesEqual = areEquals;\nfunction identity3x3(mat_3x3) {\n  for (let i = 0; i < 3; i++) {\n    /* eslint-disable-next-line no-multi-assign */\n    mat_3x3[i * 3] = mat_3x3[i * 3 + 1] = mat_3x3[i * 3 + 2] = 0;\n    mat_3x3[i * 3 + i] = 1;\n  }\n}\nfunction identity(n, mat) {\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      mat[i * n + j] = 0;\n    }\n    mat[i * n + i] = 1;\n  }\n  return mat;\n}\nfunction isIdentity(mat) {\n  let eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return areMatricesEqual(mat, IDENTITY, eps);\n}\nfunction isIdentity3x3(mat) {\n  let eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return areMatricesEqual(mat, IDENTITY_3X3, eps);\n}\nfunction quaternionToMatrix3x3(quat_4, mat_3x3) {\n  const ww = quat_4[0] * quat_4[0];\n  const wx = quat_4[0] * quat_4[1];\n  const wy = quat_4[0] * quat_4[2];\n  const wz = quat_4[0] * quat_4[3];\n  const xx = quat_4[1] * quat_4[1];\n  const yy = quat_4[2] * quat_4[2];\n  const zz = quat_4[3] * quat_4[3];\n  const xy = quat_4[1] * quat_4[2];\n  const xz = quat_4[1] * quat_4[3];\n  const yz = quat_4[2] * quat_4[3];\n  const rr = xx + yy + zz;\n  // normalization factor, just in case quaternion was not normalized\n  let f = 1 / (ww + rr);\n  const s = (ww - rr) * f;\n  f *= 2;\n  mat_3x3[0] = xx * f + s;\n  mat_3x3[3] = (xy + wz) * f;\n  mat_3x3[6] = (xz - wy) * f;\n  mat_3x3[1] = (xy - wz) * f;\n  mat_3x3[4] = yy * f + s;\n  mat_3x3[7] = (yz + wx) * f;\n  mat_3x3[2] = (xz + wy) * f;\n  mat_3x3[5] = (yz - wx) * f;\n  mat_3x3[8] = zz * f + s;\n}\nfunction roundNumber(num) {\n  let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!`${num}`.includes('e')) {\n    return +`${Math.round(`${num}e+${digits}`)}e-${digits}`;\n  }\n  const arr = `${num}`.split('e');\n  let sig = '';\n  if (+arr[1] + digits > 0) {\n    sig = '+';\n  }\n  return +`${Math.round(`${+arr[0]}e${sig}${+arr[1] + digits}`)}e-${digits}`;\n}\nfunction roundVector(vector) {\n  let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n  let digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[0] = roundNumber(vector[0], digits);\n  out[1] = roundNumber(vector[1], digits);\n  out[2] = roundNumber(vector[2], digits);\n  return out;\n}\nfunction jacobiN(a, n, w, v) {\n  let i;\n  let j;\n  let k;\n  let iq;\n  let ip;\n  let numPos;\n  let tresh;\n  let theta;\n  let t;\n  let tau;\n  let sm;\n  let s;\n  let h;\n  let g;\n  let c;\n  let tmp;\n  const b = createArray(n);\n  const z = createArray(n);\n  const vtkROTATE = (aa, ii, jj) => {\n    g = aa[ii];\n    h = aa[jj];\n    aa[ii] = g - s * (h + g * tau);\n    aa[jj] = h + s * (g - h * tau);\n  };\n\n  // initialize\n  identity(n, v);\n  for (ip = 0; ip < n; ip++) {\n    b[ip] = w[ip] = a[ip + ip * n];\n    z[ip] = 0.0;\n  }\n\n  // begin rotation sequence\n  for (i = 0; i < VTK_MAX_ROTATIONS; i++) {\n    sm = 0.0;\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        sm += Math.abs(a[ip * n + iq]);\n      }\n    }\n    if (sm === 0.0) {\n      break;\n    }\n\n    // first 3 sweeps\n    if (i < 3) {\n      tresh = 0.2 * sm / (n * n);\n    } else {\n      tresh = 0.0;\n    }\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        g = 100.0 * Math.abs(a[ip * n + iq]);\n\n        // after 4 sweeps\n        if (i > 3 && Math.abs(w[ip]) + g === Math.abs(w[ip]) && Math.abs(w[iq]) + g === Math.abs(w[iq])) {\n          a[ip * n + iq] = 0.0;\n        } else if (Math.abs(a[ip * n + iq]) > tresh) {\n          h = w[iq] - w[ip];\n          if (Math.abs(h) + g === Math.abs(h)) {\n            t = a[ip * n + iq] / h;\n          } else {\n            theta = 0.5 * h / a[ip * n + iq];\n            t = 1.0 / (Math.abs(theta) + Math.sqrt(1.0 + theta * theta));\n            if (theta < 0.0) {\n              t = -t;\n            }\n          }\n          c = 1.0 / Math.sqrt(1 + t * t);\n          s = t * c;\n          tau = s / (1.0 + c);\n          h = t * a[ip * n + iq];\n          z[ip] -= h;\n          z[iq] += h;\n          w[ip] -= h;\n          w[iq] += h;\n          a[ip * n + iq] = 0.0;\n\n          // ip already shifted left by 1 unit\n          for (j = 0; j <= ip - 1; j++) {\n            vtkROTATE(a, j * n + ip, j * n + iq);\n          }\n          // ip and iq already shifted left by 1 unit\n          for (j = ip + 1; j <= iq - 1; j++) {\n            vtkROTATE(a, ip * n + j, j * n + iq);\n          }\n          // iq already shifted left by 1 unit\n          for (j = iq + 1; j < n; j++) {\n            vtkROTATE(a, ip * n + j, iq * n + j);\n          }\n          for (j = 0; j < n; j++) {\n            vtkROTATE(v, j * n + ip, j * n + iq);\n          }\n        }\n      }\n    }\n    for (ip = 0; ip < n; ip++) {\n      b[ip] += z[ip];\n      w[ip] = b[ip];\n      z[ip] = 0.0;\n    }\n  }\n\n  // this is NEVER called\n  if (i >= VTK_MAX_ROTATIONS) {\n    vtkWarningMacro('vtkMath::Jacobi: Error extracting eigenfunctions');\n    return 0;\n  }\n\n  // sort eigenfunctions: these changes do not affect accuracy\n  for (j = 0; j < n - 1; j++) {\n    // boundary incorrect\n    k = j;\n    tmp = w[k];\n    for (i = j + 1; i < n; i++) {\n      // boundary incorrect, shifted already\n      if (w[i] >= tmp || Math.abs(w[i] - tmp) < VTK_SMALL_NUMBER) {\n        // why exchange if same?\n        k = i;\n        tmp = w[k];\n      }\n    }\n    if (k !== j) {\n      w[k] = w[j];\n      w[j] = tmp;\n      swapColumnsMatrix_nxn(v, n, j, k);\n    }\n  }\n  // ensure eigenvector consistency (i.e., Jacobi can compute vectors that\n  // are negative of one another (.707,.707,0) and (-.707,-.707,0). This can\n  // reek havoc in hyperstreamline/other stuff. We will select the most\n  // positive eigenvector.\n  const ceil_half_n = (n >> 1) + (n & 1);\n  for (numPos = 0, i = 0; i < n * n; i++) {\n    if (v[i] >= 0.0) {\n      numPos++;\n    }\n  }\n  //    if ( numPos < ceil(double(n)/double(2.0)) )\n  if (numPos < ceil_half_n) {\n    for (i = 0; i < n; i++) {\n      v[i * n + j] *= -1.0;\n    }\n  }\n  return 1;\n}\nfunction matrix3x3ToQuaternion(mat_3x3, quat_4) {\n  const tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  // on-diagonal elements\n  tmp[0] = mat_3x3[0] + mat_3x3[4] + mat_3x3[8];\n  tmp[5] = mat_3x3[0] - mat_3x3[4] - mat_3x3[8];\n  tmp[10] = -mat_3x3[0] + mat_3x3[4] - mat_3x3[8];\n  tmp[15] = -mat_3x3[0] - mat_3x3[4] + mat_3x3[8];\n\n  // off-diagonal elements\n  tmp[1] = tmp[4] = mat_3x3[7] - mat_3x3[5];\n  tmp[2] = tmp[8] = mat_3x3[2] - mat_3x3[6];\n  tmp[3] = tmp[12] = mat_3x3[3] - mat_3x3[1];\n  tmp[6] = tmp[9] = mat_3x3[3] + mat_3x3[1];\n  tmp[7] = tmp[13] = mat_3x3[2] + mat_3x3[6];\n  tmp[11] = tmp[14] = mat_3x3[7] + mat_3x3[5];\n  const eigenvectors = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  const eigenvalues = [0, 0, 0, 0];\n\n  // convert into format that JacobiN can use,\n  // then use Jacobi to find eigenvalues and eigenvectors\n  // tmp is copied because jacobiN may modify it\n  const NTemp = [...tmp];\n  jacobiN(NTemp, 4, eigenvalues, eigenvectors);\n\n  // the first eigenvector is the one we want\n  quat_4[0] = eigenvectors[0];\n  quat_4[1] = eigenvectors[4];\n  quat_4[2] = eigenvectors[8];\n  quat_4[3] = eigenvectors[12];\n}\nfunction multiplyQuaternion(quat_1, quat_2, quat_out) {\n  const ww = quat_1[0] * quat_2[0];\n  const wx = quat_1[0] * quat_2[1];\n  const wy = quat_1[0] * quat_2[2];\n  const wz = quat_1[0] * quat_2[3];\n  const xw = quat_1[1] * quat_2[0];\n  const xx = quat_1[1] * quat_2[1];\n  const xy = quat_1[1] * quat_2[2];\n  const xz = quat_1[1] * quat_2[3];\n  const yw = quat_1[2] * quat_2[0];\n  const yx = quat_1[2] * quat_2[1];\n  const yy = quat_1[2] * quat_2[2];\n  const yz = quat_1[2] * quat_2[3];\n  const zw = quat_1[3] * quat_2[0];\n  const zx = quat_1[3] * quat_2[1];\n  const zy = quat_1[3] * quat_2[2];\n  const zz = quat_1[3] * quat_2[3];\n  quat_out[0] = ww - xx - yy - zz;\n  quat_out[1] = wx + xw + yz - zy;\n  quat_out[2] = wy - xz + yw + zx;\n  quat_out[3] = wz + xy - yx + zw;\n}\nfunction orthogonalize3x3(a_3x3, out_3x3) {\n  // copy the matrix\n  for (let i = 0; i < 9; i++) {\n    out_3x3[i] = a_3x3[i];\n  }\n\n  // Pivot the matrix to improve accuracy\n  const scale = createArray(3);\n  const index = createArray(3);\n  let largest;\n\n  // Loop over rows to get implicit scaling information\n  for (let i = 0; i < 3; i++) {\n    const x1 = Math.abs(out_3x3[i * 3]);\n    const x2 = Math.abs(out_3x3[i * 3 + 1]);\n    const x3 = Math.abs(out_3x3[i * 3 + 2]);\n    largest = x2 > x1 ? x2 : x1;\n    largest = x3 > largest ? x3 : largest;\n    scale[i] = 1;\n    if (largest !== 0) {\n      scale[i] /= largest;\n    }\n  }\n\n  // first column\n  const x1 = Math.abs(out_3x3[0]) * scale[0];\n  const x2 = Math.abs(out_3x3[3]) * scale[1];\n  const x3 = Math.abs(out_3x3[6]) * scale[2];\n  index[0] = 0;\n  largest = x1;\n  if (x2 >= largest) {\n    largest = x2;\n    index[0] = 1;\n  }\n  if (x3 >= largest) {\n    index[0] = 2;\n  }\n  if (index[0] !== 0) {\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n    scale[index[0]] = scale[0];\n  }\n\n  // second column\n  const y2 = Math.abs(out_3x3[4]) * scale[1];\n  const y3 = Math.abs(out_3x3[7]) * scale[2];\n  index[1] = 1;\n  largest = y2;\n  if (y3 >= largest) {\n    index[1] = 2;\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, 1, 2);\n  }\n\n  // third column\n  index[2] = 2;\n\n  // A quaternion can only describe a pure rotation, not\n  // a rotation with a flip, therefore the flip must be\n  // removed before the matrix is converted to a quaternion.\n  let flip = 0;\n  if (determinant3x3(out_3x3) < 0) {\n    flip = 1;\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  }\n\n  // Do orthogonalization using a quaternion intermediate\n  // (this, essentially, does the orthogonalization via\n  // diagonalization of an appropriately constructed symmetric\n  // 4x4 matrix rather than by doing SVD of the 3x3 matrix)\n  const quat = createArray(4);\n  matrix3x3ToQuaternion(out_3x3, quat);\n  quaternionToMatrix3x3(quat, out_3x3);\n\n  // Put the flip back into the orthogonalized matrix.\n  if (flip) {\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  }\n\n  // Undo the pivoting\n  if (index[1] !== 1) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[1], 1);\n  }\n  if (index[0] !== 0) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n  }\n}\nfunction diagonalize3x3(a_3x3, w_3, v_3x3) {\n  let i;\n  let j;\n  let k;\n  let maxI;\n  let tmp;\n  let maxVal;\n\n  // a is copied because jacobiN may modify it\n  const copyA = [...a_3x3];\n\n  // diagonalize using Jacobi\n  jacobiN(copyA, 3, w_3, v_3x3);\n\n  // if all the eigenvalues are the same, return identity matrix\n  if (w_3[0] === w_3[1] && w_3[0] === w_3[2]) {\n    identity3x3(v_3x3);\n    return;\n  }\n\n  // transpose temporarily, it makes it easier to sort the eigenvectors\n  transpose3x3(v_3x3, v_3x3);\n\n  // if two eigenvalues are the same, re-orthogonalize to optimally line\n  // up the eigenvectors with the x, y, and z axes\n  for (i = 0; i < 3; i++) {\n    // two eigenvalues are the same\n    if (w_3[(i + 1) % 3] === w_3[(i + 2) % 3]) {\n      // find maximum element of the independent eigenvector\n      maxVal = Math.abs(v_3x3[i * 3]);\n      maxI = 0;\n      for (j = 1; j < 3; j++) {\n        if (maxVal < (tmp = Math.abs(v_3x3[i * 3 + j]))) {\n          maxVal = tmp;\n          maxI = j;\n        }\n      }\n      // swap the eigenvector into its proper position\n      if (maxI !== i) {\n        tmp = w_3[maxI];\n        w_3[maxI] = w_3[i];\n        w_3[i] = tmp;\n        swapRowsMatrix_nxn(v_3x3, 3, i, maxI);\n      }\n      // maximum element of eigenvector should be positive\n      if (v_3x3[maxI * 3 + maxI] < 0) {\n        v_3x3[maxI * 3] = -v_3x3[maxI * 3];\n        v_3x3[maxI * 3 + 1] = -v_3x3[maxI * 3 + 1];\n        v_3x3[maxI * 3 + 2] = -v_3x3[maxI * 3 + 2];\n      }\n\n      // re-orthogonalize the other two eigenvectors\n      j = (maxI + 1) % 3;\n      k = (maxI + 2) % 3;\n      v_3x3[j * 3] = 0.0;\n      v_3x3[j * 3 + 1] = 0.0;\n      v_3x3[j * 3 + 2] = 0.0;\n      v_3x3[j * 3 + j] = 1.0;\n      const vectTmp1 = cross([v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], [v_3x3[j * 3], v_3x3[j * 3 + 1], v_3x3[j * 3 + 2]], []);\n      normalize(vectTmp1);\n      const vectTmp2 = cross(vectTmp1, [v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], []);\n      for (let t = 0; t < 3; t++) {\n        v_3x3[k * 3 + t] = vectTmp1[t];\n        v_3x3[j * 3 + t] = vectTmp2[t];\n      }\n\n      // transpose vectors back to columns\n      transpose3x3(v_3x3, v_3x3);\n      return;\n    }\n  }\n\n  // the three eigenvalues are different, just sort the eigenvectors\n  // to align them with the x, y, and z axes\n\n  // find the vector with the largest x element, make that vector\n  // the first vector\n  maxVal = Math.abs(v_3x3[0]);\n  maxI = 0;\n  for (i = 1; i < 3; i++) {\n    if (maxVal < (tmp = Math.abs(v_3x3[i * 3]))) {\n      maxVal = tmp;\n      maxI = i;\n    }\n  }\n  // swap eigenvalue and eigenvector\n  if (maxI !== 0) {\n    const eigenValTmp = w_3[maxI];\n    w_3[maxI] = w_3[0];\n    w_3[0] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, maxI, 0);\n  }\n  // do the same for the y element\n  if (Math.abs(v_3x3[4]) < Math.abs(v_3x3[7])) {\n    const eigenValTmp = w_3[2];\n    w_3[2] = w_3[1];\n    w_3[1] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, 1, 2);\n  }\n\n  // ensure that the sign of the eigenvectors is correct\n  for (i = 0; i < 2; i++) {\n    if (v_3x3[i * 3 + i] < 0) {\n      v_3x3[i * 3] = -v_3x3[i * 3];\n      v_3x3[i * 3 + 1] = -v_3x3[i * 3 + 1];\n      v_3x3[i * 3 + 2] = -v_3x3[i * 3 + 2];\n    }\n  }\n  // set sign of final eigenvector to ensure that determinant is positive\n  if (determinant3x3(v_3x3) < 0) {\n    v_3x3[6] = -v_3x3[6];\n    v_3x3[7] = -v_3x3[7];\n    v_3x3[8] = -v_3x3[8];\n  }\n\n  // transpose the eigenvectors back again\n  transpose3x3(v_3x3, v_3x3);\n}\nfunction singularValueDecomposition3x3(a_3x3, u_3x3, w_3, vT_3x3) {\n  let i;\n  // copy so that A can be used for U or VT without risk\n  const B = [...a_3x3];\n\n  // temporarily flip if determinant is negative\n  const d = determinant3x3(B);\n  if (d < 0) {\n    for (i = 0; i < 9; i++) {\n      B[i] = -B[i];\n    }\n  }\n\n  // orthogonalize, diagonalize, etc.\n  orthogonalize3x3(B, u_3x3);\n  transpose3x3(B, B);\n  multiply3x3_mat3(B, u_3x3, vT_3x3);\n  diagonalize3x3(vT_3x3, w_3, vT_3x3);\n  multiply3x3_mat3(u_3x3, vT_3x3, u_3x3);\n  transpose3x3(vT_3x3, vT_3x3);\n\n  // re-create the flip\n  if (d < 0) {\n    w_3[0] = -w_3[0];\n    w_3[1] = -w_3[1];\n    w_3[2] = -w_3[2];\n  }\n}\n\n/**\n * Factor linear equations Ax = b using LU decomposition A = LU. Output factorization LU is in matrix A.\n * @param {Matrix} A square matrix\n * @param {Number} index integer array of pivot indices index[0->n-1]\n * @param {Number} size matrix size\n */\nfunction luFactorLinearSystem(A, index, size) {\n  let i;\n  let j;\n  let k;\n  let largest;\n  let maxI = 0;\n  let sum;\n  let temp1;\n  let temp2;\n  const scale = createArray(size);\n\n  //\n  // Loop over rows to get implicit scaling information\n  //\n  for (i = 0; i < size; i++) {\n    for (largest = 0.0, j = 0; j < size; j++) {\n      if ((temp2 = Math.abs(A[i * size + j])) > largest) {\n        largest = temp2;\n      }\n    }\n    if (largest === 0.0) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n    scale[i] = 1.0 / largest;\n  }\n  //\n  // Loop over all columns using Crout's method\n  //\n  for (j = 0; j < size; j++) {\n    for (i = 0; i < j; i++) {\n      sum = A[i * size + j];\n      for (k = 0; k < i; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n      A[i * size + j] = sum;\n    }\n    //\n    // Begin search for largest pivot element\n    //\n    for (largest = 0.0, i = j; i < size; i++) {\n      sum = A[i * size + j];\n      for (k = 0; k < j; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n      A[i * size + j] = sum;\n      if ((temp1 = scale[i] * Math.abs(sum)) >= largest) {\n        largest = temp1;\n        maxI = i;\n      }\n    }\n    //\n    // Check for row interchange\n    //\n    if (j !== maxI) {\n      for (k = 0; k < size; k++) {\n        temp1 = A[maxI * size + k];\n        A[maxI * size + k] = A[j * size + k];\n        A[j * size + k] = temp1;\n      }\n      scale[maxI] = scale[j];\n    }\n    //\n    // Divide by pivot element and perform elimination\n    //\n    index[j] = maxI;\n    if (Math.abs(A[j * size + j]) <= VTK_SMALL_NUMBER) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n    if (j !== size - 1) {\n      temp1 = 1.0 / A[j * size + j];\n      for (i = j + 1; i < size; i++) {\n        A[i * size + j] *= temp1;\n      }\n    }\n  }\n  return 1;\n}\nfunction luSolveLinearSystem(A, index, x, size) {\n  let i;\n  let j;\n  let ii;\n  let idx;\n  let sum;\n  //\n  // Proceed with forward and backsubstitution for L and U\n  // matrices.  First, forward substitution.\n  //\n  for (ii = -1, i = 0; i < size; i++) {\n    idx = index[i];\n    sum = x[idx];\n    x[idx] = x[i];\n    if (ii >= 0) {\n      for (j = ii; j <= i - 1; j++) {\n        sum -= A[i * size + j] * x[j];\n      }\n    } else if (sum !== 0.0) {\n      ii = i;\n    }\n    x[i] = sum;\n  }\n  //\n  // Now, back substitution\n  //\n  for (i = size - 1; i >= 0; i--) {\n    sum = x[i];\n    for (j = i + 1; j < size; j++) {\n      sum -= A[i * size + j] * x[j];\n    }\n    x[i] = sum / A[i * size + i];\n  }\n}\nfunction solveLinearSystem(A, x, size) {\n  // if we solving something simple, just solve it\n  if (size === 2) {\n    const y = createArray(2);\n    const det = determinant2x2(A[0], A[1], A[2], A[3]);\n    if (det === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n    y[0] = (A[3] * x[0] - A[1] * x[1]) / det;\n    y[1] = (-(A[2] * x[0]) + A[0] * x[1]) / det;\n    x[0] = y[0];\n    x[1] = y[1];\n    return 1;\n  }\n  if (size === 1) {\n    if (A[0] === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n    x[0] /= A[0];\n    return 1;\n  }\n\n  //\n  // System of equations is not trivial, use Crout's method\n  //\n\n  // Check on allocation of working vectors\n  const index = createArray(size);\n\n  // Factor and solve matrix\n  if (luFactorLinearSystem(A, index, size) === 0) {\n    return 0;\n  }\n  luSolveLinearSystem(A, index, x, size);\n  return 1;\n}\n\n// Note that A is modified during the inversion !\nfunction invertMatrix(A, AI, size) {\n  let index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let column = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  const tmp1Size = index || createArray(size);\n  const tmp2Size = column || createArray(size);\n\n  // Factor matrix; then begin solving for inverse one column at a time.\n  // Note: tmp1Size returned value is used later, tmp2Size is just working\n  // memory whose values are not used in LUSolveLinearSystem\n  if (luFactorLinearSystem(A, tmp1Size, size) === 0) {\n    return null;\n  }\n  for (let j = 0; j < size; j++) {\n    for (let i = 0; i < size; i++) {\n      tmp2Size[i] = 0.0;\n    }\n    tmp2Size[j] = 1.0;\n    luSolveLinearSystem(A, tmp1Size, tmp2Size, size);\n    for (let i = 0; i < size; i++) {\n      AI[i * size + j] = tmp2Size[i];\n    }\n  }\n  return AI;\n}\nfunction estimateMatrixCondition(A, size) {\n  let minValue = +Number.MAX_VALUE;\n  let maxValue = -Number.MAX_VALUE;\n\n  // find the maximum value\n  for (let i = 0; i < size; i++) {\n    for (let j = i; j < size; j++) {\n      if (Math.abs(A[i * size + j]) > maxValue) {\n        maxValue = Math.abs(A[i * size + j]);\n      }\n    }\n  }\n\n  // find the minimum diagonal value\n  for (let i = 0; i < size; i++) {\n    if (Math.abs(A[i * size + i]) < minValue) {\n      minValue = Math.abs(A[i * size + i]);\n    }\n  }\n  if (minValue === 0.0) {\n    return Number.MAX_VALUE;\n  }\n  return maxValue / minValue;\n}\nfunction jacobi(a_3x3, w, v) {\n  return jacobiN(a_3x3, 3, w, v);\n}\nfunction solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt) {\n  // check dimensional consistency\n  if (numberOfSamples < xOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n  let i;\n  let j;\n  let k;\n\n  // set up intermediate variables\n  // Allocate matrix to hold X times transpose of X\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  // Allocate the array of eigenvalues and eigenvectors\n  const eigenvals = createArray(xOrder);\n  const eigenvecs = createArray(xOrder * xOrder);\n\n  // Calculate XXt upper half only, due to symmetry\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n    }\n  }\n\n  // now fill in the lower half of the XXt matrix\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n\n  // Compute the eigenvectors and eigenvalues\n  jacobiN(XXt, xOrder, eigenvals, eigenvecs);\n\n  // Smallest eigenval is at the end of the list (xOrder-1), and solution is\n  // corresponding eigenvec.\n  for (i = 0; i < xOrder; i++) {\n    mt[i] = eigenvecs[i * xOrder + xOrder - 1];\n  }\n  return 1;\n}\nfunction solveLeastSquares(numberOfSamples, xt, xOrder, yt, yOrder, mt) {\n  let checkHomogeneous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  // check dimensional consistency\n  if (numberOfSamples < xOrder || numberOfSamples < yOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n  const homogenFlags = createArray(yOrder);\n  let allHomogeneous = 1;\n  let hmt;\n  let homogRC = 0;\n  let i;\n  let j;\n  let k;\n  let someHomogeneous = 0;\n\n  // Ok, first init some flags check and see if all the systems are homogeneous\n  if (checkHomogeneous) {\n    // If Y' is zero, it's a homogeneous system and can't be solved via\n    // the pseudoinverse method. Detect this case, warn the user, and\n    // invoke SolveHomogeneousLeastSquares instead. Note that it doesn't\n    // really make much sense for yOrder to be greater than one in this case,\n    // since that's just yOrder occurrences of a 0 vector on the RHS, but\n    // we allow it anyway. N\n\n    // Initialize homogeneous flags on a per-right-hand-side basis\n    for (j = 0; j < yOrder; j++) {\n      homogenFlags[j] = 1;\n    }\n    for (i = 0; i < numberOfSamples; i++) {\n      for (j = 0; j < yOrder; j++) {\n        if (Math.abs(yt[i * yOrder + j]) > VTK_SMALL_NUMBER) {\n          allHomogeneous = 0;\n          homogenFlags[j] = 0;\n        }\n      }\n    }\n\n    // If we've got one system, and it's homogeneous, do it and bail out quickly.\n    if (allHomogeneous && yOrder === 1) {\n      vtkWarningMacro('Detected homogeneous system (Y=0), calling SolveHomogeneousLeastSquares()');\n      return solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt);\n    }\n\n    // Ok, we've got more than one system of equations.\n    // Figure out if we need to calculate the homogeneous equation solution for\n    // any of them.\n    if (allHomogeneous) {\n      someHomogeneous = 1;\n    } else {\n      for (j = 0; j < yOrder; j++) {\n        if (homogenFlags[j]) {\n          someHomogeneous = 1;\n        }\n      }\n    }\n  }\n\n  // If necessary, solve the homogeneous problem\n  if (someHomogeneous) {\n    // hmt is the homogeneous equation version of mt, the general solution.\n    // hmt should be xOrder x yOrder, but since we are solving only the homogeneous part, here it is xOrder x 1\n    hmt = createArray(xOrder);\n\n    // Ok, solve the homogeneous problem\n    homogRC = solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, hmt);\n  }\n\n  // set up intermediate variables\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  const XXtI = createArray(xOrder * xOrder); // size x by x\n  const XYt = createArray(xOrder * yOrder); // size x by y\n\n  // first find the pseudoinverse matrix\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      // first calculate the XXt matrix, only do the upper half (symmetrical)\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n\n      // now calculate the XYt matrix\n      for (j = 0; j < yOrder; j++) {\n        XYt[i * yOrder + j] += xt[k * xOrder + i] * yt[k * yOrder + j];\n      }\n    }\n  }\n\n  // now fill in the lower half of the XXt matrix\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n  const successFlag = invertMatrix(XXt, XXtI, xOrder);\n\n  // next get the inverse of XXt\n  if (successFlag) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = 0; j < yOrder; j++) {\n        mt[i * yOrder + j] = 0.0;\n        for (k = 0; k < xOrder; k++) {\n          mt[i * yOrder + j] += XXtI[i * xOrder + k] * XYt[k * yOrder + j];\n        }\n      }\n    }\n  }\n\n  // Fix up any of the solutions that correspond to the homogeneous equation\n  // problem.\n  if (someHomogeneous) {\n    for (j = 0; j < yOrder; j++) {\n      if (homogenFlags[j]) {\n        // Fix this one\n        for (i = 0; i < xOrder; i++) {\n          mt[i * yOrder + j] = hmt[i * yOrder];\n        }\n      }\n    }\n  }\n  if (someHomogeneous) {\n    return homogRC && successFlag;\n  }\n  return successFlag;\n}\nfunction hex2float(hexStr) {\n  let outFloatArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0.5, 1];\n  switch (hexStr.length) {\n    case 3:\n      // abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[0], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[2], 16) * 17 / 255;\n      return outFloatArray;\n    case 4:\n      // #abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[2], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[3], 16) * 17 / 255;\n      return outFloatArray;\n    case 6:\n      // ab01df => #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(0, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(2, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(4, 2), 16) / 255;\n      return outFloatArray;\n    case 7:\n      // #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      return outFloatArray;\n    case 9:\n      // #ab01df00\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      outFloatArray[3] = parseInt(hexStr.substr(7, 2), 16) / 255;\n      return outFloatArray;\n    default:\n      return outFloatArray;\n  }\n}\nfunction rgb2hsv(rgb, hsv) {\n  let h;\n  let s;\n  const [r, g, b] = rgb;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  let cmax = r;\n  let cmin = r;\n  if (g > cmax) {\n    cmax = g;\n  } else if (g < cmin) {\n    cmin = g;\n  }\n  if (b > cmax) {\n    cmax = b;\n  } else if (b < cmin) {\n    cmin = b;\n  }\n  const v = cmax;\n  if (v > 0.0) {\n    s = (cmax - cmin) / cmax;\n  } else {\n    s = 0.0;\n  }\n  if (s > 0) {\n    if (r === cmax) {\n      h = onesixth * (g - b) / (cmax - cmin);\n    } else if (g === cmax) {\n      h = onethird + onesixth * (b - r) / (cmax - cmin);\n    } else {\n      h = twothird + onesixth * (r - g) / (cmax - cmin);\n    }\n    if (h < 0.0) {\n      h += 1.0;\n    }\n  } else {\n    h = 0.0;\n  }\n\n  // Set the values back to the array\n  hsv[0] = h;\n  hsv[1] = s;\n  hsv[2] = v;\n}\nfunction hsv2rgb(hsv, rgb) {\n  const [h, s, v] = hsv;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  const fivesixth = 5.0 / 6.0;\n  let r;\n  let g;\n  let b;\n\n  // compute RGB from HSV\n  if (h > onesixth && h <= onethird) {\n    // green/red\n    g = 1.0;\n    r = (onethird - h) / onesixth;\n    b = 0.0;\n  } else if (h > onethird && h <= 0.5) {\n    // green/blue\n    g = 1.0;\n    b = (h - onethird) / onesixth;\n    r = 0.0;\n  } else if (h > 0.5 && h <= twothird) {\n    // blue/green\n    b = 1.0;\n    g = (twothird - h) / onesixth;\n    r = 0.0;\n  } else if (h > twothird && h <= fivesixth) {\n    // blue/red\n    b = 1.0;\n    r = (h - twothird) / onesixth;\n    g = 0.0;\n  } else if (h > fivesixth && h <= 1.0) {\n    // red/blue\n    r = 1.0;\n    b = (1.0 - h) / onesixth;\n    g = 0.0;\n  } else {\n    // red/green\n    r = 1.0;\n    g = h / onesixth;\n    b = 0.0;\n  }\n\n  // add Saturation to the equation.\n  r = s * r + (1.0 - s);\n  g = s * g + (1.0 - s);\n  b = s * b + (1.0 - s);\n  r *= v;\n  g *= v;\n  b *= v;\n\n  // Assign back to the array\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nfunction lab2xyz(lab, xyz) {\n  // LAB to XYZ\n  const [L, a, b] = lab;\n  let var_Y = (L + 16) / 116;\n  let var_X = a / 500 + var_Y;\n  let var_Z = var_Y - b / 200;\n  if (var_Y ** 3 > 0.008856) {\n    var_Y **= 3;\n  } else {\n    var_Y = (var_Y - 16.0 / 116.0) / 7.787;\n  }\n  if (var_X ** 3 > 0.008856) {\n    var_X **= 3;\n  } else {\n    var_X = (var_X - 16.0 / 116.0) / 7.787;\n  }\n  if (var_Z ** 3 > 0.008856) {\n    var_Z **= 3;\n  } else {\n    var_Z = (var_Z - 16.0 / 116.0) / 7.787;\n  }\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  xyz[0] = ref_X * var_X; // ref_X = 0.9505  Observer= 2 deg Illuminant= D65\n  xyz[1] = ref_Y * var_Y; // ref_Y = 1.000\n  xyz[2] = ref_Z * var_Z; // ref_Z = 1.089\n}\n\nfunction xyz2lab(xyz, lab) {\n  const [x, y, z] = xyz;\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  let var_X = x / ref_X; // ref_X = 0.9505  Observer= 2 deg, Illuminant= D65\n  let var_Y = y / ref_Y; // ref_Y = 1.000\n  let var_Z = z / ref_Z; // ref_Z = 1.089\n\n  if (var_X > 0.008856) var_X **= 1.0 / 3.0;else var_X = 7.787 * var_X + 16.0 / 116.0;\n  if (var_Y > 0.008856) var_Y **= 1.0 / 3.0;else var_Y = 7.787 * var_Y + 16.0 / 116.0;\n  if (var_Z > 0.008856) var_Z **= 1.0 / 3.0;else var_Z = 7.787 * var_Z + 16.0 / 116.0;\n  lab[0] = 116 * var_Y - 16;\n  lab[1] = 500 * (var_X - var_Y);\n  lab[2] = 200 * (var_Y - var_Z);\n}\nfunction xyz2rgb(xyz, rgb) {\n  const [x, y, z] = xyz;\n  let r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  let g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  let b = x * 0.0557 + y * -0.204 + z * 1.057;\n\n  // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n  if (r > 0.0031308) r = 1.055 * r ** (1 / 2.4) - 0.055;else r *= 12.92;\n  if (g > 0.0031308) g = 1.055 * g ** (1 / 2.4) - 0.055;else g *= 12.92;\n  if (b > 0.0031308) b = 1.055 * b ** (1 / 2.4) - 0.055;else b *= 12.92;\n\n  // Clip colors. ideally we would do something that is perceptually closest\n  // (since we can see colors outside of the display gamut), but this seems to\n  // work well enough.\n  let maxVal = r;\n  if (maxVal < g) maxVal = g;\n  if (maxVal < b) maxVal = b;\n  if (maxVal > 1.0) {\n    r /= maxVal;\n    g /= maxVal;\n    b /= maxVal;\n  }\n  if (r < 0) r = 0;\n  if (g < 0) g = 0;\n  if (b < 0) b = 0;\n\n  // Push values back to array\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nfunction rgb2xyz(rgb, xyz) {\n  let [r, g, b] = rgb;\n  // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n  if (r > 0.04045) r = ((r + 0.055) / 1.055) ** 2.4;else r /= 12.92;\n  if (g > 0.04045) g = ((g + 0.055) / 1.055) ** 2.4;else g /= 12.92;\n  if (b > 0.04045) b = ((b + 0.055) / 1.055) ** 2.4;else b /= 12.92;\n\n  // Observer. = 2 deg, Illuminant = D65\n  xyz[0] = r * 0.4124 + g * 0.3576 + b * 0.1805;\n  xyz[1] = r * 0.2126 + g * 0.7152 + b * 0.0722;\n  xyz[2] = r * 0.0193 + g * 0.1192 + b * 0.9505;\n}\nfunction rgb2lab(rgb, lab) {\n  const xyz = [0, 0, 0];\n  rgb2xyz(rgb, xyz);\n  xyz2lab(xyz, lab);\n}\nfunction lab2rgb(lab, rgb) {\n  const xyz = [0, 0, 0];\n  lab2xyz(lab, xyz);\n  xyz2rgb(xyz, rgb);\n}\nfunction uninitializeBounds(bounds) {\n  bounds[0] = 1.0;\n  bounds[1] = -1.0;\n  bounds[2] = 1.0;\n  bounds[3] = -1.0;\n  bounds[4] = 1.0;\n  bounds[5] = -1.0;\n  return bounds;\n}\nfunction areBoundsInitialized(bounds) {\n  return !(bounds[1] - bounds[0] < 0.0);\n}\n\n/**\n * @deprecated please use vtkBoundingBox.addPoints(vtkBoundingBox.reset([]), points)\n */\nfunction computeBoundsFromPoints(point1, point2, bounds) {\n  bounds[0] = Math.min(point1[0], point2[0]);\n  bounds[1] = Math.max(point1[0], point2[0]);\n  bounds[2] = Math.min(point1[1], point2[1]);\n  bounds[3] = Math.max(point1[1], point2[1]);\n  bounds[4] = Math.min(point1[2], point2[2]);\n  bounds[5] = Math.max(point1[2], point2[2]);\n  return bounds;\n}\nfunction clampValue(value, minValue, maxValue) {\n  if (value < minValue) {\n    return minValue;\n  }\n  if (value > maxValue) {\n    return maxValue;\n  }\n  return value;\n}\nfunction clampVector(vector, minVector, maxVector) {\n  let out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 0, 0];\n  out[0] = clampValue(vector[0], minVector[0], maxVector[0]);\n  out[1] = clampValue(vector[1], minVector[1], maxVector[1]);\n  out[2] = clampValue(vector[2], minVector[2], maxVector[2]);\n  return out;\n}\nfunction clampAndNormalizeValue(value, range) {\n  let result = 0;\n  if (range[0] !== range[1]) {\n    // clamp\n    if (value < range[0]) {\n      result = range[0];\n    } else if (value > range[1]) {\n      result = range[1];\n    } else {\n      result = value;\n    }\n    // normalize\n    result = (result - range[0]) / (range[1] - range[0]);\n  }\n  return result;\n}\nconst getScalarTypeFittingRange = notImplemented('GetScalarTypeFittingRange');\nconst getAdjustedScalarRange = notImplemented('GetAdjustedScalarRange');\nfunction extentIsWithinOtherExtent(extent1, extent2) {\n  if (!extent1 || !extent2) {\n    return 0;\n  }\n  for (let i = 0; i < 6; i += 2) {\n    if (extent1[i] < extent2[i] || extent1[i] > extent2[i + 1] || extent1[i + 1] < extent2[i] || extent1[i + 1] > extent2[i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction boundsIsWithinOtherBounds(bounds1_6, bounds2_6, delta_3) {\n  if (!bounds1_6 || !bounds2_6) {\n    return 0;\n  }\n  for (let i = 0; i < 6; i += 2) {\n    if (bounds1_6[i] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i] - delta_3[i / 2] > bounds2_6[i + 1] || bounds1_6[i + 1] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i + 1] - delta_3[i / 2] > bounds2_6[i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction pointIsWithinBounds(point_3, bounds_6, delta_3) {\n  if (!point_3 || !bounds_6 || !delta_3) {\n    return 0;\n  }\n  for (let i = 0; i < 3; i++) {\n    if (point_3[i] + delta_3[i] < bounds_6[2 * i] || point_3[i] - delta_3[i] > bounds_6[2 * i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction solve3PointCircle(p1, p2, p3, center) {\n  const v21 = createArray(3);\n  const v32 = createArray(3);\n  const v13 = createArray(3);\n  const v12 = createArray(3);\n  const v23 = createArray(3);\n  const v31 = createArray(3);\n  for (let i = 0; i < 3; ++i) {\n    v21[i] = p1[i] - p2[i];\n    v32[i] = p2[i] - p3[i];\n    v13[i] = p3[i] - p1[i];\n    v12[i] = -v21[i];\n    v23[i] = -v32[i];\n    v31[i] = -v13[i];\n  }\n  const norm12 = norm(v12);\n  const norm23 = norm(v23);\n  const norm13 = norm(v13);\n  const crossv21v32 = createArray(3);\n  cross(v21, v32, crossv21v32);\n  const normCross = norm(crossv21v32);\n  const radius = norm12 * norm23 * norm13 / (2 * normCross);\n  const normCross22 = 2 * normCross * normCross;\n  const alpha = norm23 * norm23 * dot(v21, v31) / normCross22;\n  const beta = norm13 * norm13 * dot(v12, v32) / normCross22;\n  const gamma = norm12 * norm12 * dot(v13, v23) / normCross22;\n  for (let i = 0; i < 3; ++i) {\n    center[i] = alpha * p1[i] + beta * p2[i] + gamma * p3[i];\n  }\n  return radius;\n}\nconst inf = Infinity;\nconst negInf = -Infinity;\nconst isInf = value => !Number.isFinite(value);\nconst {\n  isFinite,\n  isNaN\n} = Number;\nconst isNan = isNaN;\n\n// JavaScript - add-on ----------------------\n\nfunction createUninitializedBounds() {\n  return [].concat([Number.MAX_VALUE, -Number.MAX_VALUE,\n  // X\n  Number.MAX_VALUE, -Number.MAX_VALUE,\n  // Y\n  Number.MAX_VALUE, -Number.MAX_VALUE // Z\n  ]);\n}\n\nfunction getMajorAxisIndex(vector) {\n  let maxValue = -1;\n  let axisIndex = -1;\n  for (let i = 0; i < vector.length; i++) {\n    const value = Math.abs(vector[i]);\n    if (value > maxValue) {\n      axisIndex = i;\n      maxValue = value;\n    }\n  }\n  return axisIndex;\n}\n\n// Return the closest orthogonal matrix of 1, -1 and 0\n// It works for both column major and row major matrices\n// This function iteratively associate a column with a row by choosing\n// the greatest absolute value from the remaining row and columns\n// For each association, a -1 or a 1 is set in the output, depending on\n// the sign of the value in the original matrix\nfunction getSparseOrthogonalMatrix(matrix) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  // Initialize rows and columns to available indices\n  const rows = new Array(n);\n  const cols = new Array(n);\n  for (let i = 0; i < n; ++i) {\n    rows[i] = i;\n    cols[i] = i;\n  }\n  // No need for the last iteration: i = 0\n  for (let i = n - 1; i > 0; i--) {\n    // Loop invariant:\n    // rows[0:i] and cols[0:i] contain the remaining rows and columns\n    // rows]i:n[ and cols]i:n[ contain the associations found (rows[k] is associated with cols[k])\n    let bestValue = -Infinity;\n    let bestRowI = 0;\n    let bestColI = 0;\n    for (let rowI = 0; rowI <= i; ++rowI) {\n      const row = rows[rowI];\n      for (let colI = 0; colI <= i; ++colI) {\n        const col = cols[colI];\n        const absVal = Math.abs(matrix[row + n * col]);\n        if (absVal > bestValue) {\n          bestValue = absVal;\n          bestRowI = rowI;\n          bestColI = colI;\n        }\n      }\n    }\n    // Found an association between rows[bestRowI] and cols[bestColI]\n    // Put both at the end of their array by swapping with i\n    [rows[i], rows[bestRowI]] = [rows[bestRowI], rows[i]];\n    [cols[i], cols[bestColI]] = [cols[bestColI], cols[i]];\n  }\n\n  // Convert row/column association to a matrix\n  const output = new Array(n * n).fill(0);\n  for (let i = 0; i < n; ++i) {\n    const matIdx = rows[i] + n * cols[i];\n    output[matIdx] = matrix[matIdx] < 0 ? -1 : 1;\n  }\n  return output;\n}\nfunction floatToHex2(value) {\n  const integer = Math.floor(value * 255);\n  if (integer > 15) {\n    return integer.toString(16);\n  }\n  return `0${integer.toString(16)}`;\n}\nfunction floatRGB2HexCode(rgbArray) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#';\n  return `${prefix}${rgbArray.map(floatToHex2).join('')}`;\n}\nfunction floatToChar(f) {\n  return Math.round(f * 255);\n}\nfunction float2CssRGBA(rgbArray) {\n  if (rgbArray.length === 3) {\n    return `rgb(${rgbArray.map(floatToChar).join(', ')})`;\n  }\n  return `rgba(${floatToChar(rgbArray[0] || 0)}, ${floatToChar(rgbArray[1] || 0)}, ${floatToChar(rgbArray[2] || 0)}, ${rgbArray[3] || 0})`;\n}\n\n// ----------------------------------------------------------------------------\n// Only Static API\n// ----------------------------------------------------------------------------\n\nvar vtkMath = {\n  Pi,\n  radiansFromDegrees,\n  degreesFromRadians,\n  round,\n  floor,\n  ceil,\n  ceilLog2,\n  min,\n  max,\n  arrayMin,\n  arrayMax,\n  arrayRange,\n  isPowerOfTwo,\n  nearestPowerOfTwo,\n  factorial,\n  binomial,\n  beginCombination,\n  nextCombination,\n  randomSeed,\n  getSeed,\n  random,\n  gaussian,\n  add,\n  subtract,\n  multiplyScalar,\n  multiplyScalar2D,\n  multiplyAccumulate,\n  multiplyAccumulate2D,\n  dot,\n  outer,\n  cross,\n  norm,\n  normalize,\n  perpendiculars,\n  projectVector,\n  projectVector2D,\n  distance2BetweenPoints,\n  angleBetweenVectors,\n  gaussianAmplitude,\n  gaussianWeight,\n  dot2D,\n  outer2D,\n  norm2D,\n  normalize2D,\n  determinant2x2,\n  LUFactor3x3,\n  LUSolve3x3,\n  linearSolve3x3,\n  multiply3x3_vect3,\n  multiply3x3_mat3,\n  multiplyMatrix,\n  transpose3x3,\n  invert3x3,\n  identity3x3,\n  identity,\n  isIdentity,\n  isIdentity3x3,\n  determinant3x3,\n  quaternionToMatrix3x3,\n  areEquals,\n  areMatricesEqual,\n  roundNumber,\n  roundVector,\n  matrix3x3ToQuaternion,\n  multiplyQuaternion,\n  orthogonalize3x3,\n  diagonalize3x3,\n  singularValueDecomposition3x3,\n  solveLinearSystem,\n  invertMatrix,\n  luFactorLinearSystem,\n  luSolveLinearSystem,\n  estimateMatrixCondition,\n  jacobi,\n  jacobiN,\n  solveHomogeneousLeastSquares,\n  solveLeastSquares,\n  hex2float,\n  rgb2hsv,\n  hsv2rgb,\n  lab2xyz,\n  xyz2lab,\n  xyz2rgb,\n  rgb2xyz,\n  rgb2lab,\n  lab2rgb,\n  uninitializeBounds,\n  areBoundsInitialized,\n  computeBoundsFromPoints,\n  clampValue,\n  clampVector,\n  clampAndNormalizeValue,\n  getScalarTypeFittingRange,\n  getAdjustedScalarRange,\n  extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds,\n  pointIsWithinBounds,\n  solve3PointCircle,\n  inf,\n  negInf,\n  isInf,\n  isNan: isNaN,\n  isNaN,\n  isFinite,\n  // JS add-on\n  createUninitializedBounds,\n  getMajorAxisIndex,\n  getSparseOrthogonalMatrix,\n  floatToHex2,\n  floatRGB2HexCode,\n  float2CssRGBA\n};\n\nvar vtkMath$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createArray: createArray,\n  Pi: Pi,\n  radiansFromDegrees: radiansFromDegrees,\n  degreesFromRadians: degreesFromRadians,\n  round: round,\n  floor: floor,\n  ceil: ceil,\n  min: min,\n  max: max,\n  arrayMin: arrayMin,\n  arrayMax: arrayMax,\n  arrayRange: arrayRange,\n  ceilLog2: ceilLog2,\n  factorial: factorial,\n  nearestPowerOfTwo: nearestPowerOfTwo,\n  isPowerOfTwo: isPowerOfTwo,\n  binomial: binomial,\n  beginCombination: beginCombination,\n  nextCombination: nextCombination,\n  randomSeed: randomSeed,\n  getSeed: getSeed,\n  random: random,\n  gaussian: gaussian,\n  add: add,\n  subtract: subtract,\n  multiplyScalar: multiplyScalar,\n  multiplyScalar2D: multiplyScalar2D,\n  multiplyAccumulate: multiplyAccumulate,\n  multiplyAccumulate2D: multiplyAccumulate2D,\n  dot: dot,\n  outer: outer,\n  cross: cross,\n  norm: norm,\n  normalize: normalize,\n  perpendiculars: perpendiculars,\n  projectVector: projectVector,\n  dot2D: dot2D,\n  projectVector2D: projectVector2D,\n  distance2BetweenPoints: distance2BetweenPoints,\n  angleBetweenVectors: angleBetweenVectors,\n  signedAngleBetweenVectors: signedAngleBetweenVectors,\n  gaussianAmplitude: gaussianAmplitude,\n  gaussianWeight: gaussianWeight,\n  outer2D: outer2D,\n  norm2D: norm2D,\n  normalize2D: normalize2D,\n  rowsToMat4: rowsToMat4,\n  columnsToMat4: columnsToMat4,\n  rowsToMat3: rowsToMat3,\n  columnsToMat3: columnsToMat3,\n  determinant2x2: determinant2x2,\n  LUFactor3x3: LUFactor3x3,\n  LUSolve3x3: LUSolve3x3,\n  linearSolve3x3: linearSolve3x3,\n  multiply3x3_vect3: multiply3x3_vect3,\n  multiply3x3_mat3: multiply3x3_mat3,\n  multiplyMatrix: multiplyMatrix,\n  transpose3x3: transpose3x3,\n  invert3x3: invert3x3,\n  determinant3x3: determinant3x3,\n  areEquals: areEquals,\n  areMatricesEqual: areMatricesEqual,\n  identity3x3: identity3x3,\n  identity: identity,\n  isIdentity: isIdentity,\n  isIdentity3x3: isIdentity3x3,\n  quaternionToMatrix3x3: quaternionToMatrix3x3,\n  roundNumber: roundNumber,\n  roundVector: roundVector,\n  jacobiN: jacobiN,\n  matrix3x3ToQuaternion: matrix3x3ToQuaternion,\n  multiplyQuaternion: multiplyQuaternion,\n  orthogonalize3x3: orthogonalize3x3,\n  diagonalize3x3: diagonalize3x3,\n  singularValueDecomposition3x3: singularValueDecomposition3x3,\n  luFactorLinearSystem: luFactorLinearSystem,\n  luSolveLinearSystem: luSolveLinearSystem,\n  solveLinearSystem: solveLinearSystem,\n  invertMatrix: invertMatrix,\n  estimateMatrixCondition: estimateMatrixCondition,\n  jacobi: jacobi,\n  solveHomogeneousLeastSquares: solveHomogeneousLeastSquares,\n  solveLeastSquares: solveLeastSquares,\n  hex2float: hex2float,\n  rgb2hsv: rgb2hsv,\n  hsv2rgb: hsv2rgb,\n  lab2xyz: lab2xyz,\n  xyz2lab: xyz2lab,\n  xyz2rgb: xyz2rgb,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n  lab2rgb: lab2rgb,\n  uninitializeBounds: uninitializeBounds,\n  areBoundsInitialized: areBoundsInitialized,\n  computeBoundsFromPoints: computeBoundsFromPoints,\n  clampValue: clampValue,\n  clampVector: clampVector,\n  clampAndNormalizeValue: clampAndNormalizeValue,\n  getScalarTypeFittingRange: getScalarTypeFittingRange,\n  getAdjustedScalarRange: getAdjustedScalarRange,\n  extentIsWithinOtherExtent: extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds: boundsIsWithinOtherBounds,\n  pointIsWithinBounds: pointIsWithinBounds,\n  solve3PointCircle: solve3PointCircle,\n  inf: inf,\n  negInf: negInf,\n  isInf: isInf,\n  isFinite: isFinite,\n  isNaN: isNaN,\n  isNan: isNan,\n  createUninitializedBounds: createUninitializedBounds,\n  getMajorAxisIndex: getMajorAxisIndex,\n  getSparseOrthogonalMatrix: getSparseOrthogonalMatrix,\n  floatToHex2: floatToHex2,\n  floatRGB2HexCode: floatRGB2HexCode,\n  float2CssRGBA: float2CssRGBA,\n  'default': vtkMath\n});\n\nexport { arrayMax as $, degreesFromRadians as A, areEquals as B, clampValue as C, arrayRange as D, getMajorAxisIndex as E, createUninitializedBounds as F, isIdentity3x3 as G, floor as H, isInf as I, rgb2hsv as J, rgb2lab as K, lab2rgb as L, round as M, normalize2D as N, nearestPowerOfTwo as O, multiply3x3_vect3 as P, getSparseOrthogonalMatrix as Q, areBoundsInitialized as R, isPowerOfTwo as S, angleBetweenVectors as T, signedAngleBetweenVectors as U, createArray as V, Pi as W, ceil as X, min as Y, max as Z, arrayMin as _, areMatricesEqual as a, float2CssRGBA as a$, ceilLog2 as a0, factorial as a1, binomial as a2, beginCombination as a3, nextCombination as a4, randomSeed as a5, getSeed as a6, gaussian as a7, multiplyScalar2D as a8, multiplyAccumulate2D as a9, diagonalize3x3 as aA, singularValueDecomposition3x3 as aB, luFactorLinearSystem as aC, luSolveLinearSystem as aD, invertMatrix as aE, estimateMatrixCondition as aF, solveHomogeneousLeastSquares as aG, solveLeastSquares as aH, hex2float as aI, lab2xyz as aJ, xyz2lab as aK, xyz2rgb as aL, rgb2xyz as aM, computeBoundsFromPoints as aN, clampAndNormalizeValue as aO, getScalarTypeFittingRange as aP, getAdjustedScalarRange as aQ, extentIsWithinOtherExtent as aR, boundsIsWithinOtherBounds as aS, pointIsWithinBounds as aT, solve3PointCircle as aU, inf as aV, negInf as aW, isFinite as aX, isNaN as aY, floatToHex2 as aZ, floatRGB2HexCode as a_, outer as aa, projectVector as ab, dot2D as ac, projectVector2D as ad, gaussianAmplitude as ae, gaussianWeight as af, outer2D as ag, norm2D as ah, rowsToMat4 as ai, columnsToMat4 as aj, columnsToMat3 as ak, LUFactor3x3 as al, LUSolve3x3 as am, linearSolve3x3 as an, multiply3x3_mat3 as ao, multiplyMatrix as ap, transpose3x3 as aq, invert3x3 as ar, identity3x3 as as, identity as at, isIdentity as au, quaternionToMatrix3x3 as av, roundNumber as aw, matrix3x3ToQuaternion as ax, multiplyQuaternion as ay, orthogonalize3x3 as az, roundVector as b, clampVector as c, dot as d, distance2BetweenPoints as e, vtkMath as f, solveLinearSystem as g, hsv2rgb as h, isNan as i, cross as j, add as k, normalize as l, multiplyAccumulate as m, norm as n, determinant2x2 as o, jacobiN as p, perpendiculars as q, radiansFromDegrees as r, subtract as s, jacobi as t, uninitializeBounds as u, vtkMath$1 as v, multiplyScalar as w, random as x, determinant3x3 as y, rowsToMat3 as z };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}