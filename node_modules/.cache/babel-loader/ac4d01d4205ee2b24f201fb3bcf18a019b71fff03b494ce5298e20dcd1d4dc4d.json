{"ast":null,"code":"import * as colors from '../colors/index';\nimport now from './now';\nfunction storedPixelDataToCanvasImageDataPseudocolorLUT(image, grayscaleLut, colorLUT, canvasImageDataData) {\n  let start = now();\n  const pixelData = image.getPixelData();\n  image.stats.lastGetPixelDataTime = now() - start;\n  const numPixels = pixelData.length;\n  const minPixelValue = image.minPixelValue;\n  let canvasImageDataIndex = 0;\n  let storedPixelDataIndex = 0;\n  let grayscale;\n  let rgba;\n  let clut;\n  start = now();\n  if (colorLUT instanceof colors.LookupTable) {\n    clut = colorLUT.Table;\n  } else {\n    clut = colorLUT;\n  }\n  if (minPixelValue < 0) {\n    while (storedPixelDataIndex < numPixels) {\n      grayscale = grayscaleLut[pixelData[storedPixelDataIndex++] + -minPixelValue];\n      rgba = clut[grayscale];\n      canvasImageDataData[canvasImageDataIndex++] = rgba[0];\n      canvasImageDataData[canvasImageDataIndex++] = rgba[1];\n      canvasImageDataData[canvasImageDataIndex++] = rgba[2];\n      canvasImageDataData[canvasImageDataIndex++] = rgba[3];\n    }\n  } else {\n    while (storedPixelDataIndex < numPixels) {\n      grayscale = grayscaleLut[pixelData[storedPixelDataIndex++]];\n      rgba = clut[grayscale];\n      canvasImageDataData[canvasImageDataIndex++] = rgba[0];\n      canvasImageDataData[canvasImageDataIndex++] = rgba[1];\n      canvasImageDataData[canvasImageDataIndex++] = rgba[2];\n      canvasImageDataData[canvasImageDataIndex++] = rgba[3];\n    }\n  }\n  image.stats.lastStoredPixelDataToCanvasImageDataTime = now() - start;\n}\nexport default storedPixelDataToCanvasImageDataPseudocolorLUT;","map":{"version":3,"names":["colors","now","storedPixelDataToCanvasImageDataPseudocolorLUT","image","grayscaleLut","colorLUT","canvasImageDataData","start","pixelData","getPixelData","stats","lastGetPixelDataTime","numPixels","length","minPixelValue","canvasImageDataIndex","storedPixelDataIndex","grayscale","rgba","clut","LookupTable","Table","lastStoredPixelDataToCanvasImageDataTime"],"sources":["../../../../../../src/RenderingEngine/helpers/cpuFallback/rendering/storedPixelDataToCanvasImageDataPseudocolorLUT.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,iBAAiB;AACzC,OAAOC,GAAG,MAAM,OAAO;AAavB,SAASC,8CAA8CA,CACrDC,KAAa,EACbC,YAA+B,EAC/BC,QAAgC,EAChCC,mBAAsC;EAEtC,IAAIC,KAAK,GAAGN,GAAG,EAAE;EACjB,MAAMO,SAAS,GAAGL,KAAK,CAACM,YAAY,EAAE;EAEtCN,KAAK,CAACO,KAAK,CAACC,oBAAoB,GAAGV,GAAG,EAAE,GAAGM,KAAK;EAEhD,MAAMK,SAAS,GAAGJ,SAAS,CAACK,MAAM;EAClC,MAAMC,aAAa,GAAGX,KAAK,CAACW,aAAa;EACzC,IAAIC,oBAAoB,GAAG,CAAC;EAC5B,IAAIC,oBAAoB,GAAG,CAAC;EAC5B,IAAIC,SAAS;EACb,IAAIC,IAAI;EACR,IAAIC,IAAI;EAERZ,KAAK,GAAGN,GAAG,EAAE;EAEb,IAAII,QAAQ,YAAYL,MAAM,CAACoB,WAAW,EAAE;IAC1CD,IAAI,GAAGd,QAAQ,CAACgB,KAAK;GACtB,MAAM;IACLF,IAAI,GAAGd,QAAQ;;EAGjB,IAAIS,aAAa,GAAG,CAAC,EAAE;IACrB,OAAOE,oBAAoB,GAAGJ,SAAS,EAAE;MACvCK,SAAS,GACPb,YAAY,CAACI,SAAS,CAACQ,oBAAoB,EAAE,CAAC,GAAG,CAACF,aAAa,CAAC;MAClEI,IAAI,GAAGC,IAAI,CAACF,SAAS,CAAC;MACtBX,mBAAmB,CAACS,oBAAoB,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;MACrDZ,mBAAmB,CAACS,oBAAoB,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;MACrDZ,mBAAmB,CAACS,oBAAoB,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;MACrDZ,mBAAmB,CAACS,oBAAoB,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;;GAExD,MAAM;IACL,OAAOF,oBAAoB,GAAGJ,SAAS,EAAE;MACvCK,SAAS,GAAGb,YAAY,CAACI,SAAS,CAACQ,oBAAoB,EAAE,CAAC,CAAC;MAC3DE,IAAI,GAAGC,IAAI,CAACF,SAAS,CAAC;MACtBX,mBAAmB,CAACS,oBAAoB,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;MACrDZ,mBAAmB,CAACS,oBAAoB,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;MACrDZ,mBAAmB,CAACS,oBAAoB,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;MACrDZ,mBAAmB,CAACS,oBAAoB,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;;;EAIzDf,KAAK,CAACO,KAAK,CAACY,wCAAwC,GAAGrB,GAAG,EAAE,GAAGM,KAAK;AACtE;AAEA,eAAeL,8CAA8C"},"metadata":{},"sourceType":"module","externalDependencies":[]}