{"ast":null,"code":"import { volumeLoader, utilities as csUtils, eventTarget } from '@cornerstonejs/core';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport addSegmentations from './addSegmentations';\nimport addSegmentationRepresentations from './addSegmentationRepresentations';\nimport { triggerSegmentationRender } from '../../utilities/segmentation';\nimport { getSegmentation, removeSegmentation } from './segmentationState';\nimport { triggerSegmentationDataModified } from './triggerSegmentationEvents';\nasync function convertStackToVolumeSegmentation({\n  segmentationId,\n  options\n}) {\n  const segmentation = getSegmentation(segmentationId);\n  const {\n    toolGroupId\n  } = options;\n  const data = segmentation.representationData.LABELMAP;\n  const imageIdReferenceMap = data.imageIdReferenceMap;\n  const segmentationImageIds = Array.from(imageIdReferenceMap.values());\n  const additionalDetails = {\n    imageIdReferenceMap\n  };\n  const volumeId = options?.volumeId;\n  await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds, {\n    additionalDetails\n  });\n  const newSegmentationId = options?.newSegmentationId ?? csUtils.uuidv4();\n  if (options?.removeOriginal ?? true) {\n    removeSegmentation(segmentationId);\n  }\n  await addSegmentations([{\n    segmentationId: newSegmentationId,\n    representation: {\n      type: SegmentationRepresentations.Labelmap,\n      data: {\n        volumeId\n      }\n    }\n  }]);\n  await addSegmentationRepresentations(toolGroupId, [{\n    segmentationId: newSegmentationId,\n    type: SegmentationRepresentations.Labelmap\n  }]);\n  triggerSegmentationRender(toolGroupId);\n  eventTarget.addEventListenerOnce(Events.SEGMENTATION_RENDERED, () => triggerSegmentationDataModified(newSegmentationId));\n}\nexport { convertStackToVolumeSegmentation };","map":{"version":3,"names":["volumeLoader","utilities","csUtils","eventTarget","Events","SegmentationRepresentations","addSegmentations","addSegmentationRepresentations","triggerSegmentationRender","getSegmentation","removeSegmentation","triggerSegmentationDataModified","convertStackToVolumeSegmentation","segmentationId","options","segmentation","toolGroupId","data","representationData","LABELMAP","imageIdReferenceMap","segmentationImageIds","Array","from","values","additionalDetails","volumeId","createAndCacheVolumeFromImages","newSegmentationId","uuidv4","removeOriginal","representation","type","Labelmap","addEventListenerOnce","SEGMENTATION_RENDERED"],"sources":["../../../../src/stateManagement/segmentation/convertStackToVolumeSegmentation.ts"],"sourcesContent":[null],"mappings":"AAAA,SACEA,YAAY,EACZC,SAAS,IAAIC,OAAO,EACpBC,WAAW,QACN,qBAAqB;AAC5B,SAASC,MAAM,EAAEC,2BAA2B,QAAQ,aAAa;AACjE,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,8BAA8B,MAAM,kCAAkC;AAC7E,SAASC,yBAAyB,QAAQ,8BAA8B;AACxE,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,qBAAqB;AAEzE,SAASC,+BAA+B,QAAQ,6BAA6B;AAe7E,eAAeC,gCAAgCA,CAAC;EAC9CC,cAAc;EACdC;AAAO,CASR;EACC,MAAMC,YAAY,GAAGN,eAAe,CAACI,cAAc,CAAC;EACpD,MAAM;IAAEG;EAAW,CAAE,GAAGF,OAAO;EAC/B,MAAMG,IAAI,GAAGF,YAAY,CAACG,kBAAkB,CACzCC,QAAyC;EAE5C,MAAMC,mBAAmB,GAAGH,IAAI,CAACG,mBAAmB;EAGpD,MAAMC,oBAAoB,GAAGC,KAAK,CAACC,IAAI,CAACH,mBAAmB,CAACI,MAAM,EAAE,CAAC;EAErE,MAAMC,iBAAiB,GAAG;IACxBL;GACD;EAID,MAAMM,QAAQ,GAAGZ,OAAO,EAAEY,QAAQ;EAElC,MAAM1B,YAAY,CAAC2B,8BAA8B,CAC/CD,QAAQ,EACRL,oBAAoB,EACpB;IACEI;GACD,CACF;EAED,MAAMG,iBAAiB,GAAGd,OAAO,EAAEc,iBAAiB,IAAI1B,OAAO,CAAC2B,MAAM,EAAE;EAExE,IAAIf,OAAO,EAAEgB,cAAc,IAAI,IAAI,EAAE;IACnCpB,kBAAkB,CAACG,cAAc,CAAC;;EAGpC,MAAMP,gBAAgB,CAAC,CACrB;IACEO,cAAc,EAAEe,iBAAiB;IACjCG,cAAc,EAAE;MACdC,IAAI,EAAE3B,2BAA2B,CAAC4B,QAAQ;MAC1ChB,IAAI,EAAE;QACJS;;;GAGL,CACF,CAAC;EAEF,MAAMnB,8BAA8B,CAACS,WAAW,EAAE,CAChD;IACEH,cAAc,EAAEe,iBAAiB;IACjCI,IAAI,EAAE3B,2BAA2B,CAAC4B;GACnC,CACF,CAAC;EAEFzB,yBAAyB,CAACQ,WAAW,CAAC;EAGtCb,WAAW,CAAC+B,oBAAoB,CAAC9B,MAAM,CAAC+B,qBAAqB,EAAE,MAC7DxB,+BAA+B,CAACiB,iBAAiB,CAAC,CACnD;AACH;AAEA,SAAShB,gCAAgC"},"metadata":{},"sourceType":"module","externalDependencies":[]}