{"ast":null,"code":"import { mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLImageSlice methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLImageSlice(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLImageSlice');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.traverseZBufferPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.traverseOpaqueZBufferPass = renderPass => publicAPI.traverseOpaquePass(renderPass);\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.zBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaqueZBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n\n  // Renders myself\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(true);\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    model.context.depthMask(!prepass);\n  };\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      mat4.copy(model.keyMatrices.mcwc, model.renderable.getMatrix());\n      mat4.transpose(model.keyMatrices.mcwc, model.keyMatrices.mcwc);\n      model.keyMatrixTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  keyMatrixTime: null,\n  keyMatrices: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    mcwc: mat4.identity(new Float64Array(16))\n  };\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n\n  // Object methods\n  vtkOpenGLImageSlice(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLImageSlice');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageSlice = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkImageSlice', newInstance);\nexport { vtkImageSlice as default, extend, newInstance };","map":{"version":3,"names":["mat4","n","newInstance$1","o","obj","e","setGet","vtkViewNode","registerOverride","vtkOpenGLImageSlice","publicAPI","model","classHierarchy","push","buildPass","prepass","renderable","getVisibility","_openGLRenderWindow","getFirstAncestorOfType","_openGLRenderer","context","getContext","prepareNodes","addMissingNode","getMapper","removeUnusedNodes","traverseZBufferPass","renderPass","getNestedVisibility","getSelector","getNestedPickable","apply","children","forEach","child","traverse","traverseOpaqueZBufferPass","traverseOpaquePass","getIsOpaque","traverseTranslucentPass","queryPass","incrementOpaqueActorCount","incrementTranslucentActorCount","zBufferPass","opaquePass","opaqueZBufferPass","depthMask","translucentPass","getKeyMatrices","getMTime","keyMatrixTime","copy","keyMatrices","mcwc","getMatrix","transpose","modified","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","mtime","identity","Float64Array","newInstance","vtkImageSlice","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/OpenGL/ImageSlice.js"],"sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { n as newInstance$1, o as obj, e as setGet } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLImageSlice methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLImageSlice(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLImageSlice');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.traverseZBufferPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.traverseOpaqueZBufferPass = renderPass => publicAPI.traverseOpaquePass(renderPass);\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseOpaquePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n\n  // we draw textures, then mapper, then post pass textures\n  publicAPI.traverseTranslucentPass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.children.forEach(child => {\n      child.traverse(renderPass);\n    });\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n  publicAPI.zBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n  publicAPI.opaqueZBufferPass = (prepass, renderPass) => publicAPI.opaquePass(prepass, renderPass);\n\n  // Renders myself\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    if (prepass) {\n      model.context.depthMask(true);\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass, renderPass) => {\n    model.context.depthMask(!prepass);\n  };\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      mat4.copy(model.keyMatrices.mcwc, model.renderable.getMatrix());\n      mat4.transpose(model.keyMatrices.mcwc, model.keyMatrices.mcwc);\n      model.keyMatrixTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  keyMatrixTime: null,\n  keyMatrices: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    mcwc: mat4.identity(new Float64Array(16))\n  };\n\n  // Build VTK API\n  setGet(publicAPI, model, ['context']);\n\n  // Object methods\n  vtkOpenGLImageSlice(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLImageSlice');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageSlice = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkImageSlice', newInstance);\n\nexport { vtkImageSlice as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}