{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport vtk from '../../../vtk.js';\nimport { m as macro } from '../../../macros2.js';\nimport vtkDataArray from '../../Core/DataArray.js';\nconst {\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkFieldData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkFieldData(publicAPI, model) {\n  model.classHierarchy.push('vtkFieldData');\n  const superGetState = publicAPI.getState;\n\n  // Decode serialized data if any\n  if (model.arrays) {\n    model.arrays = model.arrays.map(item => ({\n      data: vtk(item.data)\n    }));\n  }\n  publicAPI.initialize = () => {\n    publicAPI.initializeFields();\n    publicAPI.copyAllOn();\n    publicAPI.clearFieldFlags();\n  };\n  publicAPI.initializeFields = () => {\n    model.arrays = [];\n    model.copyFieldFlags = {};\n    publicAPI.modified();\n  };\n  publicAPI.copyStructure = other => {\n    publicAPI.initializeFields();\n    model.copyFieldFlags = other.getCopyFieldFlags().map(x => x); // Deep-copy\n    model.arrays = other.arrays().map(x => ({\n      array: x\n    })); // Deep-copy\n    // TODO: Copy array information objects (once we support information objects)\n  };\n  publicAPI.getNumberOfArrays = () => model.arrays.length;\n  publicAPI.getNumberOfActiveArrays = () => model.arrays.length;\n  publicAPI.addArray = arr => {\n    const name = arr.getName();\n    const {\n      array,\n      index\n    } = publicAPI.getArrayWithIndex(name);\n    if (array != null) {\n      model.arrays[index] = {\n        data: arr\n      };\n      return index;\n    }\n    model.arrays = [].concat(model.arrays, {\n      data: arr\n    });\n    return model.arrays.length - 1;\n  };\n  publicAPI.removeAllArrays = () => {\n    model.arrays = [];\n  };\n  publicAPI.removeArray = arrayName => {\n    const index = model.arrays.findIndex(array => array.data.getName() === arrayName);\n    return publicAPI.removeArrayByIndex(index);\n  };\n  publicAPI.removeArrayByIndex = arrayIdx => {\n    if (arrayIdx !== -1 && arrayIdx < model.arrays.length) {\n      model.arrays.splice(arrayIdx, 1);\n      // TBD modified() ?\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getArrays = () => model.arrays.map(entry => entry.data);\n  publicAPI.getArray = arraySpec => typeof arraySpec === 'number' ? publicAPI.getArrayByIndex(arraySpec) : publicAPI.getArrayByName(arraySpec);\n  publicAPI.getArrayByName = arrayName => model.arrays.reduce((a, b, i) => b.data.getName() === arrayName ? b.data : a, null);\n  publicAPI.getArrayWithIndex = arrayName => {\n    const index = model.arrays.findIndex(array => array.data.getName() === arrayName);\n    return {\n      array: index !== -1 ? model.arrays[index].data : null,\n      index\n    };\n  };\n  publicAPI.getArrayByIndex = idx => idx >= 0 && idx < model.arrays.length ? model.arrays[idx].data : null;\n  publicAPI.hasArray = arrayName => publicAPI.getArrayWithIndex(arrayName).index >= 0;\n  publicAPI.getArrayName = idx => {\n    const arr = model.arrays[idx];\n    return arr ? arr.data.getName() : '';\n  };\n  publicAPI.getCopyFieldFlags = () => model.copyFieldFlags;\n  publicAPI.getFlag = arrayName => model.copyFieldFlags[arrayName];\n  publicAPI.passData = function (other) {\n    let fromId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let toId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    other.getArrays().forEach(arr => {\n      const copyFlag = publicAPI.getFlag(arr.getName());\n      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {\n        let destArr = publicAPI.getArrayByName(arr.getName());\n        if (!destArr) {\n          if (fromId < 0 || fromId > arr.getNumberOfTuples()) {\n            // TBD: should this be a deep or a shallow copy?\n            publicAPI.addArray(arr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(arr, attrType);\n            });\n          } else {\n            const ncomps = arr.getNumberOfComponents();\n            let newSize = arr.getNumberOfValues();\n            const tId = toId > -1 ? toId : fromId;\n            if (newSize <= tId * ncomps) {\n              newSize = (tId + 1) * ncomps;\n            }\n            destArr = vtkDataArray.newInstance({\n              name: arr.getName(),\n              dataType: arr.getDataType(),\n              numberOfComponents: ncomps,\n              values: macro.newTypedArray(arr.getDataType(), newSize),\n              size: 0\n            });\n            destArr.insertTuple(tId, arr.getTuple(fromId));\n            publicAPI.addArray(destArr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(destArr, attrType);\n            });\n          }\n        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {\n          if (fromId > -1 && fromId < arr.getNumberOfTuples()) {\n            const tId = toId > -1 ? toId : fromId;\n            destArr.insertTuple(tId, arr.getTuple(fromId));\n          } else {\n            // if `fromId` is not provided, just copy all (or as much possible)\n            // from `arr` to `destArr`.\n            destArr.insertTuples(0, arr.getTuples());\n          }\n        } else {\n          vtkErrorMacro('Unhandled case in passData');\n        }\n      }\n    });\n  };\n  publicAPI.interpolateData = function (other) {\n    let fromId1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let fromId2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    let toId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    other.getArrays().forEach(arr => {\n      const copyFlag = publicAPI.getFlag(arr.getName());\n      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {\n        let destArr = publicAPI.getArrayByName(arr.getName());\n        if (!destArr) {\n          if (fromId1 < 0 || fromId2 < 0 || fromId1 > arr.getNumberOfTuples()) {\n            // TBD: should this be a deep or a shallow copy?\n            publicAPI.addArray(arr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(arr, attrType);\n            });\n          } else {\n            const ncomps = arr.getNumberOfComponents();\n            let newSize = arr.getNumberOfValues();\n            // TODO: Is this supposed to happen?\n            const tId = toId > -1 ? toId : fromId1;\n            if (newSize <= tId * ncomps) {\n              newSize = (tId + 1) * ncomps;\n            }\n            destArr = vtkDataArray.newInstance({\n              name: arr.getName(),\n              dataType: arr.getDataType(),\n              numberOfComponents: ncomps,\n              values: macro.newTypedArray(arr.getDataType(), newSize),\n              size: 0\n            });\n            destArr.interpolateTuple(tId, arr, fromId1, arr, fromId2, t);\n            publicAPI.addArray(destArr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(destArr, attrType);\n            });\n          }\n        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {\n          if (fromId1 > -1 && fromId1 < arr.getNumberOfTuples()) {\n            const tId = toId > -1 ? toId : fromId1;\n            destArr.interpolateTuple(tId, arr, fromId1, arr, fromId2, t);\n            vtkWarningMacro('Unexpected case in interpolateData');\n          } else {\n            // if `fromId` is not provided, just copy all (or as much possible)\n            // from `arr` to `destArr`.\n            destArr.insertTuples(arr.getTuples());\n          }\n        } else {\n          vtkErrorMacro('Unhandled case in interpolateData');\n        }\n      }\n    });\n  };\n  publicAPI.copyFieldOn = arrayName => {\n    model.copyFieldFlags[arrayName] = true;\n  };\n  publicAPI.copyFieldOff = arrayName => {\n    model.copyFieldFlags[arrayName] = false;\n  };\n  publicAPI.copyAllOn = () => {\n    if (!model.doCopyAllOn || model.doCopyAllOff) {\n      model.doCopyAllOn = true;\n      model.doCopyAllOff = false;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.copyAllOff = () => {\n    if (model.doCopyAllOn || !model.doCopyAllOff) {\n      model.doCopyAllOn = false;\n      model.doCopyAllOff = true;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.clearFieldFlags = () => {\n    model.copyFieldFlags = {};\n  };\n  publicAPI.deepCopy = other => {\n    model.arrays = other.getArrays().map(arr => {\n      const arrNew = arr.newClone();\n      arrNew.deepCopy(arr);\n      return {\n        data: arrNew\n      };\n    });\n  };\n  publicAPI.copyFlags = other => other.getCopyFieldFlags().map(x => x);\n  // TODO: publicAPI.squeeze = () => model.arrays.forEach(entry => entry.data.squeeze());\n  publicAPI.reset = () => model.arrays.forEach(entry => entry.data.reset());\n  // TODO: getActualMemorySize\n  publicAPI.getMTime = () => model.arrays.reduce((a, b) => b.data.getMTime() > a ? b.data.getMTime() : a, model.mtime);\n  // TODO: publicAPI.getField = (ids, other) => { copy ids from other into this model's arrays }\n  // TODO: publicAPI.getArrayContainingComponent = (component) => ...\n  publicAPI.getNumberOfComponents = () => model.arrays.reduce((a, b) => a + b.data.getNumberOfComponents(), 0);\n  publicAPI.getNumberOfTuples = () => model.arrays.length > 0 ? model.arrays[0].getNumberOfTuples() : 0;\n  publicAPI.getState = () => {\n    const result = superGetState();\n    if (result) {\n      result.arrays = model.arrays.map(item => ({\n        data: item.data.getState()\n      }));\n    }\n    return result;\n  };\n}\nconst DEFAULT_VALUES = {\n  arrays: [],\n  copyFieldFlags: [],\n  // fields not to copy\n  doCopyAllOn: true,\n  doCopyAllOff: false\n};\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  vtkFieldData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkFieldData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkFieldData$1 = {\n  newInstance,\n  extend\n};\nexport { vtkFieldData$1 as default, extend, newInstance };","map":{"version":3,"names":["vtk","m","macro","vtkDataArray","vtkErrorMacro","vtkWarningMacro","vtkFieldData","publicAPI","model","classHierarchy","push","superGetState","getState","arrays","map","item","data","initialize","initializeFields","copyAllOn","clearFieldFlags","copyFieldFlags","modified","copyStructure","other","getCopyFieldFlags","x","array","getNumberOfArrays","length","getNumberOfActiveArrays","addArray","arr","name","getName","index","getArrayWithIndex","concat","removeAllArrays","removeArray","arrayName","findIndex","removeArrayByIndex","arrayIdx","splice","getArrays","entry","getArray","arraySpec","getArrayByIndex","getArrayByName","reduce","a","b","i","idx","hasArray","getArrayName","getFlag","passData","fromId","arguments","undefined","toId","forEach","copyFlag","doCopyAllOff","destArr","getNumberOfTuples","getAttributes","attrType","setAttribute","ncomps","getNumberOfComponents","newSize","getNumberOfValues","tId","newInstance","dataType","getDataType","numberOfComponents","values","newTypedArray","size","insertTuple","getTuple","insertTuples","getTuples","interpolateData","fromId1","fromId2","t","interpolateTuple","copyFieldOn","copyFieldOff","doCopyAllOn","copyAllOff","deepCopy","arrNew","newClone","copyFlags","reset","getMTime","mtime","result","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","vtkFieldData$1","default"],"sources":["/Users/yzy/Documents/Playground/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/FieldData.js"],"sourcesContent":["import vtk from '../../../vtk.js';\nimport { m as macro } from '../../../macros2.js';\nimport vtkDataArray from '../../Core/DataArray.js';\n\nconst {\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkFieldData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkFieldData(publicAPI, model) {\n  model.classHierarchy.push('vtkFieldData');\n  const superGetState = publicAPI.getState;\n\n  // Decode serialized data if any\n  if (model.arrays) {\n    model.arrays = model.arrays.map(item => ({\n      data: vtk(item.data)\n    }));\n  }\n  publicAPI.initialize = () => {\n    publicAPI.initializeFields();\n    publicAPI.copyAllOn();\n    publicAPI.clearFieldFlags();\n  };\n  publicAPI.initializeFields = () => {\n    model.arrays = [];\n    model.copyFieldFlags = {};\n    publicAPI.modified();\n  };\n  publicAPI.copyStructure = other => {\n    publicAPI.initializeFields();\n    model.copyFieldFlags = other.getCopyFieldFlags().map(x => x); // Deep-copy\n    model.arrays = other.arrays().map(x => ({\n      array: x\n    })); // Deep-copy\n    // TODO: Copy array information objects (once we support information objects)\n  };\n\n  publicAPI.getNumberOfArrays = () => model.arrays.length;\n  publicAPI.getNumberOfActiveArrays = () => model.arrays.length;\n  publicAPI.addArray = arr => {\n    const name = arr.getName();\n    const {\n      array,\n      index\n    } = publicAPI.getArrayWithIndex(name);\n    if (array != null) {\n      model.arrays[index] = {\n        data: arr\n      };\n      return index;\n    }\n    model.arrays = [].concat(model.arrays, {\n      data: arr\n    });\n    return model.arrays.length - 1;\n  };\n  publicAPI.removeAllArrays = () => {\n    model.arrays = [];\n  };\n  publicAPI.removeArray = arrayName => {\n    const index = model.arrays.findIndex(array => array.data.getName() === arrayName);\n    return publicAPI.removeArrayByIndex(index);\n  };\n  publicAPI.removeArrayByIndex = arrayIdx => {\n    if (arrayIdx !== -1 && arrayIdx < model.arrays.length) {\n      model.arrays.splice(arrayIdx, 1);\n      // TBD modified() ?\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getArrays = () => model.arrays.map(entry => entry.data);\n  publicAPI.getArray = arraySpec => typeof arraySpec === 'number' ? publicAPI.getArrayByIndex(arraySpec) : publicAPI.getArrayByName(arraySpec);\n  publicAPI.getArrayByName = arrayName => model.arrays.reduce((a, b, i) => b.data.getName() === arrayName ? b.data : a, null);\n  publicAPI.getArrayWithIndex = arrayName => {\n    const index = model.arrays.findIndex(array => array.data.getName() === arrayName);\n    return {\n      array: index !== -1 ? model.arrays[index].data : null,\n      index\n    };\n  };\n  publicAPI.getArrayByIndex = idx => idx >= 0 && idx < model.arrays.length ? model.arrays[idx].data : null;\n  publicAPI.hasArray = arrayName => publicAPI.getArrayWithIndex(arrayName).index >= 0;\n  publicAPI.getArrayName = idx => {\n    const arr = model.arrays[idx];\n    return arr ? arr.data.getName() : '';\n  };\n  publicAPI.getCopyFieldFlags = () => model.copyFieldFlags;\n  publicAPI.getFlag = arrayName => model.copyFieldFlags[arrayName];\n  publicAPI.passData = function (other) {\n    let fromId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let toId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    other.getArrays().forEach(arr => {\n      const copyFlag = publicAPI.getFlag(arr.getName());\n      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {\n        let destArr = publicAPI.getArrayByName(arr.getName());\n        if (!destArr) {\n          if (fromId < 0 || fromId > arr.getNumberOfTuples()) {\n            // TBD: should this be a deep or a shallow copy?\n            publicAPI.addArray(arr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(arr, attrType);\n            });\n          } else {\n            const ncomps = arr.getNumberOfComponents();\n            let newSize = arr.getNumberOfValues();\n            const tId = toId > -1 ? toId : fromId;\n            if (newSize <= tId * ncomps) {\n              newSize = (tId + 1) * ncomps;\n            }\n            destArr = vtkDataArray.newInstance({\n              name: arr.getName(),\n              dataType: arr.getDataType(),\n              numberOfComponents: ncomps,\n              values: macro.newTypedArray(arr.getDataType(), newSize),\n              size: 0\n            });\n            destArr.insertTuple(tId, arr.getTuple(fromId));\n            publicAPI.addArray(destArr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(destArr, attrType);\n            });\n          }\n        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {\n          if (fromId > -1 && fromId < arr.getNumberOfTuples()) {\n            const tId = toId > -1 ? toId : fromId;\n            destArr.insertTuple(tId, arr.getTuple(fromId));\n          } else {\n            // if `fromId` is not provided, just copy all (or as much possible)\n            // from `arr` to `destArr`.\n            destArr.insertTuples(0, arr.getTuples());\n          }\n        } else {\n          vtkErrorMacro('Unhandled case in passData');\n        }\n      }\n    });\n  };\n  publicAPI.interpolateData = function (other) {\n    let fromId1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let fromId2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    let toId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    other.getArrays().forEach(arr => {\n      const copyFlag = publicAPI.getFlag(arr.getName());\n      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {\n        let destArr = publicAPI.getArrayByName(arr.getName());\n        if (!destArr) {\n          if (fromId1 < 0 || fromId2 < 0 || fromId1 > arr.getNumberOfTuples()) {\n            // TBD: should this be a deep or a shallow copy?\n            publicAPI.addArray(arr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(arr, attrType);\n            });\n          } else {\n            const ncomps = arr.getNumberOfComponents();\n            let newSize = arr.getNumberOfValues();\n            // TODO: Is this supposed to happen?\n            const tId = toId > -1 ? toId : fromId1;\n            if (newSize <= tId * ncomps) {\n              newSize = (tId + 1) * ncomps;\n            }\n            destArr = vtkDataArray.newInstance({\n              name: arr.getName(),\n              dataType: arr.getDataType(),\n              numberOfComponents: ncomps,\n              values: macro.newTypedArray(arr.getDataType(), newSize),\n              size: 0\n            });\n            destArr.interpolateTuple(tId, arr, fromId1, arr, fromId2, t);\n            publicAPI.addArray(destArr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(destArr, attrType);\n            });\n          }\n        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {\n          if (fromId1 > -1 && fromId1 < arr.getNumberOfTuples()) {\n            const tId = toId > -1 ? toId : fromId1;\n            destArr.interpolateTuple(tId, arr, fromId1, arr, fromId2, t);\n            vtkWarningMacro('Unexpected case in interpolateData');\n          } else {\n            // if `fromId` is not provided, just copy all (or as much possible)\n            // from `arr` to `destArr`.\n            destArr.insertTuples(arr.getTuples());\n          }\n        } else {\n          vtkErrorMacro('Unhandled case in interpolateData');\n        }\n      }\n    });\n  };\n  publicAPI.copyFieldOn = arrayName => {\n    model.copyFieldFlags[arrayName] = true;\n  };\n  publicAPI.copyFieldOff = arrayName => {\n    model.copyFieldFlags[arrayName] = false;\n  };\n  publicAPI.copyAllOn = () => {\n    if (!model.doCopyAllOn || model.doCopyAllOff) {\n      model.doCopyAllOn = true;\n      model.doCopyAllOff = false;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.copyAllOff = () => {\n    if (model.doCopyAllOn || !model.doCopyAllOff) {\n      model.doCopyAllOn = false;\n      model.doCopyAllOff = true;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.clearFieldFlags = () => {\n    model.copyFieldFlags = {};\n  };\n  publicAPI.deepCopy = other => {\n    model.arrays = other.getArrays().map(arr => {\n      const arrNew = arr.newClone();\n      arrNew.deepCopy(arr);\n      return {\n        data: arrNew\n      };\n    });\n  };\n  publicAPI.copyFlags = other => other.getCopyFieldFlags().map(x => x);\n  // TODO: publicAPI.squeeze = () => model.arrays.forEach(entry => entry.data.squeeze());\n  publicAPI.reset = () => model.arrays.forEach(entry => entry.data.reset());\n  // TODO: getActualMemorySize\n  publicAPI.getMTime = () => model.arrays.reduce((a, b) => b.data.getMTime() > a ? b.data.getMTime() : a, model.mtime);\n  // TODO: publicAPI.getField = (ids, other) => { copy ids from other into this model's arrays }\n  // TODO: publicAPI.getArrayContainingComponent = (component) => ...\n  publicAPI.getNumberOfComponents = () => model.arrays.reduce((a, b) => a + b.data.getNumberOfComponents(), 0);\n  publicAPI.getNumberOfTuples = () => model.arrays.length > 0 ? model.arrays[0].getNumberOfTuples() : 0;\n  publicAPI.getState = () => {\n    const result = superGetState();\n    if (result) {\n      result.arrays = model.arrays.map(item => ({\n        data: item.data.getState()\n      }));\n    }\n    return result;\n  };\n}\nconst DEFAULT_VALUES = {\n  arrays: [],\n  copyFieldFlags: [],\n  // fields not to copy\n  doCopyAllOn: true,\n  doCopyAllOff: false\n};\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  vtkFieldData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkFieldData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkFieldData$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkFieldData$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}