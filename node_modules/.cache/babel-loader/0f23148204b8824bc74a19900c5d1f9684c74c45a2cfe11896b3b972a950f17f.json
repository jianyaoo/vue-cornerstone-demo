{"ast":null,"code":"import pointInShapeCallback from '../../../../utilities/pointInShapeCallback';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\nexport default {\n  [StrategyCallbacks.Initialize]: operationData => {\n    const {\n      strategySpecificConfiguration\n    } = operationData;\n    if (!strategySpecificConfiguration) {\n      return;\n    }\n    const {\n      centerSegmentIndex\n    } = strategySpecificConfiguration;\n    if (centerSegmentIndex) {\n      operationData.segmentIndex = centerSegmentIndex.segmentIndex;\n    }\n  },\n  [StrategyCallbacks.OnInteractionStart]: operationData => {\n    const {\n      segmentIndex,\n      previewSegmentIndex,\n      segmentationVoxelManager: segmentationVoxelManager,\n      centerIJK,\n      strategySpecificConfiguration,\n      imageVoxelManager: imageVoxelManager,\n      segmentationImageData,\n      preview\n    } = operationData;\n    if (!strategySpecificConfiguration?.useCenterSegmentIndex) {\n      return;\n    }\n    delete strategySpecificConfiguration.centerSegmentIndex;\n    let hasSegmentIndex = false;\n    let hasPreviewIndex = false;\n    const callback = ({\n      value\n    }) => {\n      hasSegmentIndex ||= value === segmentIndex;\n      hasPreviewIndex ||= value === previewSegmentIndex;\n    };\n    pointInShapeCallback(segmentationImageData, imageVoxelManager.isInObject, callback, segmentationVoxelManager.boundsIJK);\n    if (!hasSegmentIndex && !hasPreviewIndex) {\n      return;\n    }\n    let existingValue = segmentationVoxelManager.getAtIJKPoint(centerIJK);\n    if (existingValue === previewSegmentIndex) {\n      if (preview) {\n        existingValue = preview.segmentIndex;\n      } else {\n        return;\n      }\n    } else if (hasPreviewIndex) {\n      existingValue = null;\n    }\n    operationData.segmentIndex = existingValue;\n    strategySpecificConfiguration.centerSegmentIndex = {\n      segmentIndex: existingValue\n    };\n  }\n};","map":{"version":3,"names":["pointInShapeCallback","StrategyCallbacks","Initialize","operationData","strategySpecificConfiguration","centerSegmentIndex","segmentIndex","OnInteractionStart","previewSegmentIndex","segmentationVoxelManager","centerIJK","imageVoxelManager","segmentationImageData","preview","useCenterSegmentIndex","hasSegmentIndex","hasPreviewIndex","callback","value","isInObject","boundsIJK","existingValue","getAtIJKPoint"],"sources":["../../../../../../src/tools/segmentation/strategies/compositions/determineSegmentIndex.ts"],"sourcesContent":[null],"mappings":"AACA,OAAOA,oBAAoB,MAAM,4CAA4C;AAC7E,OAAOC,iBAAiB,MAAM,qCAAqC;AAkBnE,eAAe;EACb,CAACA,iBAAiB,CAACC,UAAU,GAAIC,aAAuC,IAAI;IAC1E,MAAM;MAAEC;IAA6B,CAAE,GAAGD,aAAa;IACvD,IAAI,CAACC,6BAA6B,EAAE;MAClC;;IAEF,MAAM;MAAEC;IAAkB,CAAE,GAAGD,6BAA6B;IAC5D,IAAIC,kBAAkB,EAAE;MACtBF,aAAa,CAACG,YAAY,GAAGD,kBAAkB,CAACC,YAAY;;EAEhE,CAAC;EAED,CAACL,iBAAiB,CAACM,kBAAkB,GACnCJ,aAAuC,IACrC;IACF,MAAM;MACJG,YAAY;MACZE,mBAAmB;MACnBC,wBAAwB,EAAEA,wBAAwB;MAClDC,SAAS;MACTN,6BAA6B;MAC7BO,iBAAiB,EAAEA,iBAAiB;MACpCC,qBAAqB;MACrBC;IAAO,CACR,GAAGV,aAAa;IACjB,IAAI,CAACC,6BAA6B,EAAEU,qBAAqB,EAAE;MACzD;;IAGF,OAAOV,6BAA6B,CAACC,kBAAkB;IAEvD,IAAIU,eAAe,GAAG,KAAK;IAC3B,IAAIC,eAAe,GAAG,KAAK;IAC3B,MAAMC,QAAQ,GAAGA,CAAC;MAAEC;IAAK,CAAE,KAAI;MAC7BH,eAAe,KAAKG,KAAK,KAAKZ,YAAY;MAC1CU,eAAe,KAAKE,KAAK,KAAKV,mBAAmB;IACnD,CAAC;IAEDR,oBAAoB,CAClBY,qBAAgC,EAChCD,iBAAiB,CAACQ,UAAU,EAC5BF,QAAQ,EACRR,wBAAwB,CAACW,SAAS,CACnC;IAED,IAAI,CAACL,eAAe,IAAI,CAACC,eAAe,EAAE;MACxC;;IAGF,IAAIK,aAAa,GAAGZ,wBAAwB,CAACa,aAAa,CAACZ,SAAS,CAAC;IACrE,IAAIW,aAAa,KAAKb,mBAAmB,EAAE;MACzC,IAAIK,OAAO,EAAE;QACXQ,aAAa,GAAGR,OAAO,CAACP,YAAY;OACrC,MAAM;QACL;;KAEH,MAAM,IAAIU,eAAe,EAAE;MAE1BK,aAAa,GAAG,IAAI;;IAEtBlB,aAAa,CAACG,YAAY,GAAGe,aAAa;IAC1CjB,6BAA6B,CAACC,kBAAkB,GAAG;MACjDC,YAAY,EAAEe;KACf;EACH;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}