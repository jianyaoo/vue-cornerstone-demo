{"ast":null,"code":"import { cache as cornerstoneCache } from '@cornerstonejs/core';\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { removeDuplicatePoints } from './mergePoints';\nimport { findContoursFromReducedSet } from './contourFinder';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nconst {\n  Labelmap\n} = SegmentationRepresentations;\nfunction generateContourSetsFromLabelmap({\n  segmentations\n}) {\n  const {\n    representationData,\n    segments = [0, 1]\n  } = segmentations;\n  const {\n    volumeId: segVolumeId\n  } = representationData[Labelmap];\n  const vol = cornerstoneCache.getVolume(segVolumeId);\n  if (!vol) {\n    console.warn(`No volume found for ${segVolumeId}`);\n    return;\n  }\n  const numSlices = vol.dimensions[2];\n  const imageVol = cornerstoneCache.getVolume(vol.referencedVolumeId);\n  if (!imageVol) {\n    console.warn(`No volume found for ${vol.referencedVolumeId}`);\n    return;\n  }\n  const segData = vol.imageData.getPointData().getScalars().getData();\n  const pixelsPerSlice = vol.dimensions[0] * vol.dimensions[1];\n  for (let z = 0; z < numSlices; z++) {\n    for (let y = 0; y < vol.dimensions[1]; y++) {\n      const index = y * vol.dimensions[0] + z * pixelsPerSlice;\n      segData[index] = 0;\n      segData[index + vol.dimensions[0] - 1] = 0;\n    }\n  }\n  const ContourSets = [];\n  const {\n    FrameOfReferenceUID\n  } = imageVol.metadata;\n  const numSegments = segments.length;\n  for (let segIndex = 0; segIndex < numSegments; segIndex++) {\n    const segment = segments[segIndex];\n    if (!segment) {\n      continue;\n    }\n    const sliceContours = [];\n    const scalars = vtkDataArray.newInstance({\n      name: 'Scalars',\n      numberOfComponents: 1,\n      size: pixelsPerSlice * numSlices,\n      dataType: 'Uint8Array'\n    });\n    const {\n      containedSegmentIndices\n    } = segment;\n    for (let sliceIndex = 0; sliceIndex < numSlices; sliceIndex++) {\n      if (isSliceEmptyForSegment(sliceIndex, segData, pixelsPerSlice, segIndex)) {\n        continue;\n      }\n      const frameStart = sliceIndex * pixelsPerSlice;\n      try {\n        for (let i = 0; i < pixelsPerSlice; i++) {\n          const value = segData[i + frameStart];\n          if (value === segIndex || containedSegmentIndices?.has(value)) {\n            scalars.setValue(i + frameStart, 1);\n          } else {\n            scalars.setValue(i, 0);\n          }\n        }\n        const mSquares = vtkImageMarchingSquares.newInstance({\n          slice: sliceIndex\n        });\n        const imageDataCopy = vtkImageData.newInstance();\n        imageDataCopy.shallowCopy(vol.imageData);\n        imageDataCopy.getPointData().setScalars(scalars);\n        mSquares.setInputData(imageDataCopy);\n        const cValues = [1];\n        mSquares.setContourValues(cValues);\n        mSquares.setMergePoints(false);\n        const msOutput = mSquares.getOutputData();\n        const reducedSet = removeDuplicatePoints(msOutput);\n        if (reducedSet.points?.length) {\n          const contours = findContoursFromReducedSet(reducedSet.lines);\n          sliceContours.push({\n            referencedImageId: imageVol.imageIds[sliceIndex],\n            contours,\n            polyData: reducedSet,\n            FrameNumber: sliceIndex + 1,\n            sliceIndex,\n            FrameOfReferenceUID\n          });\n        }\n      } catch (e) {\n        console.warn(sliceIndex);\n        console.warn(e);\n      }\n    }\n    const metadata = {\n      referencedImageId: imageVol.imageIds[0],\n      FrameOfReferenceUID\n    };\n    const ContourSet = {\n      label: segment.label,\n      color: segment.color,\n      metadata,\n      sliceContours\n    };\n    ContourSets.push(ContourSet);\n  }\n  return ContourSets;\n}\nfunction isSliceEmptyForSegment(sliceIndex, segData, pixelsPerSlice, segIndex) {\n  const startIdx = sliceIndex * pixelsPerSlice;\n  const endIdx = startIdx + pixelsPerSlice;\n  for (let i = startIdx; i < endIdx; i++) {\n    if (segData[i] === segIndex) {\n      return false;\n    }\n  }\n  return true;\n}\nexport { generateContourSetsFromLabelmap };","map":{"version":3,"names":["cache","cornerstoneCache","vtkImageMarchingSquares","vtkDataArray","vtkImageData","removeDuplicatePoints","findContoursFromReducedSet","SegmentationRepresentations","Labelmap","generateContourSetsFromLabelmap","segmentations","representationData","segments","volumeId","segVolumeId","vol","getVolume","console","warn","numSlices","dimensions","imageVol","referencedVolumeId","segData","imageData","getPointData","getScalars","getData","pixelsPerSlice","z","y","index","ContourSets","FrameOfReferenceUID","metadata","numSegments","length","segIndex","segment","sliceContours","scalars","newInstance","name","numberOfComponents","size","dataType","containedSegmentIndices","sliceIndex","isSliceEmptyForSegment","frameStart","i","value","has","setValue","mSquares","slice","imageDataCopy","shallowCopy","setScalars","setInputData","cValues","setContourValues","setMergePoints","msOutput","getOutputData","reducedSet","points","contours","lines","push","referencedImageId","imageIds","polyData","FrameNumber","e","ContourSet","label","color","startIdx","endIdx"],"sources":["../../../../src/utilities/contours/generateContourSetsFromLabelmap.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}