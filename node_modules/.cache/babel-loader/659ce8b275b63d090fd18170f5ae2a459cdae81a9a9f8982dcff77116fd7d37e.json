{"ast":null,"code":"import { vec2 } from 'gl-matrix';\nexport default function findOpenUShapedContourVectorToPeak(canvasPoints, viewport) {\n  const first = canvasPoints[0];\n  const last = canvasPoints[canvasPoints.length - 1];\n  const firstToLastUnitVector = vec2.create();\n  vec2.set(firstToLastUnitVector, last[0] - first[0], last[1] - first[1]);\n  vec2.normalize(firstToLastUnitVector, firstToLastUnitVector);\n  const normalVector1 = vec2.create();\n  const normalVector2 = vec2.create();\n  vec2.set(normalVector1, -firstToLastUnitVector[1], firstToLastUnitVector[0]);\n  vec2.set(normalVector2, firstToLastUnitVector[1], -firstToLastUnitVector[0]);\n  const centerOfFirstToLast = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n  const furthest = {\n    dist: 0,\n    index: null\n  };\n  for (let i = 0; i < canvasPoints.length; i++) {\n    const canvasPoint = canvasPoints[i];\n    const distance = vec2.dist(canvasPoint, centerOfFirstToLast);\n    if (distance > furthest.dist) {\n      furthest.dist = distance;\n      furthest.index = i;\n    }\n  }\n  const toFurthest = [canvasPoints[furthest.index], centerOfFirstToLast];\n  const toFurthestWorld = toFurthest.map(viewport.canvasToWorld);\n  return toFurthestWorld;\n}\nexport function findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation) {\n  const {\n    viewport\n  } = enabledElement;\n  const canvasPoints = annotation.data.contour.polyline.map(viewport.worldToCanvas);\n  return findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n}","map":{"version":3,"names":["vec2","findOpenUShapedContourVectorToPeak","canvasPoints","viewport","first","last","length","firstToLastUnitVector","create","set","normalize","normalVector1","normalVector2","centerOfFirstToLast","furthest","dist","index","i","canvasPoint","distance","toFurthest","toFurthestWorld","map","canvasToWorld","findOpenUShapedContourVectorToPeakOnRender","enabledElement","annotation","data","contour","polyline","worldToCanvas"],"sources":["../../../../../src/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.ts"],"sourcesContent":[null],"mappings":"AAEA,SAASA,IAAI,QAAQ,WAAW;AAOhC,eAAc,SAAUC,kCAAkCA,CACxDC,YAA4B,EAC5BC,QAAsD;EAGtD,MAAMC,KAAK,GAAGF,YAAY,CAAC,CAAC,CAAC;EAC7B,MAAMG,IAAI,GAAGH,YAAY,CAACA,YAAY,CAACI,MAAM,GAAG,CAAC,CAAC;EAElD,MAAMC,qBAAqB,GAAGP,IAAI,CAACQ,MAAM,EAAE;EAE3CR,IAAI,CAACS,GAAG,CAACF,qBAAqB,EAAEF,IAAI,CAAC,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC,CAAC,EAAEC,IAAI,CAAC,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC,CAAC,CAAC;EACvEJ,IAAI,CAACU,SAAS,CAACH,qBAAqB,EAAEA,qBAAqB,CAAC;EAM5D,MAAMI,aAAa,GAAGX,IAAI,CAACQ,MAAM,EAAE;EACnC,MAAMI,aAAa,GAAGZ,IAAI,CAACQ,MAAM,EAAE;EAEnCR,IAAI,CAACS,GAAG,CAACE,aAAa,EAAE,CAACJ,qBAAqB,CAAC,CAAC,CAAC,EAAEA,qBAAqB,CAAC,CAAC,CAAC,CAAC;EAC5EP,IAAI,CAACS,GAAG,CAACG,aAAa,EAAEL,qBAAqB,CAAC,CAAC,CAAC,EAAE,CAACA,qBAAqB,CAAC,CAAC,CAAC,CAAC;EAG5E,MAAMM,mBAAmB,GAAiB,CACxC,CAACT,KAAK,CAAC,CAAC,CAAC,GAAGC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EACxB,CAACD,KAAK,CAAC,CAAC,CAAC,GAAGC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CACzB;EAID,MAAMS,QAAQ,GAAG;IACfC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE;GACR;EAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,YAAY,CAACI,MAAM,EAAEW,CAAC,EAAE,EAAE;IAC5C,MAAMC,WAAW,GAAGhB,YAAY,CAACe,CAAC,CAAC;IAEnC,MAAME,QAAQ,GAAGnB,IAAI,CAACe,IAAI,CAACG,WAAW,EAAQL,mBAAmB,CAAC;IAElE,IAAIM,QAAQ,GAAGL,QAAQ,CAACC,IAAI,EAAE;MAC5BD,QAAQ,CAACC,IAAI,GAAGI,QAAQ;MACxBL,QAAQ,CAACE,KAAK,GAAGC,CAAC;;;EAItB,MAAMG,UAAU,GAAiC,CAC/ClB,YAAY,CAACY,QAAQ,CAACE,KAAK,CAAC,EAC5BH,mBAAmB,CACpB;EACD,MAAMQ,eAAe,GAAGD,UAAU,CAACE,GAAG,CAACnB,QAAQ,CAACoB,aAAa,CAAC;EAE9D,OAAOF,eAAe;AACxB;AAEA,OAAM,SAAUG,0CAA0CA,CACxDC,cAAqC,EACrCC,UAAuC;EAEvC,MAAM;IAAEvB;EAAQ,CAAE,GAAGsB,cAAc;EACnC,MAAMvB,YAAY,GAAGwB,UAAU,CAACC,IAAI,CAACC,OAAO,CAACC,QAAQ,CAACP,GAAG,CACvDnB,QAAQ,CAAC2B,aAAa,CACvB;EAED,OAAO7B,kCAAkC,CAACC,YAAY,EAAEC,QAAQ,CAAC;AACnE"},"metadata":{},"sourceType":"module","externalDependencies":[]}