{"ast":null,"code":"import { cache, utilities } from '@cornerstonejs/core';\nimport { isVolumeSegmentation } from './stackVolumeCheck';\nconst {\n  VoxelManager\n} = utilities;\nfunction getStrategyData({\n  operationData,\n  viewport\n}) {\n  let segmentationImageData, segmentationScalarData, imageScalarData;\n  let dimensions;\n  if (isVolumeSegmentation(operationData)) {\n    const {\n      volumeId,\n      referencedVolumeId\n    } = operationData;\n    const segmentationVolume = cache.getVolume(volumeId);\n    const imageVolume = cache.getVolume(referencedVolumeId);\n    if (!segmentationVolume || !imageVolume) {\n      return;\n    }\n    ({\n      imageData: segmentationImageData\n    } = segmentationVolume);\n    segmentationScalarData = segmentationVolume.getScalarData();\n    imageScalarData = imageVolume.getScalarData();\n    dimensions = imageVolume.dimensions;\n  } else {\n    const {\n      imageIdReferenceMap,\n      segmentationRepresentationUID\n    } = operationData;\n    if (!imageIdReferenceMap) {\n      return;\n    }\n    const currentImageId = viewport.getCurrentImageId();\n    if (!currentImageId) {\n      return;\n    }\n    const actor = viewport.getActor(segmentationRepresentationUID);\n    segmentationImageData = actor.actor.getMapper().getInputData();\n    const currentSegmentationImageId = imageIdReferenceMap.get(currentImageId);\n    const segmentationImage = cache.getImage(currentSegmentationImageId);\n    segmentationScalarData = segmentationImage.getPixelData();\n    const image = cache.getImage(currentImageId);\n    imageScalarData = image.getPixelData();\n    dimensions = [image.columns, image.rows, 1];\n  }\n  return {\n    segmentationImageData,\n    segmentationScalarData,\n    segmentationVoxelManager: VoxelManager.createVolumeVoxelManager(dimensions, segmentationScalarData),\n    imageScalarData,\n    imageVoxelManager: VoxelManager.createVolumeVoxelManager(dimensions, imageScalarData)\n  };\n}\nexport { getStrategyData };","map":{"version":3,"names":["cache","utilities","isVolumeSegmentation","VoxelManager","getStrategyData","operationData","viewport","segmentationImageData","segmentationScalarData","imageScalarData","dimensions","volumeId","referencedVolumeId","segmentationVolume","getVolume","imageVolume","imageData","getScalarData","imageIdReferenceMap","segmentationRepresentationUID","currentImageId","getCurrentImageId","actor","getActor","getMapper","getInputData","currentSegmentationImageId","get","segmentationImage","getImage","getPixelData","image","columns","rows","segmentationVoxelManager","createVolumeVoxelManager","imageVoxelManager"],"sources":["../../../../../../src/tools/segmentation/strategies/utils/getStrategyData.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAS,QAAQ,qBAAqB;AAEtD,SAASC,oBAAoB,QAAQ,oBAAoB;AAGzD,MAAM;EAAEC;AAAY,CAAE,GAAGF,SAAS;AAElC,SAASG,eAAeA,CAAC;EAAEC,aAAa;EAAEC;AAAQ,CAAE;EAClD,IAAIC,qBAAqB,EAAEC,sBAAsB,EAAEC,eAAe;EAClE,IAAIC,UAAwB;EAC5B,IAAIR,oBAAoB,CAACG,aAAa,CAAC,EAAE;IACvC,MAAM;MAAEM,QAAQ;MAAEC;IAAkB,CAAE,GAAGP,aAAa;IAEtD,MAAMQ,kBAAkB,GAAGb,KAAK,CAACc,SAAS,CAACH,QAAQ,CAAC;IACpD,MAAMI,WAAW,GAAGf,KAAK,CAACc,SAAS,CAACF,kBAAkB,CAAC;IAEvD,IAAI,CAACC,kBAAkB,IAAI,CAACE,WAAW,EAAE;MACvC;;IAGF,CAAC;MAAEC,SAAS,EAAET;IAAqB,CAAE,GAAGM,kBAAkB;IAC1DL,sBAAsB,GAAGK,kBAAkB,CAACI,aAAa,EAAE;IAC3DR,eAAe,GAAGM,WAAW,CAACE,aAAa,EAAE;IAC7CP,UAAU,GAAGK,WAAW,CAACL,UAAU;GACpC,MAAM;IACL,MAAM;MAAEQ,mBAAmB;MAAEC;IAA6B,CAAE,GAC1Dd,aAA+C;IAEjD,IAAI,CAACa,mBAAmB,EAAE;MACxB;;IAGF,MAAME,cAAc,GAAGd,QAAQ,CAACe,iBAAiB,EAAE;IACnD,IAAI,CAACD,cAAc,EAAE;MACnB;;IAMF,MAAME,KAAK,GAAGhB,QAAQ,CAACiB,QAAQ,CAACJ,6BAA6B,CAAC;IAC9DZ,qBAAqB,GAAGe,KAAK,CAACA,KAAK,CAACE,SAAS,EAAE,CAACC,YAAY,EAAE;IAC9D,MAAMC,0BAA0B,GAAGR,mBAAmB,CAACS,GAAG,CAACP,cAAc,CAAC;IAE1E,MAAMQ,iBAAiB,GAAG5B,KAAK,CAAC6B,QAAQ,CAACH,0BAA0B,CAAC;IACpElB,sBAAsB,GAAGoB,iBAAiB,CAACE,YAAY,EAAE;IAEzD,MAAMC,KAAK,GAAG/B,KAAK,CAAC6B,QAAQ,CAACT,cAAc,CAAC;IAK5CX,eAAe,GAAGsB,KAAK,CAACD,YAAY,EAAE;IACtCpB,UAAU,GAAG,CAACqB,KAAK,CAACC,OAAO,EAAED,KAAK,CAACE,IAAI,EAAE,CAAC,CAAC;;EAG7C,OAAO;IACL1B,qBAAqB;IACrBC,sBAAsB;IACtB0B,wBAAwB,EAAE/B,YAAY,CAACgC,wBAAwB,CAC7DzB,UAAU,EACVF,sBAAsB,CACvB;IACDC,eAAe;IACf2B,iBAAiB,EAAEjC,YAAY,CAACgC,wBAAwB,CACtDzB,UAAU,EACVD,eAAe;GAElB;AACH;AAEA,SAASL,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}