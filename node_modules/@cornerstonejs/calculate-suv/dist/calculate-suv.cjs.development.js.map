{"version":3,"file":"calculate-suv.cjs.development.js","sources":["../src/combineDateTime.ts","../src/parseDA.ts","../src/parseTM.ts","../src/dateTimeToFullDateInterface.ts","../src/calculateScanTimes.ts","../src/calculateSUVlbmScalingFactor.ts","../src/calculateSUVbsaScalingFactor.ts","../src/calculateStartTime.ts","../src/calculateSUVScalingFactors.ts"],"sourcesContent":["import { DateInterface } from './parseDA';\nimport { TimeInterface } from './parseTM';\n\n/**\n * Javascript object that handles dates and compute the time.\n *\n * @export\n * @class FullDateInterface\n */\nexport class FullDateInterface {\n  fullDate: string;\n\n  /**\n   * Creates an instance of FullDateInterface.\n   * @param {string} date formatted as yyyy-mm-ddTHH:MM:SS.FFFFFFZ\n   * @memberof FullDateInterface\n   */\n  constructor(date: string) {\n    this.fullDate = date;\n  }\n\n  /**\n   * returns time since 1 january 1970\n   *\n   * @returns {number} time in sec\n   * @memberof FullDateInterface\n   */\n  getTimeInSec(): number {\n    // yyyy-mm-ddTHH:MM:SS.FFFFFFZ\n    const dateString = this.fullDate.substring(0, 10);\n    const timeString = this.fullDate.substring(11, 28);\n\n    // yyyy-mm-dd\n    const yyyy = parseInt(dateString.substring(0, 4), 10);\n    const mm =\n      dateString.length >= 7\n        ? parseInt(dateString.substring(5, 7), 10)\n        : undefined;\n    const dd =\n      dateString.length >= 10\n        ? parseInt(dateString.substring(8, 10), 10)\n        : undefined;\n\n    if (\n      isNaN(yyyy) ||\n      (mm !== undefined && isNaN(mm)) ||\n      (dd !== undefined && isNaN(dd)) ||\n      yyyy > 3000 ||\n      (mm && (mm < 1 || mm > 12)) ||\n      (dd && (dd < 1 || dd > 31))\n    ) {\n      throw new Error(`invalid date '${dateString}'`);\n    }\n\n    const dateJS = new Date(`${dateString}T00:00:00.000000Z`);\n\n    // HHMMSS.FFFFFF\n    const HH = parseInt(timeString.substring(0, 2), 10);\n    const MM =\n      timeString.length >= 5\n        ? parseInt(timeString.substring(3, 5), 10)\n        : undefined;\n    const SS =\n      timeString.length >= 8\n        ? parseInt(timeString.substring(6, 8), 10)\n        : undefined;\n    const fractionalStr = timeString.substring(9, 15);\n    const FFFFFF = fractionalStr\n      ? parseInt(fractionalStr, 10) * Math.pow(10, -fractionalStr.length)\n      : undefined;\n\n    if (\n      isNaN(HH) ||\n      (MM !== undefined && isNaN(MM)) ||\n      (SS !== undefined && isNaN(SS)) ||\n      (FFFFFF !== undefined && isNaN(FFFFFF)) ||\n      HH < 0 ||\n      HH > 23 ||\n      (MM && (MM < 0 || MM > 59)) ||\n      (SS && (SS < 0 || SS > 59)) ||\n      (FFFFFF && (FFFFFF < 0 || FFFFFF > 999999))\n    ) {\n      throw new Error(`invalid time '${timeString}'`);\n    }\n\n    let timeInSec = dateJS.getTime() / 1000;\n\n    timeInSec += HH * 3600;\n    if (MM !== undefined) {\n      timeInSec += MM * 60;\n    }\n    if (SS !== undefined) {\n      timeInSec += SS;\n    }\n    if (FFFFFF !== undefined) {\n      timeInSec += FFFFFF;\n    }\n\n    return timeInSec;\n  }\n\n  /**\n   * returns time since 1 january 1970\n   *\n   * @returns {number} time in microsec\n   * @memberof FullDateInterface\n   */\n  getTimeInMicroSec(): number {\n    const timeInMicroSec = this.getTimeInSec() * 1e6;\n    return timeInMicroSec;\n  }\n}\n\nexport interface FullDateInterface {\n  date: string;\n}\n\n/**\n * Combines two javascript objects containing the date and time information\n *\n * @export\n * @param {DateInterface} date\n * @param {TimeInterface} time\n * @returns {FullDateInterface}\n */\nexport default function combineDateTime(\n  date: DateInterface,\n  time: TimeInterface\n): FullDateInterface {\n  const hours = `${time.hours || '00'}`.padStart(2, '0');\n  const minutes = `${time.minutes || '00'}`.padStart(2, '0');\n  const seconds = `${time.seconds || '00'}`.padStart(2, '0');\n  const month = `${date.month}`.padStart(2, '0');\n  const day = `${date.day}`.padStart(2, '0');\n  const fractionalSeconds = `${time.fractionalSeconds || '000000'}`.padEnd(\n    6,\n    '0'\n  );\n  const dateString = `${date.year}-${month}-${day}`;\n  const timeString = `T${hours}:${minutes}:${seconds}.${fractionalSeconds}Z`;\n  const fullDateString = `${dateString}${timeString}`;\n\n  return new FullDateInterface(fullDateString);\n}\n\nexport { combineDateTime };\n","/**\n * Check the number of days for a picked month and year\n * algorithm based on http://stackoverflow.com/questions/1433030/validate-number-of-days-in-a-given-month\n *\n * @param {number} m\n * @param {number} y\n * @returns {number} number of days\n */\nfunction daysInMonth(m: number, y: number): number {\n  // m is 0 indexed: 0-11\n  switch (m) {\n    case 2:\n      return (y % 4 === 0 && y % 100) || y % 400 === 0 ? 29 : 28;\n    case 9:\n    case 4:\n    case 6:\n    case 11:\n      return 30;\n    default:\n      return 31;\n  }\n}\n\n/**\n * Check if the date is valid\n *\n * @param {number} d\n * @param {number} m\n * @param {number} y\n * @returns {boolean} boolean result\n */\nfunction isValidDate(d: number, m: number, y: number): boolean {\n  // make year is a number\n  if (isNaN(y)) {\n    return false;\n  }\n\n  return m > 0 && m <= 12 && d > 0 && d <= daysInMonth(m, y);\n}\n\n/**\n * Javascript object with properties year, month and day\n *\n * @export\n * @interface DateInterface\n */\nexport interface DateInterface {\n  year: number;\n  month: number;\n  day: number;\n}\n\n/**\n * Parses a DA formatted string into a Javascript object\n * @param {string} date a string in the DA VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {DateInterface} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n */\nexport default function parseDA(date: string): DateInterface {\n  if (\n    date === undefined ||\n    date === null ||\n    date.length !== 8 ||\n    typeof date !== 'string'\n  ) {\n    throw new Error(`invalid DA '${date}'`);\n  }\n\n  const yyyy = parseInt(date.substring(0, 4), 10);\n  const mm = parseInt(date.substring(4, 6), 10);\n  const dd = parseInt(date.substring(6, 8), 10);\n\n  if (isValidDate(dd, mm, yyyy) !== true) {\n    throw new Error(`invalid DA '${date}'`);\n  }\n\n  return {\n    year: yyyy,\n    month: mm,\n    day: dd,\n  };\n}\n\nexport { parseDA };\n","/**\n * Javascript object with properties for hours, minutes, seconds and fractionalSeconds\n *\n * @export\n * @interface TimeInterface\n */\nexport interface TimeInterface {\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  fractionalSeconds?: number;\n}\n\n/**\n * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n * @param {string} time - a string in the TM VR format\n * @returns {string} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n */\nexport default function parseTM(time: string): TimeInterface {\n  if (\n    time === null ||\n    time === undefined ||\n    time.length < 2 ||\n    typeof time !== 'string'\n  ) {\n    // must at least have HH\n    throw new Error(`invalid TM '${time}'`);\n  }\n\n  // 0123456789\n  // HHMMSS.FFFFFF\n  const hh = parseInt(time.substring(0, 2), 10);\n  const mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n  const ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n  const fractionalStr = time.length >= 8 ? time.substring(7, 13) : undefined;\n  const ffffff = fractionalStr\n    ? parseInt(fractionalStr, 10) * Math.pow(10, 6 - fractionalStr.length)\n    : undefined;\n\n  if (\n    isNaN(hh) ||\n    (mm !== undefined && isNaN(mm)) ||\n    (ss !== undefined && isNaN(ss)) ||\n    (ffffff !== undefined && isNaN(ffffff)) ||\n    hh < 0 ||\n    hh > 23 ||\n    (mm && (mm < 0 || mm > 59)) ||\n    (ss && (ss < 0 || ss > 59)) ||\n    (ffffff && (ffffff < 0 || ffffff > 999999))\n  ) {\n    throw new Error(`invalid TM '${time}'`);\n  }\n\n  return {\n    hours: hh,\n    minutes: mm,\n    seconds: ss,\n    fractionalSeconds: ffffff,\n  };\n}\n\nexport { parseTM };\n","import combineDateTime, { FullDateInterface } from './combineDateTime';\nimport parseDA from './parseDA';\nimport parseTM from './parseTM';\n\n/**\n * Utility to create a FullDateInterface object given a string formatted as yyyy-mm-ddTHH:MM:SS.FFFFFFZ\n *\n * @export\n * @param {string} dateTime\n * @returns {FullDateInterface}\n */\nexport default function dateTimeToFullDateInterface(\n  dateTime: string\n): FullDateInterface {\n  if (dateTime === undefined || dateTime === null) {\n    throw new Error('dateTimeToFullDateInterface : dateTime not defined.');\n  }\n\n  const date = parseDA(dateTime.substring(0, 8));\n  const time = parseTM(dateTime.substring(8));\n  return combineDateTime(date, time);\n}\n\nexport { dateTimeToFullDateInterface };\n","import combineDateTime, { FullDateInterface } from './combineDateTime';\nimport parseDA, { DateInterface } from './parseDA';\nimport parseTM, { TimeInterface } from './parseTM';\nimport dateTimeToFullDateInterface from './dateTimeToFullDateInterface';\n\n/**\n * Javascript object with scan properties\n *\n * @interface InstanceMetadataForScanTimes\n */\ninterface InstanceMetadataForScanTimes {\n  SeriesDate: string;\n  SeriesTime: string;\n  AcquisitionDate: string;\n  AcquisitionTime: string;\n\n  GEPrivatePostInjectionDateTime?: string;\n\n  // Only used in Siemens case\n  RadionuclideHalfLife?: number; // \tRadionuclideHalfLife(0x0018,0x1075)\tin\tRadiopharmaceutical\tInformation\tSequence(0x0054,0x0016)\n  RadionuclideTotalDose?: number;\n  FrameReferenceTime?: number;\n  ActualFrameDuration?: number;\n}\n\n/**\n * Calculate the scan times\n *\n * @export\n * @param {InstanceMetadataForScanTimes[]} instances\n * @returns {FullDateInterface[]}\n */\nexport default function calculateScanTimes(\n  instances: InstanceMetadataForScanTimes[]\n): FullDateInterface[] {\n  const {\n    SeriesDate,\n    SeriesTime,\n    GEPrivatePostInjectionDateTime,\n  } = instances[0];\n  const results = new Array(instances.length);\n  const seriesDate: DateInterface = parseDA(SeriesDate);\n  const seriesTime: TimeInterface = parseTM(SeriesTime);\n  const seriesDateTime: FullDateInterface = combineDateTime(\n    seriesDate,\n    seriesTime\n  );\n\n  let earliestAcquisitionDateTime = new FullDateInterface(\n    `3000-01-01T00:00:00.000000Z`\n  );\n  let timeError = earliestAcquisitionDateTime.getTimeInSec();\n  instances.forEach(instance => {\n    const { AcquisitionDate, AcquisitionTime } = instance;\n\n    const acquisitionDate: DateInterface = parseDA(AcquisitionDate);\n    const acquisitionTime: TimeInterface = parseTM(AcquisitionTime);\n    const acquisitionDateTime: FullDateInterface = combineDateTime(\n      acquisitionDate,\n      acquisitionTime\n    );\n\n    if (earliestAcquisitionDateTime.getTimeInSec() >= timeError) {\n      earliestAcquisitionDateTime = acquisitionDateTime;\n    } else {\n      earliestAcquisitionDateTime =\n        acquisitionDateTime.getTimeInSec() <\n        earliestAcquisitionDateTime.getTimeInSec()\n          ? acquisitionDateTime\n          : earliestAcquisitionDateTime;\n    }\n  });\n\n  if (earliestAcquisitionDateTime.getTimeInSec() >= timeError) {\n    throw new Error('Earliest acquisition time or date could not be parsed.');\n  }\n\n  if (\n    seriesDateTime.getTimeInSec() <= earliestAcquisitionDateTime.getTimeInSec()\n  ) {\n    return results.fill(seriesDateTime);\n  } else {\n    if (GEPrivatePostInjectionDateTime) {\n      // GE Private scan\n      return results.fill(\n        dateTimeToFullDateInterface(GEPrivatePostInjectionDateTime)\n      );\n    } else {\n      /*const hasValidFrameTimes = instances.every(instance => {\n        return (\n          instance.FrameReferenceTime &&\n          instance.FrameReferenceTime > 0 &&\n          instance.ActualFrameDuration &&\n          instance.ActualFrameDuration > 0\n        );\n      });*/\n\n      // TODO: Temporarily commented out the checks and logic below to\n      // investigate the BQML_AC_DT_lessThan_S_DT_SIEMENS-instances case\n      //if (!hasValidFrameTimes) {\n      return results.fill(earliestAcquisitionDateTime);\n      //}\n\n      /* Siemens PETsyngo\t3.x\tmulti-injection logic\n      - backcompute\tfrom\tcenter\t(average\tcount\trate\t)\tof\ttime\twindow\tfor\tbed\tposition\t(frame)\tin\tseries (reliable\tin\tall\tcases)\n      - Acquisition\tDate\t(0x0008,0x0022)\tand\tTime\t(0x0008,0x0032) are\tthe\tstart\tof\tthe\tbed\tposition\t(frame)\n      - Frame\tReference\tTime\t(0x0054,0x1300) is\tthe\toffset\t(ms)\tfrom\tthe\tscan\tDate\tand\tTime we\twant\tto\tthe\taverage\tcount\trate\ttime\n      */\n      /*return instances.map(instance => {\n        const {\n          FrameReferenceTime,\n          ActualFrameDuration,\n          RadionuclideHalfLife,\n          AcquisitionDate,\n          AcquisitionTime,\n        } = instance;\n        // Some of these checks are only here because the compiler is complaining\n        // We could potentially use the ! operator instead\n        if (!FrameReferenceTime || FrameReferenceTime <= 0) {\n          throw new Error(\n            `FrameReferenceTime is invalid: ${FrameReferenceTime}`\n          );\n        }\n\n        if (!ActualFrameDuration || ActualFrameDuration <= 0) {\n          throw new Error(\n            `ActualFrameDuration is invalid: ${ActualFrameDuration}`\n          );\n        }\n\n        if (!RadionuclideHalfLife) {\n          throw new Error('RadionuclideHalfLife is required');\n        }\n\n        if (!AcquisitionDate) {\n          throw new Error('AcquisitionDate is required');\n        }\n\n        if (!AcquisitionTime) {\n          throw new Error('AcquisitionTime is required');\n        }\n\n        const acquisitionDate: DateInterface = parseDA(AcquisitionDate);\n        const acquisitionTime: TimeInterface = parseTM(AcquisitionTime);\n        const acquisitionDateTime: FullDateInterface = combineDateTime(\n          acquisitionDate,\n          acquisitionTime\n        );\n\n        const frameDurationInSec = ActualFrameDuration / 1000;\n        const decayConstant = Math.log(2) / RadionuclideHalfLife;\n        const decayDuringFrame = decayConstant * frameDurationInSec;\n        // TODO: double check this is correctly copied from QIBA pseudocode\n        const averageCountRateTimeWithinFrameInSec =\n          (1 / decayConstant) *\n          Math.log(decayDuringFrame / (1 - Math.exp(-decayConstant)));\n        const scanDateTimeAsNumber =\n          Number(acquisitionDateTime) -\n          FrameReferenceTime / 1000 +\n          averageCountRateTimeWithinFrameInSec;\n\n        const scanDate = new Date(scanDateTimeAsNumber);\n        console.log('SIEMENS PATH');\n        console.log(new Date(scanDateTimeAsNumber));\n        return scanDate;\n      });*/\n    }\n  }\n}\n\nexport { calculateScanTimes };\n","/**\n * Javascript object with patient properties size, sez, weight\n *\n * @export\n * @interface SUVlbmScalingFactorInput\n */\ninterface SUVlbmScalingFactorInput {\n  PatientSize: number; // m\n  PatientSex: string; //'M' | 'F' | 'O';\n  PatientWeight: number; // Kg\n}\n\nfunction calculateSUVlbmScalingFactor(\n  inputs: SUVlbmScalingFactorInput\n): number {\n  const { PatientSex, PatientWeight, PatientSize } = inputs;\n\n  let LBM;\n  const weightSizeFactor = Math.pow(PatientWeight / (PatientSize * 100), 2);\n  // reference: https://www.medicalconnections.co.uk/kb/calculating-suv-from-pet-images/\n  if (PatientSex === 'F') {\n    LBM = 1.07 * PatientWeight - 148 * weightSizeFactor;\n  } else if (PatientSex === 'M') {\n    LBM = 1.1 * PatientWeight - 120 * weightSizeFactor;\n  } else {\n    throw new Error(`PatientSex is an invalid value: ${PatientSex}`);\n  }\n\n  return LBM * 1000; // convert in gr\n}\n\n/**\n * From https://link.springer.com/article/10.1007/s00259-014-2961-x\n * and https://link.springer.com/article/10.2165/00003088-200544100-00004\n * and\n * @param inputs\n * @returns\n */\nfunction calculateSUVlbmJanmahasatianScalingFactor(\n  inputs: SUVlbmScalingFactorInput\n): number {\n  const { PatientSex, PatientWeight, PatientSize } = inputs;\n\n  let LBM;\n  const bodyMassIndex = PatientWeight / Math.pow(PatientSize, 2);\n\n  if (PatientSex === 'F') {\n    LBM = (9270 * PatientWeight) / (8780 + 244 * bodyMassIndex);\n  } else if (PatientSex === 'M') {\n    LBM = (9270 * PatientWeight) / (6680 + 216 * bodyMassIndex);\n  } else {\n    throw new Error(`PatientSex is an invalid value: ${PatientSex}`);\n  }\n  return LBM * 1000; // convert in gr\n}\n\nexport {\n  calculateSUVlbmScalingFactor,\n  calculateSUVlbmJanmahasatianScalingFactor,\n  SUVlbmScalingFactorInput,\n};\n","/**\n * Javascript object with patient properties size, sez, weight\n *\n * @export\n * @interface SUVbsaScalingFactorInput\n */\ninterface SUVbsaScalingFactorInput {\n  PatientSize: number;\n  PatientWeight: number;\n}\n\nfunction calculateSUVbsaScalingFactor(\n  inputs: SUVbsaScalingFactorInput\n): number {\n  const { PatientWeight, PatientSize } = inputs;\n\n  let BSA =\n    Math.pow(PatientWeight, 0.425) * Math.pow(PatientSize * 100, 0.725) * 71.84;\n\n  return BSA;\n}\n\nexport { calculateSUVbsaScalingFactor, SUVbsaScalingFactorInput };\n","import combineDateTime, { FullDateInterface } from './combineDateTime';\nimport { parseDA, DateInterface } from './parseDA';\nimport { parseTM, TimeInterface } from './parseTM';\nimport dateTimeToFullDateInterface from './dateTimeToFullDateInterface';\n\n/**\n * Calculate start time\n *\n * @export\n * @param {{\n *   RadiopharmaceuticalStartDateTime?: string;\n *   RadiopharmaceuticalStartTime?: string;\n *   SeriesDate?: string;\n * }} input\n * @returns {FullDateInterface}\n */\nexport default function calculateStartTime(input: {\n  RadiopharmaceuticalStartDateTime?: string;\n  RadiopharmaceuticalStartTime?: string;\n  SeriesDate?: string;\n}): FullDateInterface {\n  const {\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate,\n  } = input;\n\n  let time: TimeInterface;\n  let date: DateInterface;\n  if (RadiopharmaceuticalStartDateTime) {\n    return dateTimeToFullDateInterface(RadiopharmaceuticalStartDateTime);\n  } else if (RadiopharmaceuticalStartTime && SeriesDate) {\n    // start Date\tis not explicit - assume\tsame as\tSeries Date;\n    // but consider\tspanning midnight\n    // TODO: do we need some logic to check if the scan went over midnight?\n    time = parseTM(RadiopharmaceuticalStartTime);\n    date = parseDA(SeriesDate);\n\n    return combineDateTime(date, time);\n  }\n\n  throw new Error(`Invalid input: ${input}`);\n}\n\nexport { calculateStartTime };\n","import { FullDateInterface } from './combineDateTime';\nimport { calculateScanTimes } from './calculateScanTimes';\nimport {\n  calculateSUVlbmJanmahasatianScalingFactor,\n  calculateSUVlbmScalingFactor,\n  SUVlbmScalingFactorInput,\n} from './calculateSUVlbmScalingFactor';\nimport {\n  calculateSUVbsaScalingFactor,\n  SUVbsaScalingFactorInput,\n} from './calculateSUVbsaScalingFactor';\nimport { calculateStartTime } from './calculateStartTime';\nimport { InstanceMetadata } from './types';\n\n/**\n * Javascript object containing the SUV and SUL factors.\n * TODO, the result property names may changes\n *\n * @interface ScalingFactorResult\n */\ninterface ScalingFactorResult {\n  suvbw: number;\n  suvlbm?: number;\n  suvlbmJanma?: number;\n  suvbsa?: number;\n}\n\n/**\n * The injected dose used to calculate SUV is corrected for the\n * decay that occurs between the time of injection and the start of the scan\n *\n * @param {InstanceMetadata[]} instances\n * @returns {number[]}\n */\nfunction calculateDecayCorrection(instances: InstanceMetadata[]): number[] {\n  const {\n    RadionuclideTotalDose,\n    RadionuclideHalfLife,\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate,\n  } = instances[0];\n\n  if (RadionuclideTotalDose === undefined || RadionuclideTotalDose === null) {\n    throw new Error(\n      'calculateDecayCorrection : RadionuclideTotalDose value not found.'\n    );\n  }\n\n  if (RadionuclideHalfLife === undefined || RadionuclideHalfLife === null) {\n    throw new Error(\n      'calculateDecayCorrection : RadionuclideHalfLife value not found.'\n    );\n  }\n\n  const scanTimes: FullDateInterface[] = calculateScanTimes(instances);\n  const startTime: FullDateInterface = calculateStartTime({\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate,\n  });\n\n  return instances.map((_, index) => {\n    const scanTime = scanTimes[index];\n    const decayTimeInSec: number =\n      scanTime.getTimeInSec() - startTime.getTimeInSec();\n    if (decayTimeInSec < 0) {\n      throw new Error('Decay time cannot be less than zero');\n    }\n\n    const decayedDose: number =\n      RadionuclideTotalDose *\n      Math.pow(2, -decayTimeInSec / RadionuclideHalfLife);\n\n    return 1 / decayedDose;\n  });\n}\n\n/**\n *\n * @param a Simple value or array of simple values\n * @param b Simple value or array of simple values\n * @returns boolean true if the values are equal.\n */\nconst deepEquals = (\n  a: string | number | any[],\n  b: string | number | any[]\n): boolean => {\n  return (\n    a === b ||\n    (Array.isArray(a) &&\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every((val, index) => val === b[index]))\n  );\n};\n\n/**\n * Calculate the SUV factor\n *\n * Note: Rescale Slope / Intercept must still be applied. These must be applied\n *       on a per-Frame basis, since some scanners may have different values per Frame.\n *\n * @export\n * @param {InstanceMetadata[]} instances\n * @returns {ScalingFactorResult[]}\n */\nexport default function calculateSUVScalingFactors(\n  instances: InstanceMetadata[]\n): ScalingFactorResult[] {\n  const {\n    CorrectedImage,\n    Units,\n    PhilipsPETPrivateGroup,\n    PatientWeight,\n    PatientSex,\n    PatientSize,\n  } = instances[0];\n\n  if (!CorrectedImage.includes('ATTN') || !CorrectedImage.includes('DECY')) {\n    throw new Error(\n      `CorrectedImage must contain \"ATTN\" and \"DECY\": ${CorrectedImage}`\n    );\n  }\n\n  // Sanity check that every instance provided has identical\n  // values for series-level metadata. If not, the provided\n  // data is invalid.\n  const isSingleSeries = instances.every(instance => {\n    return (\n      instance.Units === Units &&\n      deepEquals(instance.CorrectedImage, CorrectedImage) &&\n      instance.PatientWeight === PatientWeight &&\n      instance.PatientSex === PatientSex &&\n      instance.PatientSize === PatientSize &&\n      instance.RadionuclideHalfLife === instances[0].RadionuclideHalfLife &&\n      instance.RadionuclideTotalDose === instances[0].RadionuclideTotalDose &&\n      instance.DecayCorrection === instances[0].DecayCorrection &&\n      instance.SeriesDate === instances[0].SeriesDate &&\n      instance.SeriesTime === instances[0].SeriesTime\n    );\n  });\n\n  if (!isSingleSeries) {\n    throw new Error(\n      'The set of instances does not appear to come from one Series. Every instance must have identical values for series-level metadata properties'\n    );\n  }\n\n  // Treat null, undefined and zero as a missing PatientWeight.\n  if (!PatientWeight) {\n    throw new Error(\n      'PatientWeight value is missing. It is not possible to calculate the SUV factors'\n    );\n  }\n\n  let decayCorrectionArray: number[] = new Array(instances.length);\n  decayCorrectionArray = calculateDecayCorrection(instances);\n\n  let results: number[] = new Array(instances.length);\n  const weightInGrams: number = PatientWeight * 1000;\n\n  if (Units === 'BQML') {\n    results = decayCorrectionArray.map(function(value) {\n      return value * weightInGrams;\n    });\n  } else if (Units === 'CNTS') {\n    const hasValidSUVScaleFactor: boolean = instances.every(instance => {\n      return (\n        instance.PhilipsPETPrivateGroup &&\n        instance.PhilipsPETPrivateGroup?.SUVScaleFactor !== null &&\n        instance.PhilipsPETPrivateGroup?.SUVScaleFactor !== undefined &&\n        instance.PhilipsPETPrivateGroup?.SUVScaleFactor !== 0\n      );\n    });\n\n    const hasValidActivityConcentrationScaleFactor: boolean = instances.every(\n      instance => {\n        return (\n          instance.PhilipsPETPrivateGroup &&\n          !instance.PhilipsPETPrivateGroup?.SUVScaleFactor &&\n          instance.PhilipsPETPrivateGroup?.ActivityConcentrationScaleFactor !==\n            undefined &&\n          instance.PhilipsPETPrivateGroup?.ActivityConcentrationScaleFactor !==\n            0\n        );\n      }\n    );\n\n    //console.log(`hasValidSUVScaleFactor: ${hasValidSUVScaleFactor}`);\n    //console.log(`hasValidActivityConcentrationScaleFactor: ${hasValidActivityConcentrationScaleFactor}`);\n\n    if (hasValidSUVScaleFactor) {\n      results = instances.map(\n        // Added ! to tell Typescript that this can't be undefined, since we are testing it\n        // in the .every loop above.\n        instance => instance.PhilipsPETPrivateGroup!.SUVScaleFactor!\n      );\n    } else if (hasValidActivityConcentrationScaleFactor) {\n      // if (0x7053,0x1000) not present, but (0x7053,0x1009) is present, then (0x7053,0x1009) * Rescale Slope,\n      // scales pixels to Bq/ml, and proceed as if Units are BQML\n      results = instances.map((instance, index) => {\n        // Added ! to tell Typescript that this can't be undefined, since we are testing it\n        // in the .every loop above.\n        return (\n          instance.PhilipsPETPrivateGroup!.ActivityConcentrationScaleFactor! *\n          decayCorrectionArray[index] *\n          weightInGrams\n        );\n      });\n    } else {\n      throw new Error(\n        `Units are in CNTS, but PhilipsPETPrivateGroup has invalid values: ${JSON.stringify(\n          PhilipsPETPrivateGroup\n        )}`\n      );\n    }\n  } else if (Units === 'GML') {\n    // assumes that GML indicates SUVbw instead of SUVlbm\n    results.fill(1);\n  } else {\n    throw new Error(`Units has an invalid value: ${Units}`);\n  }\n\n  // get BSA\n  let suvbsaFactor: number | undefined;\n  if (PatientSize === null || PatientSize === undefined) {\n    console.warn(\n      'PatientSize value is missing. It is not possible to calculate the SUV bsa factors'\n    );\n  } else {\n    const sulInputs: SUVbsaScalingFactorInput = {\n      PatientWeight,\n      PatientSize,\n    };\n\n    suvbsaFactor = calculateSUVbsaScalingFactor(sulInputs);\n  }\n\n  // get LBM\n  let suvlbmFactor: number | undefined;\n  let suvlbmJenmaFactor: number | undefined;\n  if (PatientSize === null || PatientSize === undefined) {\n    console.warn(\n      'PatientSize value is missing. It is not possible to calculate the SUV lbm factors'\n    );\n  } else if (PatientSex === null || PatientSex === undefined) {\n    console.warn(\n      'PatientSex value is missing. It is not possible to calculate the SUV lbm factors'\n    );\n  } else {\n    const suvlbmInputs: SUVlbmScalingFactorInput = {\n      PatientWeight,\n      PatientSex,\n      PatientSize,\n    };\n\n    suvlbmFactor = calculateSUVlbmScalingFactor(suvlbmInputs);\n    suvlbmJenmaFactor = calculateSUVlbmJanmahasatianScalingFactor(suvlbmInputs);\n  }\n\n  return results.map(function(result, index) {\n    const factors: ScalingFactorResult = {\n      suvbw: result,\n    };\n\n    if (suvbsaFactor) {\n      // multiply for BSA\n      factors.suvbsa = decayCorrectionArray[index] * suvbsaFactor;\n    }\n\n    if (suvlbmFactor) {\n      // multiply for LBM\n      factors.suvlbm = decayCorrectionArray[index] * suvlbmFactor;\n    }\n\n    if (suvlbmJenmaFactor) {\n      factors.suvlbmJanma = decayCorrectionArray[index] * suvlbmJenmaFactor;\n    }\n\n    // factor formulaes taken from:\n    // https://www.medicalconnections.co.uk/kb/calculating-suv-from-pet-images/\n\n    return factors;\n  });\n}\n\nexport { calculateSUVScalingFactors };\n"],"names":["FullDateInterface","constructor","date","fullDate","getTimeInSec","dateString","substring","timeString","yyyy","parseInt","mm","length","undefined","dd","isNaN","Error","dateJS","Date","HH","MM","SS","fractionalStr","FFFFFF","Math","pow","timeInSec","getTime","getTimeInMicroSec","timeInMicroSec","combineDateTime","time","hours","padStart","minutes","seconds","month","day","fractionalSeconds","padEnd","year","fullDateString","daysInMonth","m","y","isValidDate","d","parseDA","parseTM","hh","ss","ffffff","dateTimeToFullDateInterface","dateTime","calculateScanTimes","instances","SeriesDate","SeriesTime","GEPrivatePostInjectionDateTime","results","Array","seriesDate","seriesTime","seriesDateTime","earliestAcquisitionDateTime","timeError","forEach","instance","AcquisitionDate","AcquisitionTime","acquisitionDate","acquisitionTime","acquisitionDateTime","fill","calculateSUVlbmScalingFactor","inputs","PatientSex","PatientWeight","PatientSize","LBM","weightSizeFactor","calculateSUVlbmJanmahasatianScalingFactor","bodyMassIndex","calculateSUVbsaScalingFactor","BSA","calculateStartTime","input","RadiopharmaceuticalStartDateTime","RadiopharmaceuticalStartTime","calculateDecayCorrection","RadionuclideTotalDose","RadionuclideHalfLife","scanTimes","startTime","map","_","index","scanTime","decayTimeInSec","decayedDose","deepEquals","a","b","isArray","every","val","calculateSUVScalingFactors","CorrectedImage","Units","PhilipsPETPrivateGroup","includes","isSingleSeries","DecayCorrection","decayCorrectionArray","weightInGrams","value","hasValidSUVScaleFactor","SUVScaleFactor","hasValidActivityConcentrationScaleFactor","ActivityConcentrationScaleFactor","JSON","stringify","suvbsaFactor","console","warn","sulInputs","suvlbmFactor","suvlbmJenmaFactor","suvlbmInputs","result","factors","suvbw","suvbsa","suvlbm","suvlbmJanma"],"mappings":"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"}