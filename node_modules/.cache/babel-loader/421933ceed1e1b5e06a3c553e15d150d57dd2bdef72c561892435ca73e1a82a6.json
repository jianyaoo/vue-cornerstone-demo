{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nfunction getDefaultSegmentationStateManager() {\n  return defaultSegmentationStateManager;\n}\nfunction getSegmentation(segmentationId) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentation(segmentationId);\n}\nfunction getSegmentations() {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n  return state.segmentations;\n}\nfunction addSegmentation(segmentationInput, suppressEvents) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const segmentation = normalizeSegmentationInput(segmentationInput);\n  segmentationStateManager.addSegmentation(segmentation);\n  if (!suppressEvents) {\n    triggerSegmentationModified(segmentation.segmentationId);\n  }\n}\nfunction getSegmentationRepresentations(toolGroupId) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n}\nfunction getAllSegmentationRepresentations() {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getAllSegmentationRepresentations();\n}\nfunction getToolGroupIdsWithSegmentation(segmentationId) {\n  if (!segmentationId) {\n    throw new Error('getToolGroupIdsWithSegmentation: segmentationId is empty');\n  }\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n  const toolGroupIds = Object.keys(state.toolGroups);\n  const foundToolGroupIds = [];\n  toolGroupIds.forEach(toolGroupId => {\n    const toolGroupSegmentationRepresentations = segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n    toolGroupSegmentationRepresentations.forEach(representation => {\n      if (representation.segmentationId === segmentationId) {\n        foundToolGroupIds.push(toolGroupId);\n      }\n    });\n  });\n  return foundToolGroupIds;\n}\nfunction getToolGroupSpecificConfig(toolGroupId) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getToolGroupSpecificConfig(toolGroupId);\n}\nfunction setToolGroupSpecificConfig(toolGroupId, config, suppressEvents) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationConfig(toolGroupId, config);\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId);\n  }\n}\nfunction setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config, suppressEvents = false) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config);\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n  }\n}\nfunction getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID);\n}\nfunction getSegmentSpecificRepresentationConfig(toolGroupId, segmentationRepresentationUID, segmentIndex) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, segmentIndex);\n}\nfunction setSegmentSpecificRepresentationConfig(toolGroupId, segmentationRepresentationUID, config, suppressEvents = false) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, config);\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n  }\n}\nfunction addSegmentationRepresentation(toolGroupId, segmentationRepresentation, suppressEvents) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addSegmentationRepresentation(toolGroupId, segmentationRepresentation);\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentation.segmentationRepresentationUID);\n  }\n}\nfunction getGlobalConfig() {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getGlobalConfig();\n}\nfunction setGlobalConfig(config, suppressEvents) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setGlobalConfig(config);\n  if (!suppressEvents) {\n    triggerSegmentationModified();\n  }\n}\nfunction getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n}\nfunction removeSegmentation(segmentationId) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentation(segmentationId);\n  triggerSegmentationRemoved(segmentationId);\n}\nfunction removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID);\n  triggerSegmentationRepresentationRemoved(toolGroupId, segmentationRepresentationUID);\n}\nfunction removeSegmentationRepresentations(toolGroupId) {\n  const segmentationRepresentations = getSegmentationRepresentations(toolGroupId) || [];\n  segmentationRepresentations.forEach(representation => {\n    removeSegmentationRepresentation(toolGroupId, representation.segmentationRepresentationUID);\n  });\n}\nfunction removeColorLUT(colorLUTIndex) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\nfunction getColorLUT(index) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getColorLUT(index);\n}\nfunction getNextColorLUTIndex() {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getNextColorLUTIndex();\n}\nfunction addColorLUT(colorLUT, index) {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addColorLUT(colorLUT, index);\n}\nexport { getDefaultSegmentationStateManager, getSegmentation, getSegmentations, addSegmentation, removeSegmentation, getSegmentationRepresentations, addSegmentationRepresentation, removeSegmentationRepresentation, removeSegmentationRepresentations, getToolGroupSpecificConfig, setToolGroupSpecificConfig, getGlobalConfig, setGlobalConfig, getSegmentationRepresentationSpecificConfig, setSegmentationRepresentationSpecificConfig, getSegmentSpecificRepresentationConfig, setSegmentSpecificRepresentationConfig, getToolGroupIdsWithSegmentation, getAllSegmentationRepresentations, getSegmentationRepresentationByUID, addColorLUT, getColorLUT, getNextColorLUTIndex, removeColorLUT };","map":{"version":3,"names":["defaultSegmentationStateManager","triggerSegmentationModified","triggerSegmentationRemoved","triggerSegmentationRepresentationModified","triggerSegmentationRepresentationRemoved","normalizeSegmentationInput","getDefaultSegmentationStateManager","getSegmentation","segmentationId","segmentationStateManager","getSegmentations","state","getState","segmentations","addSegmentation","segmentationInput","suppressEvents","segmentation","getSegmentationRepresentations","toolGroupId","getAllSegmentationRepresentations","getToolGroupIdsWithSegmentation","Error","toolGroupIds","Object","keys","toolGroups","foundToolGroupIds","forEach","toolGroupSegmentationRepresentations","representation","push","getToolGroupSpecificConfig","setToolGroupSpecificConfig","config","setSegmentationRepresentationConfig","setSegmentationRepresentationSpecificConfig","segmentationRepresentationUID","getSegmentationRepresentationSpecificConfig","getSegmentSpecificRepresentationConfig","segmentIndex","getSegmentSpecificConfig","setSegmentSpecificRepresentationConfig","setSegmentSpecificConfig","addSegmentationRepresentation","segmentationRepresentation","getGlobalConfig","setGlobalConfig","getSegmentationRepresentationByUID","removeSegmentation","removeSegmentationRepresentation","removeSegmentationRepresentations","segmentationRepresentations","removeColorLUT","colorLUTIndex","getColorLUT","index","getNextColorLUTIndex","addColorLUT","colorLUT"],"sources":["../../../../src/stateManagement/segmentation/segmentationState.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}