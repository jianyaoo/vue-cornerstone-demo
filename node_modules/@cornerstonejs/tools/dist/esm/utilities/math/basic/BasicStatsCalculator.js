import Calculator from './Calculator';
export default class BasicStatsCalculator extends Calculator {
    static { this.max = [-Infinity]; }
    static { this.sum = [0]; }
    static { this.sumSquares = [0]; }
    static { this.squaredDiffSum = [0]; }
    static { this.count = 0; }
    static { this.statsCallback = ({ value: newValue }) => {
        if (Array.isArray(newValue) &&
            newValue.length > 1 &&
            this.max.length === 1) {
            this.max.push(this.max[0], this.max[0]);
            this.sum.push(this.sum[0], this.sum[0]);
            this.sumSquares.push(this.sumSquares[0], this.sumSquares[0]);
            this.squaredDiffSum.push(this.squaredDiffSum[0], this.squaredDiffSum[0]);
        }
        const newArray = Array.isArray(newValue) ? newValue : [newValue];
        this.count += 1;
        this.max.forEach((it, idx) => (this.max[idx] = Math.max(it, newArray[idx])));
        this.sum.map((it, idx) => (this.sum[idx] += newArray[idx]));
        this.sumSquares.map((it, idx) => (this.sumSquares[idx] += newArray[idx] ** 2));
        this.squaredDiffSum.map((it, idx) => (this.squaredDiffSum[idx] += Math.pow(newArray[idx] - this.sum[idx] / this.count, 2)));
    }; }
    static { this.getStatistics = () => {
        const mean = this.sum.map((sum) => sum / this.count);
        const stdDev = this.squaredDiffSum.map((squaredDiffSum) => Math.sqrt(squaredDiffSum / this.count));
        const stdDevWithSumSquare = this.sumSquares.map((it, idx) => Math.sqrt(this.sumSquares[idx] / this.count - mean[idx] ** 2));
        const named = {
            max: {
                name: 'max',
                label: 'Max Pixel',
                value: singleArrayAsNumber(this.max),
                unit: null,
            },
            mean: {
                name: 'mean',
                label: 'Mean Pixel',
                value: singleArrayAsNumber(mean),
                unit: null,
            },
            stdDev: {
                name: 'stdDev',
                label: 'Standard Deviation',
                value: singleArrayAsNumber(stdDev),
                unit: null,
            },
            stdDevWithSumSquare: {
                name: 'stdDevWithSumSquare',
                value: singleArrayAsNumber(stdDevWithSumSquare),
                unit: null,
            },
            count: {
                name: 'count',
                label: 'Pixel Count',
                value: this.count,
                unit: null,
            },
            array: [],
        };
        named.array.push(named.max, named.mean, named.stdDev, named.stdDevWithSumSquare, named.count);
        this.max = [-Infinity];
        this.sum = [0];
        this.sumSquares = [0];
        this.squaredDiffSum = [0];
        this.count = 0;
        return named;
    }; }
}
function singleArrayAsNumber(val) {
    return val.length === 1 ? val[0] : val;
}
//# sourceMappingURL=BasicStatsCalculator.js.map