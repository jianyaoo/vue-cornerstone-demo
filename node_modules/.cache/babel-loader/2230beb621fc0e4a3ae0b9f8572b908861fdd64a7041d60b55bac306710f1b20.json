{"ast":null,"code":"import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = volume => !!getVolumeLoaderSchemes().find(scheme => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetVolumeId, useSlabThickness = false) {\n  const {\n    viewPlaneNormal\n  } = camera;\n  const volumeActors = viewport.getActors();\n  if (!volumeActors || !volumeActors.length) {\n    return {\n      spacingInNormalDirection: null,\n      imageVolume: null,\n      actorUID: null\n    };\n  }\n  const imageVolumes = volumeActors.map(va => {\n    const actorUID = va.referenceId ?? va.uid;\n    return cache.getVolume(actorUID);\n  }).filter(iv => !!iv);\n  if (targetVolumeId) {\n    const imageVolumeIndex = imageVolumes.findIndex(iv => iv.volumeId === targetVolumeId);\n    const imageVolume = imageVolumes[imageVolumeIndex];\n    const {\n      uid: actorUID\n    } = volumeActors[imageVolumeIndex];\n    const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n    return {\n      imageVolume,\n      spacingInNormalDirection,\n      actorUID\n    };\n  }\n  if (!imageVolumes.length) {\n    return {\n      spacingInNormalDirection: null,\n      imageVolume: null,\n      actorUID: null\n    };\n  }\n  const smallest = {\n    spacingInNormalDirection: Infinity,\n    imageVolume: null,\n    actorUID: null\n  };\n  const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n  for (let i = 0; i < imageVolumes.length; i++) {\n    const imageVolume = imageVolumes[i];\n    if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n      continue;\n    }\n    const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n    if (spacingInNormalDirection * EPSILON_PART < smallest.spacingInNormalDirection) {\n      smallest.spacingInNormalDirection = spacingInNormalDirection;\n      smallest.imageVolume = imageVolume;\n      smallest.actorUID = volumeActors[i].uid;\n    }\n  }\n  return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n  const {\n    slabThickness\n  } = viewport.getProperties();\n  let spacingInNormalDirection = slabThickness;\n  if (!slabThickness || useSlabThickness === false) {\n    spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n  }\n  return spacingInNormalDirection;\n}","map":{"version":3,"names":["cache","EPSILON","getSpacingInNormalDirection","getVolumeLoaderSchemes","EPSILON_PART","startsWith","str","starts","substring","Math","min","length","isPrimaryVolume","volume","find","scheme","volumeId","getTargetVolumeAndSpacingInNormalDir","viewport","camera","targetVolumeId","useSlabThickness","viewPlaneNormal","volumeActors","getActors","spacingInNormalDirection","imageVolume","actorUID","imageVolumes","map","va","referenceId","uid","getVolume","filter","iv","imageVolumeIndex","findIndex","getSpacingInNormal","smallest","Infinity","hasPrimaryVolume","i","slabThickness","getProperties"],"sources":["../../../src/utilities/getTargetVolumeAndSpacingInNormalDir.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,KAAK,MAAM,gBAAgB;AAClC,SAASC,OAAO,QAAQ,cAAc;AAGtC,OAAOC,2BAA2B,MAAM,+BAA+B;AACvE,SAASC,sBAAsB,QAAQ,yBAAyB;AAGhE,MAAMC,YAAY,GAAG,CAAC,GAAGH,OAAO;AAEhC,MAAMI,UAAU,GAAGA,CAACC,GAAG,EAAEC,MAAM,KAC7BA,MAAM,KAAKD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAACJ,GAAG,CAACK,MAAM,EAAEJ,MAAM,CAACI,MAAM,CAAC,CAAC;AAKlE,MAAMC,eAAe,GAAIC,MAAM,IAC7B,CAAC,CAACV,sBAAsB,EAAE,CAACW,IAAI,CAAEC,MAAM,IACrCV,UAAU,CAACQ,MAAM,CAACG,QAAQ,EAAED,MAAM,CAAC,CACpC;AAkBH,eAAc,SAAUE,oCAAoCA,CAC1DC,QAAyB,EACzBC,MAAe,EACfC,cAAuB,EACvBC,gBAAgB,GAAG,KAAK;EAMxB,MAAM;IAAEC;EAAe,CAAE,GAAGH,MAAM;EAClC,MAAMI,YAAY,GAAGL,QAAQ,CAACM,SAAS,EAAE;EAEzC,IAAI,CAACD,YAAY,IAAI,CAACA,YAAY,CAACZ,MAAM,EAAE;IACzC,OAAO;MACLc,wBAAwB,EAAE,IAAI;MAC9BC,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAE;KACX;;EAGH,MAAMC,YAAY,GAAGL,YAAY,CAC9BM,GAAG,CAAEC,EAAE,IAAI;IAGV,MAAMH,QAAQ,GAAGG,EAAE,CAACC,WAAW,IAAID,EAAE,CAACE,GAAG;IACzC,OAAOhC,KAAK,CAACiC,SAAS,CAACN,QAAQ,CAAC;EAClC,CAAC,CAAC,CACDO,MAAM,CAAEC,EAAE,IAAK,CAAC,CAACA,EAAE,CAAC;EAGvB,IAAIf,cAAc,EAAE;IAClB,MAAMgB,gBAAgB,GAAGR,YAAY,CAACS,SAAS,CAC5CF,EAAE,IAAKA,EAAE,CAACnB,QAAQ,KAAKI,cAAc,CACvC;IAED,MAAMM,WAAW,GAAGE,YAAY,CAACQ,gBAAgB,CAAC;IAClD,MAAM;MAAEJ,GAAG,EAAEL;IAAQ,CAAE,GAAGJ,YAAY,CAACa,gBAAgB,CAAC;IAExD,MAAMX,wBAAwB,GAAGa,kBAAkB,CACjDZ,WAAW,EACXJ,eAAe,EACfJ,QAAQ,EACRG,gBAAgB,CACjB;IAED,OAAO;MAAEK,WAAW;MAAED,wBAAwB;MAAEE;IAAQ,CAAE;;EAG5D,IAAI,CAACC,YAAY,CAACjB,MAAM,EAAE;IACxB,OAAO;MACLc,wBAAwB,EAAE,IAAI;MAC9BC,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAE;KACX;;EAIH,MAAMY,QAAQ,GAAG;IACfd,wBAAwB,EAAEe,QAAQ;IAClCd,WAAW,EAAE,IAAI;IACjBC,QAAQ,EAAE;GACX;EAED,MAAMc,gBAAgB,GAAGb,YAAY,CAACd,IAAI,CAACF,eAAe,CAAC;EAE3D,KAAK,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,YAAY,CAACjB,MAAM,EAAE+B,CAAC,EAAE,EAAE;IAC5C,MAAMhB,WAAW,GAAGE,YAAY,CAACc,CAAC,CAAC;IAEnC,IAAID,gBAAgB,IAAI,CAAC7B,eAAe,CAACc,WAAW,CAAC,EAAE;MAErD;;IAGF,MAAMD,wBAAwB,GAAGa,kBAAkB,CACjDZ,WAAW,EACXJ,eAAe,EACfJ,QAAQ,CACT;IAKD,IACEO,wBAAwB,GAAGrB,YAAY,GACvCmC,QAAQ,CAACd,wBAAwB,EACjC;MACAc,QAAQ,CAACd,wBAAwB,GAAGA,wBAAwB;MAC5Dc,QAAQ,CAACb,WAAW,GAAGA,WAAW;MAClCa,QAAQ,CAACZ,QAAQ,GAAGJ,YAAY,CAACmB,CAAC,CAAC,CAACV,GAAG;;;EAI3C,OAAOO,QAAQ;AACjB;AAEA,SAASD,kBAAkBA,CACzBZ,WAAyB,EACzBJ,eAAuB,EACvBJ,QAAyB,EACzBG,gBAAgB,GAAG,KAAK;EAExB,MAAM;IAAEsB;EAAa,CAAE,GAAGzB,QAAQ,CAAC0B,aAAa,EAAE;EAClD,IAAInB,wBAAwB,GAAGkB,aAAa;EAC5C,IAAI,CAACA,aAAa,IAAItB,gBAAgB,KAAK,KAAK,EAAE;IAChDI,wBAAwB,GAAGvB,2BAA2B,CACpDwB,WAAW,EACXJ,eAAe,CAChB;;EAGH,OAAOG,wBAAwB;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}