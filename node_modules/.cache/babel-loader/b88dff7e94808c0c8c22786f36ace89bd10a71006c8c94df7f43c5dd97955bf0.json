{"ast":null,"code":"import { Enums, utilities } from '@cornerstonejs/core';\nconst {\n  CalibrationTypes\n} = Enums;\nconst PIXEL_UNITS = 'px';\nconst SUPPORTED_REGION_DATA_TYPES = [1];\nconst SUPPORTED_LENGTH_VARIANT = ['3,3'];\nconst SUPPORTED_PROBE_VARIANT = ['4,3'];\nconst UNIT_MAPPING = {\n  3: 'cm',\n  4: 'seconds'\n};\nconst EPS = 1e-3;\nconst getCalibratedLengthUnits = (handles, image) => {\n  const {\n    calibration,\n    hasPixelSpacing\n  } = image;\n  const units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n  if (!calibration || !calibration.type && !calibration.sequenceOfUltrasoundRegions) {\n    return units;\n  }\n  if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n    return PIXEL_UNITS;\n  }\n  if (calibration.sequenceOfUltrasoundRegions) {\n    return 'US Region';\n  }\n  return `${units} ${calibration.type}`;\n};\nconst SQUARE = '\\xb2';\nconst getCalibratedAreaUnits = (handles, image) => {\n  const {\n    calibration,\n    hasPixelSpacing\n  } = image;\n  const units = (hasPixelSpacing ? 'mm' : PIXEL_UNITS) + SQUARE;\n  if (!calibration || !calibration.type) {\n    return units;\n  }\n  if (calibration.sequenceOfUltrasoundRegions) {\n    return 'US Region';\n  }\n  return `${units} ${calibration.type}`;\n};\nconst getCalibratedScale = (image, handles = []) => {\n  if (image.calibration?.sequenceOfUltrasoundRegions) {} else if (image.calibration?.scale) {\n    return image.calibration.scale;\n  } else {\n    return 1;\n  }\n};\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n  const [imageIndex1, imageIndex2] = handles;\n  const {\n    calibration,\n    hasPixelSpacing\n  } = image;\n  let units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n  const areaUnits = units + SQUARE;\n  let scale = 1;\n  let calibrationType = '';\n  if (!calibration || !calibration.type && !calibration.sequenceOfUltrasoundRegions) {\n    return {\n      units,\n      areaUnits,\n      scale\n    };\n  }\n  if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n    return {\n      units: PIXEL_UNITS,\n      areaUnits: PIXEL_UNITS + SQUARE,\n      scale\n    };\n  }\n  if (calibration.sequenceOfUltrasoundRegions) {\n    let regions = calibration.sequenceOfUltrasoundRegions.filter(region => imageIndex1[0] >= region.regionLocationMinX0 && imageIndex1[0] <= region.regionLocationMaxX1 && imageIndex1[1] >= region.regionLocationMinY0 && imageIndex1[1] <= region.regionLocationMaxY1 && imageIndex2[0] >= region.regionLocationMinX0 && imageIndex2[0] <= region.regionLocationMaxX1 && imageIndex2[1] >= region.regionLocationMinY0 && imageIndex2[1] <= region.regionLocationMaxY1);\n    if (!regions?.length) {\n      return {\n        units,\n        areaUnits,\n        scale\n      };\n    }\n    regions = regions.filter(region => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) && SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitXDirection},${region.physicalUnitYDirection}`));\n    if (!regions.length) {\n      return {\n        units: PIXEL_UNITS,\n        areaUnits: PIXEL_UNITS + SQUARE,\n        scale\n      };\n    }\n    const region = regions[0];\n    const physicalDeltaX = Math.abs(region.physicalDeltaX);\n    const physicalDeltaY = Math.abs(region.physicalDeltaY);\n    const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n    if (isSamePhysicalDelta) {\n      scale = 1 / (physicalDeltaX * physicalDeltaY * 100);\n      calibrationType = 'US Region';\n      units = 'mm';\n    } else {\n      return {\n        units: PIXEL_UNITS,\n        areaUnits: PIXEL_UNITS + SQUARE,\n        scale\n      };\n    }\n  } else if (calibration.scale) {\n    scale = calibration.scale;\n  }\n  return {\n    units: units + (calibrationType ? ` ${calibrationType}` : ''),\n    areaUnits: areaUnits + (calibrationType ? ` ${calibrationType}` : ''),\n    scale\n  };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n  const [imageIndex] = handles;\n  const {\n    calibration\n  } = image;\n  let units = ['raw'];\n  let values = [null];\n  let calibrationType = '';\n  if (!calibration || !calibration.type && !calibration.sequenceOfUltrasoundRegions) {\n    return {\n      units,\n      values\n    };\n  }\n  if (calibration.sequenceOfUltrasoundRegions) {\n    const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter(region => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) && SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitXDirection},${region.physicalUnitYDirection}`));\n    if (!supportedRegionsMetadata?.length) {\n      return {\n        units,\n        values\n      };\n    }\n    const region = supportedRegionsMetadata.find(region => imageIndex[0] >= region.regionLocationMinX0 && imageIndex[0] <= region.regionLocationMaxX1 && imageIndex[1] >= region.regionLocationMinY0 && imageIndex[1] <= region.regionLocationMaxY1);\n    if (!region) {\n      return {\n        units,\n        values\n      };\n    }\n    const {\n      referencePixelX0 = 0,\n      referencePixelY0 = 0\n    } = region;\n    const {\n      physicalDeltaX,\n      physicalDeltaY\n    } = region;\n    const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) * physicalDeltaY;\n    const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) * physicalDeltaX;\n    calibrationType = 'US Region';\n    values = [xValue, yValue];\n    units = [UNIT_MAPPING[region.physicalUnitXDirection], UNIT_MAPPING[region.physicalUnitYDirection]];\n  }\n  return {\n    units,\n    values,\n    calibrationType\n  };\n};\nconst getCalibratedAspect = image => image.calibration?.aspect || 1;\nexport default getCalibratedLengthUnits;\nexport { getCalibratedAreaUnits, getCalibratedLengthUnits, getCalibratedLengthUnitsAndScale, getCalibratedScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue };","map":{"version":3,"names":["Enums","utilities","CalibrationTypes","PIXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","EPS","getCalibratedLengthUnits","handles","image","calibration","hasPixelSpacing","units","type","sequenceOfUltrasoundRegions","UNCALIBRATED","SQUARE","getCalibratedAreaUnits","getCalibratedScale","scale","getCalibratedLengthUnitsAndScale","imageIndex1","imageIndex2","areaUnits","calibrationType","regions","filter","region","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","length","includes","regionDataType","physicalUnitXDirection","physicalUnitYDirection","physicalDeltaX","Math","abs","physicalDeltaY","isSamePhysicalDelta","isEqual","getCalibratedProbeUnitsAndValue","imageIndex","values","supportedRegionsMetadata","find","referencePixelX0","referencePixelY0","yValue","xValue","getCalibratedAspect","aspect"],"sources":["../../../src/utilities/getCalibratedUnits.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}