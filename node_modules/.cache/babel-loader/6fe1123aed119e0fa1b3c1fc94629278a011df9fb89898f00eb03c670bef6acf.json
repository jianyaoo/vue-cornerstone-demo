{"ast":null,"code":"import { cache, getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\nimport { getActiveSegmentation, getActiveSegmentationRepresentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport RepresentationTypes from '../../enums/SegmentationRepresentations';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nclass SegmentSelectTool extends BaseTool {\n  constructor(toolProps = {}, defaultToolProps = {\n    supportedInteractionTypes: ['Mouse', 'Touch'],\n    configuration: {\n      hoverTimeout: 750\n    }\n  }) {\n    super(toolProps, defaultToolProps);\n    this.mouseMoveCallback = evt => {\n      if (this.hoverTimer) {\n        clearTimeout(this.hoverTimer);\n      }\n      this.hoverTimer = setTimeout(() => {\n        this._setActiveSegment(evt);\n        this.hoverTimer = null;\n      }, this.configuration.hoverTimeout);\n      return true;\n    };\n    this.onSetToolEnabled = () => {\n      this.onSetToolActive();\n    };\n    this.onSetToolActive = () => {\n      this.hoverTimer = null;\n    };\n    this.onSetToolDisabled = () => {\n      this.hoverTimer = null;\n    };\n    this.hoverTimer = null;\n  }\n  _setActiveSegment(evt = {}) {\n    const {\n      element,\n      currentPoints\n    } = evt.detail;\n    const worldPoint = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n      return;\n    }\n    const {\n      viewport\n    } = enabledElement;\n    const activeSegmentation = getActiveSegmentation(this.toolGroupId);\n    if (activeSegmentation.type === RepresentationTypes.Labelmap) {\n      this._setActiveSegmentLabelmap(activeSegmentation, worldPoint, viewport);\n    } else {\n      throw Error('non-labelmap segmentation not supported yet');\n    }\n  }\n  _setActiveSegmentLabelmap(activeSegmentation, worldPoint, viewport) {\n    const imageDataInfo = viewport.getImageData();\n    if (!imageDataInfo) {\n      return;\n    }\n    const labelmapData = activeSegmentation.representationData.LABELMAP;\n    let hoveredSegmentIndex;\n    if (isVolumeSegmentation(activeSegmentation.representationData.LABELMAP)) {\n      const {\n        volumeId\n      } = labelmapData;\n      const segmentationVolume = cache.getVolume(volumeId);\n      if (!segmentationVolume) {\n        return;\n      }\n      hoveredSegmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n    } else {\n      const {\n        imageIdReferenceMap\n      } = labelmapData;\n      const currentImageId = viewport.getCurrentImageId();\n      const segmentationImageId = imageIdReferenceMap.get(currentImageId);\n      const image = cache.getImage(segmentationImageId);\n      if (!image) {\n        return;\n      }\n      const activeSegmentationRepresentation = getActiveSegmentationRepresentation(this.toolGroupId);\n      if (!activeSegmentationRepresentation) {\n        return;\n      }\n      const segmentationActor = viewport.getActor(activeSegmentationRepresentation.segmentationRepresentationUID);\n      const imageData = segmentationActor?.actor.getMapper().getInputData();\n      const indexIJK = csUtils.transformWorldToIndex(imageData, worldPoint);\n      const flattenedIndex = indexIJK[0] + indexIJK[1] * image.columns;\n      const scalars = imageData.getPointData().getScalars().getData();\n      hoveredSegmentIndex = scalars[flattenedIndex];\n    }\n    if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n      return;\n    }\n    setActiveSegmentIndex(activeSegmentation.segmentationId, hoveredSegmentIndex);\n    const renderingEngine = viewport.getRenderingEngine();\n    triggerSegmentationModified(activeSegmentation.segmentationId);\n    triggerAnnotationRenderForViewportIds(renderingEngine, renderingEngine.getViewports().map(v => v.id));\n  }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;","map":{"version":3,"names":["cache","getEnabledElement","utilities","csUtils","BaseTool","triggerSegmentationModified","triggerAnnotationRenderForViewportIds","isVolumeSegmentation","getActiveSegmentation","getActiveSegmentationRepresentation","RepresentationTypes","setActiveSegmentIndex","SegmentSelectTool","constructor","toolProps","defaultToolProps","supportedInteractionTypes","configuration","hoverTimeout","mouseMoveCallback","evt","hoverTimer","clearTimeout","setTimeout","_setActiveSegment","onSetToolEnabled","onSetToolActive","onSetToolDisabled","element","currentPoints","detail","worldPoint","world","enabledElement","viewport","activeSegmentation","toolGroupId","type","Labelmap","_setActiveSegmentLabelmap","Error","imageDataInfo","getImageData","labelmapData","representationData","LABELMAP","hoveredSegmentIndex","volumeId","segmentationVolume","getVolume","imageData","getScalarValueFromWorld","imageIdReferenceMap","currentImageId","getCurrentImageId","segmentationImageId","get","image","getImage","activeSegmentationRepresentation","segmentationActor","getActor","segmentationRepresentationUID","actor","getMapper","getInputData","indexIJK","transformWorldToIndex","flattenedIndex","columns","scalars","getPointData","getScalars","getData","segmentationId","renderingEngine","getRenderingEngine","getViewports","map","v","id","toolName"],"sources":["../../../../src/tools/segmentation/SegmentSelectTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}