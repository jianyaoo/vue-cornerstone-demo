{"ast":null,"code":"import { m as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// ----------------------------------------------------------------------------\n// vtkCylinderSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCylinderSource(publicAPI, model) {\n  // Set our classname\n  model.classHierarchy.push('vtkCylinderSource');\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    let dataset = outData[0];\n    const angle = 2.0 * Math.PI / model.resolution;\n    let numberOfPoints = 2 * model.resolution;\n    let numberOfPolys = 5 * model.resolution;\n    if (model.capping) {\n      numberOfPoints = 4 * model.resolution;\n      numberOfPolys = 7 * model.resolution + 2;\n    }\n\n    // Points\n    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n\n    // Cells\n    let cellLocation = 0;\n    const polys = new Uint32Array(numberOfPolys);\n\n    // Normals\n    const normalsData = new Float32Array(numberOfPoints * 3);\n    const normals = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: normalsData,\n      name: 'Normals'\n    });\n\n    // Texture coords\n    const tcData = new Float32Array(numberOfPoints * 2);\n    const tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcData,\n      name: 'TCoords'\n    });\n\n    // Generate points for all sides\n    const nbot = [0.0, 0.0, 0.0];\n    const ntop = [0.0, 0.0, 0.0];\n    const xbot = [0.0, 0.0, 0.0];\n    const xtop = [0.0, 0.0, 0.0];\n    const tcbot = [0.0, 0.0];\n    const tctop = [0.0, 0.0];\n    const otherRadius = model.otherRadius == null ? model.radius : model.otherRadius;\n    for (let i = 0; i < model.resolution; i++) {\n      // x coordinate\n      nbot[0] = Math.cos(i * angle + model.initAngle);\n      ntop[0] = nbot[0];\n      xbot[0] = model.radius * nbot[0] + model.center[0];\n      xtop[0] = xbot[0];\n      tcbot[0] = Math.abs(2.0 * i / model.resolution - 1.0);\n      tctop[0] = tcbot[0];\n\n      // y coordinate\n      xbot[1] = 0.5 * model.height + model.center[1];\n      xtop[1] = -0.5 * model.height + model.center[1];\n      tcbot[1] = 0.0;\n      tctop[1] = 1.0;\n\n      // z coordinate\n      nbot[2] = -Math.sin(i * angle + model.initAngle);\n      ntop[2] = nbot[2];\n      xbot[2] = otherRadius * nbot[2] + model.center[2];\n      xtop[2] = xbot[2];\n      const pointIdx = 2 * i;\n      for (let j = 0; j < 3; j++) {\n        normalsData[pointIdx * 3 + j] = nbot[j];\n        normalsData[(pointIdx + 1) * 3 + j] = ntop[j];\n        points[pointIdx * 3 + j] = xbot[j];\n        points[(pointIdx + 1) * 3 + j] = xtop[j];\n        if (j < 2) {\n          tcData[pointIdx * 2 + j] = tcbot[j];\n          tcData[(pointIdx + 1) * 2 + j] = tctop[j];\n        }\n      }\n    }\n\n    // Generate polygons for sides\n    for (let i = 0; i < model.resolution; i++) {\n      polys[cellLocation++] = 4;\n      polys[cellLocation++] = 2 * i;\n      polys[cellLocation++] = 2 * i + 1;\n      const pt = (2 * i + 3) % (2 * model.resolution);\n      polys[cellLocation++] = pt;\n      polys[cellLocation++] = pt - 1;\n    }\n    if (model.capping) {\n      // Generate points for top/bottom polygons\n      for (let i = 0; i < model.resolution; i++) {\n        // x coordinate\n        xbot[0] = model.radius * Math.cos(i * angle + model.initAngle);\n        xtop[0] = xbot[0];\n        tcbot[0] = xbot[0];\n        tctop[0] = xbot[0];\n        xbot[0] += model.center[0];\n        xtop[0] += model.center[0];\n\n        // y coordinate\n        nbot[1] = 1.0;\n        ntop[1] = -1.0;\n        xbot[1] = 0.5 * model.height + model.center[1];\n        xtop[1] = -0.5 * model.height + model.center[1];\n\n        // z coordinate\n        xbot[2] = -otherRadius * Math.sin(i * angle + model.initAngle);\n        xtop[2] = xbot[2];\n        tcbot[1] = xbot[2];\n        tctop[1] = xbot[2];\n        xbot[2] += model.center[2];\n        xtop[2] += model.center[2];\n        const botIdx = 2 * model.resolution + i;\n        const topIdx = 3 * model.resolution + model.resolution - i - 1;\n        for (let j = 0; j < 3; j++) {\n          normalsData[3 * botIdx + j] = nbot[j];\n          normalsData[3 * topIdx + j] = ntop[j];\n          points[3 * botIdx + j] = xbot[j];\n          points[3 * topIdx + j] = xtop[j];\n          if (j < 2) {\n            tcData[2 * botIdx + j] = tcbot[j];\n            tcData[2 * topIdx + j] = tctop[j];\n          }\n        }\n      }\n\n      // Generate polygons for top/bottom\n      polys[cellLocation++] = model.resolution;\n      for (let i = 0; i < model.resolution; i++) {\n        polys[cellLocation++] = 2 * model.resolution + i;\n      }\n      polys[cellLocation++] = model.resolution;\n      for (let i = 0; i < model.resolution; i++) {\n        polys[cellLocation++] = 3 * model.resolution + i;\n      }\n    }\n\n    // Apply transformation to the points coordinates\n    vtkMatrixBuilder.buildFromRadian().translate(...model.center).rotateFromDirections([0, 1, 0], model.direction).translate(...model.center.map(c => c * -1)).apply(points);\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1);\n    dataset.getPointData().setNormals(normals);\n    dataset.getPointData().setTCoords(tcoords);\n\n    // Update output\n    outData[0] = dataset;\n  }\n\n  // Expose methods\n  publicAPI.requestData = requestData;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  height: 1.0,\n  initAngle: 0,\n  radius: 1.0,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [0.0, 1.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'initAngle', 'otherRadius', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCylinderSource(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCylinderSource');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCylinderSource$1 = {\n  newInstance,\n  extend\n};\nexport { vtkCylinderSource$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkDataArray","vtkPolyData","vtkMatrixBuilder","vtkCylinderSource","publicAPI","model","classHierarchy","push","requestData","inData","outData","deleted","dataset","angle","Math","PI","resolution","numberOfPoints","numberOfPolys","capping","points","newTypedArray","pointType","cellLocation","polys","Uint32Array","normalsData","Float32Array","normals","newInstance","numberOfComponents","values","name","tcData","tcoords","nbot","ntop","xbot","xtop","tcbot","tctop","otherRadius","radius","i","cos","initAngle","center","abs","height","sin","pointIdx","j","pt","botIdx","topIdx","buildFromRadian","translate","rotateFromDirections","direction","map","c","apply","getPoints","setData","getPolys","getPointData","setNormals","setTCoords","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","setGet","setGetArray","algo","vtkCylinderSource$1","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Filters/Sources/CylinderSource.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// ----------------------------------------------------------------------------\n// vtkCylinderSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCylinderSource(publicAPI, model) {\n  // Set our classname\n  model.classHierarchy.push('vtkCylinderSource');\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    let dataset = outData[0];\n    const angle = 2.0 * Math.PI / model.resolution;\n    let numberOfPoints = 2 * model.resolution;\n    let numberOfPolys = 5 * model.resolution;\n    if (model.capping) {\n      numberOfPoints = 4 * model.resolution;\n      numberOfPolys = 7 * model.resolution + 2;\n    }\n\n    // Points\n    const points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n\n    // Cells\n    let cellLocation = 0;\n    const polys = new Uint32Array(numberOfPolys);\n\n    // Normals\n    const normalsData = new Float32Array(numberOfPoints * 3);\n    const normals = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: normalsData,\n      name: 'Normals'\n    });\n\n    // Texture coords\n    const tcData = new Float32Array(numberOfPoints * 2);\n    const tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcData,\n      name: 'TCoords'\n    });\n\n    // Generate points for all sides\n    const nbot = [0.0, 0.0, 0.0];\n    const ntop = [0.0, 0.0, 0.0];\n    const xbot = [0.0, 0.0, 0.0];\n    const xtop = [0.0, 0.0, 0.0];\n    const tcbot = [0.0, 0.0];\n    const tctop = [0.0, 0.0];\n    const otherRadius = model.otherRadius == null ? model.radius : model.otherRadius;\n    for (let i = 0; i < model.resolution; i++) {\n      // x coordinate\n      nbot[0] = Math.cos(i * angle + model.initAngle);\n      ntop[0] = nbot[0];\n      xbot[0] = model.radius * nbot[0] + model.center[0];\n      xtop[0] = xbot[0];\n      tcbot[0] = Math.abs(2.0 * i / model.resolution - 1.0);\n      tctop[0] = tcbot[0];\n\n      // y coordinate\n      xbot[1] = 0.5 * model.height + model.center[1];\n      xtop[1] = -0.5 * model.height + model.center[1];\n      tcbot[1] = 0.0;\n      tctop[1] = 1.0;\n\n      // z coordinate\n      nbot[2] = -Math.sin(i * angle + model.initAngle);\n      ntop[2] = nbot[2];\n      xbot[2] = otherRadius * nbot[2] + model.center[2];\n      xtop[2] = xbot[2];\n      const pointIdx = 2 * i;\n      for (let j = 0; j < 3; j++) {\n        normalsData[pointIdx * 3 + j] = nbot[j];\n        normalsData[(pointIdx + 1) * 3 + j] = ntop[j];\n        points[pointIdx * 3 + j] = xbot[j];\n        points[(pointIdx + 1) * 3 + j] = xtop[j];\n        if (j < 2) {\n          tcData[pointIdx * 2 + j] = tcbot[j];\n          tcData[(pointIdx + 1) * 2 + j] = tctop[j];\n        }\n      }\n    }\n\n    // Generate polygons for sides\n    for (let i = 0; i < model.resolution; i++) {\n      polys[cellLocation++] = 4;\n      polys[cellLocation++] = 2 * i;\n      polys[cellLocation++] = 2 * i + 1;\n      const pt = (2 * i + 3) % (2 * model.resolution);\n      polys[cellLocation++] = pt;\n      polys[cellLocation++] = pt - 1;\n    }\n    if (model.capping) {\n      // Generate points for top/bottom polygons\n      for (let i = 0; i < model.resolution; i++) {\n        // x coordinate\n        xbot[0] = model.radius * Math.cos(i * angle + model.initAngle);\n        xtop[0] = xbot[0];\n        tcbot[0] = xbot[0];\n        tctop[0] = xbot[0];\n        xbot[0] += model.center[0];\n        xtop[0] += model.center[0];\n\n        // y coordinate\n        nbot[1] = 1.0;\n        ntop[1] = -1.0;\n        xbot[1] = 0.5 * model.height + model.center[1];\n        xtop[1] = -0.5 * model.height + model.center[1];\n\n        // z coordinate\n        xbot[2] = -otherRadius * Math.sin(i * angle + model.initAngle);\n        xtop[2] = xbot[2];\n        tcbot[1] = xbot[2];\n        tctop[1] = xbot[2];\n        xbot[2] += model.center[2];\n        xtop[2] += model.center[2];\n        const botIdx = 2 * model.resolution + i;\n        const topIdx = 3 * model.resolution + model.resolution - i - 1;\n        for (let j = 0; j < 3; j++) {\n          normalsData[3 * botIdx + j] = nbot[j];\n          normalsData[3 * topIdx + j] = ntop[j];\n          points[3 * botIdx + j] = xbot[j];\n          points[3 * topIdx + j] = xtop[j];\n          if (j < 2) {\n            tcData[2 * botIdx + j] = tcbot[j];\n            tcData[2 * topIdx + j] = tctop[j];\n          }\n        }\n      }\n\n      // Generate polygons for top/bottom\n      polys[cellLocation++] = model.resolution;\n      for (let i = 0; i < model.resolution; i++) {\n        polys[cellLocation++] = 2 * model.resolution + i;\n      }\n      polys[cellLocation++] = model.resolution;\n      for (let i = 0; i < model.resolution; i++) {\n        polys[cellLocation++] = 3 * model.resolution + i;\n      }\n    }\n\n    // Apply transformation to the points coordinates\n    vtkMatrixBuilder.buildFromRadian().translate(...model.center).rotateFromDirections([0, 1, 0], model.direction).translate(...model.center.map(c => c * -1)).apply(points);\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1);\n    dataset.getPointData().setNormals(normals);\n    dataset.getPointData().setTCoords(tcoords);\n\n    // Update output\n    outData[0] = dataset;\n  }\n\n  // Expose methods\n  publicAPI.requestData = requestData;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  height: 1.0,\n  initAngle: 0,\n  radius: 1.0,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [0.0, 1.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'initAngle', 'otherRadius', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCylinderSource(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCylinderSource');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCylinderSource$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkCylinderSource$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}