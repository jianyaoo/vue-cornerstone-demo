{"ast":null,"code":"import { m as macro } from '../../macros2.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkLookupTable from '../../Common/Core/LookupTable.js';\nimport Constants from './Mapper/Constants.js';\nconst {\n  ColorMode,\n  ScalarMode,\n  GetArray\n} = Constants;\n\n// ---------------------------------------------------------------------------\n// vtkMapper2D methods\n// ---------------------------------------------------------------------------\n\nfunction vtkMapper2D(publicAPI, model) {\n  // Set out className\n  model.classHierarchy.push('vtkMapper2D');\n  publicAPI.createDefaultLookupTable = () => {\n    model.lookupTable = vtkLookupTable.newInstance();\n  };\n  publicAPI.getColorModeAsString = () => macro.enumToString(ColorMode, model.colorMode);\n  publicAPI.setColorModeToDefault = () => publicAPI.setColorMode(0);\n  publicAPI.setColorModeToMapScalars = () => publicAPI.setColorMode(1);\n  publicAPI.setColorModeToDirectScalars = () => publicAPI.setColorMode(2);\n  publicAPI.getScalarModeAsString = () => macro.enumToString(ScalarMode, model.scalarMode);\n  publicAPI.setScalarModeToDefault = () => publicAPI.setScalarMode(0);\n  publicAPI.setScalarModeToUsePointData = () => publicAPI.setScalarMode(1);\n  publicAPI.setScalarModeToUseCellData = () => publicAPI.setScalarMode(2);\n  publicAPI.setScalarModeToUsePointFieldData = () => publicAPI.setScalarMode(3);\n  publicAPI.setScalarModeToUseCellFieldData = () => publicAPI.setScalarMode(4);\n  publicAPI.setScalarModeToUseFieldData = () => publicAPI.setScalarMode(5);\n  publicAPI.getAbstractScalars = (input, scalarMode, arrayAccessMode, arrayId, arrayName) => {\n    // make sure we have an input\n    if (!input || !model.scalarVisibility) {\n      return {\n        scalars: null,\n        cellFLag: false\n      };\n    }\n    let scalars = null;\n    let cellFlag = false;\n\n    // get scalar data and point/cell attribute according to scalar mode\n    if (scalarMode === ScalarMode.DEFAULT) {\n      scalars = input.getPointData().getScalars();\n      if (!scalars) {\n        scalars = input.getCellData().getScalars();\n        cellFlag = true;\n      }\n    } else if (scalarMode === ScalarMode.USE_POINT_DATA) {\n      scalars = input.getPointData().getScalars();\n    } else if (scalarMode === ScalarMode.USE_CELL_DATA) {\n      scalars = input.getCellData().getScalars();\n      cellFlag = true;\n    } else if (scalarMode === ScalarMode.USE_POINT_FIELD_DATA) {\n      const pd = input.getPointData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = pd.getArrayByIndex(arrayId);\n      } else {\n        scalars = pd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_CELL_FIELD_DATA) {\n      const cd = input.getCellData();\n      cellFlag = true;\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = cd.getArrayByIndex(arrayId);\n      } else {\n        scalars = cd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_FIELD_DATA) {\n      const fd = input.getFieldData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = fd.getArrayByIndex(arrayId);\n      } else {\n        scalars = fd.getArrayByName(arrayName);\n      }\n    }\n    return {\n      scalars,\n      cellFlag\n    };\n  };\n  publicAPI.getLookupTable = () => {\n    if (!model.lookupTable) {\n      publicAPI.createDefaultLookupTable();\n    }\n    return model.lookupTable;\n  };\n  publicAPI.getMTime = () => {\n    let mt = model.mtime;\n    if (model.lookupTable !== null) {\n      const time = model.lookupTable.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    return mt;\n  };\n  publicAPI.mapScalars = (input, alpha) => {\n    const scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;\n    if (!scalars) {\n      model.colorMapColors = null;\n      return;\n    }\n\n    // we want to only recompute when something has changed\n    const toString = `${publicAPI.getMTime()}${scalars.getMTime()}${alpha}`;\n    if (model.colorBuildString === toString) return;\n    if (!model.useLookupTableScalarRange) {\n      publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);\n    }\n    const lut = publicAPI.getLookupTable();\n    if (lut) {\n      // Ensure that the lookup table is built\n      lut.build();\n      model.colorMapColors = lut.mapScalars(scalars, model.colorMode, model.fieldDataTupleId);\n    }\n    model.colorBuildString = `${publicAPI.getMTime()}${scalars.getMTime()}${alpha}`;\n  };\n  publicAPI.getPrimitiveCount = () => {\n    const input = publicAPI.getInputData();\n    const pcount = {\n      points: input.getPoints().getNumberOfValues() / 3,\n      verts: input.getVerts().getNumberOfValues() - input.getVerts().getNumberOfCells(),\n      lines: input.getLines().getNumberOfValues() - 2 * input.getLines().getNumberOfCells(),\n      triangles: input.getPolys().getNumberOfValues() - 3 * input.getPolys().getNumberOfCells()\n    };\n    return pcount;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  static: false,\n  lookupTable: null,\n  scalarVisibility: false,\n  scalarRange: [0, 1],\n  useLookupTableScalarRange: false,\n  colorMode: 0,\n  scalarMode: 0,\n  arrayAccessMode: 1,\n  // By_NAME\n\n  renderTime: 0,\n  colorByArrayName: null,\n  transformCoordinate: null,\n  viewSpecificProperties: null,\n  customShaderAttributes: []\n};\n\n// ----------------------------------------------------------------------------\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorMapColors']);\n  macro.setGet(publicAPI, model, ['arrayAccessMode', 'colorByArrayName', 'colorMode', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'transformCoordinate', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO\n  ]);\n  macro.setGetArray(publicAPI, model, ['scalarRange'], 2);\n  if (!model.viewSpecificProperties) {\n    model.viewSpecificProperties = {};\n  }\n\n  // Object methods\n  vtkMapper2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkMapper2D');\n\n// ----------------------------------------------------------------------------\n\nvar vtkMapper2D$1 = {\n  newInstance,\n  extend\n};\nexport { vtkMapper2D$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkAbstractMapper","vtkLookupTable","Constants","ColorMode","ScalarMode","GetArray","vtkMapper2D","publicAPI","model","classHierarchy","push","createDefaultLookupTable","lookupTable","newInstance","getColorModeAsString","enumToString","colorMode","setColorModeToDefault","setColorMode","setColorModeToMapScalars","setColorModeToDirectScalars","getScalarModeAsString","scalarMode","setScalarModeToDefault","setScalarMode","setScalarModeToUsePointData","setScalarModeToUseCellData","setScalarModeToUsePointFieldData","setScalarModeToUseCellFieldData","setScalarModeToUseFieldData","getAbstractScalars","input","arrayAccessMode","arrayId","arrayName","scalarVisibility","scalars","cellFLag","cellFlag","DEFAULT","getPointData","getScalars","getCellData","USE_POINT_DATA","USE_CELL_DATA","USE_POINT_FIELD_DATA","pd","BY_ID","getArrayByIndex","getArrayByName","USE_CELL_FIELD_DATA","cd","USE_FIELD_DATA","fd","getFieldData","getLookupTable","getMTime","mt","mtime","time","mapScalars","alpha","colorByArrayName","colorMapColors","toString","colorBuildString","useLookupTableScalarRange","setRange","scalarRange","lut","build","fieldDataTupleId","getPrimitiveCount","getInputData","pcount","points","getPoints","getNumberOfValues","verts","getVerts","getNumberOfCells","lines","getLines","triangles","getPolys","DEFAULT_VALUES","static","renderTime","transformCoordinate","viewSpecificProperties","customShaderAttributes","extend","initialValues","arguments","length","undefined","Object","assign","get","setGet","setGetArray","vtkMapper2D$1","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/Core/Mapper2D.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkLookupTable from '../../Common/Core/LookupTable.js';\nimport Constants from './Mapper/Constants.js';\n\nconst {\n  ColorMode,\n  ScalarMode,\n  GetArray\n} = Constants;\n\n// ---------------------------------------------------------------------------\n// vtkMapper2D methods\n// ---------------------------------------------------------------------------\n\nfunction vtkMapper2D(publicAPI, model) {\n  // Set out className\n  model.classHierarchy.push('vtkMapper2D');\n  publicAPI.createDefaultLookupTable = () => {\n    model.lookupTable = vtkLookupTable.newInstance();\n  };\n  publicAPI.getColorModeAsString = () => macro.enumToString(ColorMode, model.colorMode);\n  publicAPI.setColorModeToDefault = () => publicAPI.setColorMode(0);\n  publicAPI.setColorModeToMapScalars = () => publicAPI.setColorMode(1);\n  publicAPI.setColorModeToDirectScalars = () => publicAPI.setColorMode(2);\n  publicAPI.getScalarModeAsString = () => macro.enumToString(ScalarMode, model.scalarMode);\n  publicAPI.setScalarModeToDefault = () => publicAPI.setScalarMode(0);\n  publicAPI.setScalarModeToUsePointData = () => publicAPI.setScalarMode(1);\n  publicAPI.setScalarModeToUseCellData = () => publicAPI.setScalarMode(2);\n  publicAPI.setScalarModeToUsePointFieldData = () => publicAPI.setScalarMode(3);\n  publicAPI.setScalarModeToUseCellFieldData = () => publicAPI.setScalarMode(4);\n  publicAPI.setScalarModeToUseFieldData = () => publicAPI.setScalarMode(5);\n  publicAPI.getAbstractScalars = (input, scalarMode, arrayAccessMode, arrayId, arrayName) => {\n    // make sure we have an input\n    if (!input || !model.scalarVisibility) {\n      return {\n        scalars: null,\n        cellFLag: false\n      };\n    }\n    let scalars = null;\n    let cellFlag = false;\n\n    // get scalar data and point/cell attribute according to scalar mode\n    if (scalarMode === ScalarMode.DEFAULT) {\n      scalars = input.getPointData().getScalars();\n      if (!scalars) {\n        scalars = input.getCellData().getScalars();\n        cellFlag = true;\n      }\n    } else if (scalarMode === ScalarMode.USE_POINT_DATA) {\n      scalars = input.getPointData().getScalars();\n    } else if (scalarMode === ScalarMode.USE_CELL_DATA) {\n      scalars = input.getCellData().getScalars();\n      cellFlag = true;\n    } else if (scalarMode === ScalarMode.USE_POINT_FIELD_DATA) {\n      const pd = input.getPointData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = pd.getArrayByIndex(arrayId);\n      } else {\n        scalars = pd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_CELL_FIELD_DATA) {\n      const cd = input.getCellData();\n      cellFlag = true;\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = cd.getArrayByIndex(arrayId);\n      } else {\n        scalars = cd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_FIELD_DATA) {\n      const fd = input.getFieldData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = fd.getArrayByIndex(arrayId);\n      } else {\n        scalars = fd.getArrayByName(arrayName);\n      }\n    }\n    return {\n      scalars,\n      cellFlag\n    };\n  };\n  publicAPI.getLookupTable = () => {\n    if (!model.lookupTable) {\n      publicAPI.createDefaultLookupTable();\n    }\n    return model.lookupTable;\n  };\n  publicAPI.getMTime = () => {\n    let mt = model.mtime;\n    if (model.lookupTable !== null) {\n      const time = model.lookupTable.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    return mt;\n  };\n  publicAPI.mapScalars = (input, alpha) => {\n    const scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;\n    if (!scalars) {\n      model.colorMapColors = null;\n      return;\n    }\n\n    // we want to only recompute when something has changed\n    const toString = `${publicAPI.getMTime()}${scalars.getMTime()}${alpha}`;\n    if (model.colorBuildString === toString) return;\n    if (!model.useLookupTableScalarRange) {\n      publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);\n    }\n    const lut = publicAPI.getLookupTable();\n    if (lut) {\n      // Ensure that the lookup table is built\n      lut.build();\n      model.colorMapColors = lut.mapScalars(scalars, model.colorMode, model.fieldDataTupleId);\n    }\n    model.colorBuildString = `${publicAPI.getMTime()}${scalars.getMTime()}${alpha}`;\n  };\n  publicAPI.getPrimitiveCount = () => {\n    const input = publicAPI.getInputData();\n    const pcount = {\n      points: input.getPoints().getNumberOfValues() / 3,\n      verts: input.getVerts().getNumberOfValues() - input.getVerts().getNumberOfCells(),\n      lines: input.getLines().getNumberOfValues() - 2 * input.getLines().getNumberOfCells(),\n      triangles: input.getPolys().getNumberOfValues() - 3 * input.getPolys().getNumberOfCells()\n    };\n    return pcount;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  static: false,\n  lookupTable: null,\n  scalarVisibility: false,\n  scalarRange: [0, 1],\n  useLookupTableScalarRange: false,\n  colorMode: 0,\n  scalarMode: 0,\n  arrayAccessMode: 1,\n  // By_NAME\n\n  renderTime: 0,\n  colorByArrayName: null,\n  transformCoordinate: null,\n  viewSpecificProperties: null,\n  customShaderAttributes: []\n};\n\n// ----------------------------------------------------------------------------\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorMapColors']);\n  macro.setGet(publicAPI, model, ['arrayAccessMode', 'colorByArrayName', 'colorMode', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'transformCoordinate', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO\n  ]);\n\n  macro.setGetArray(publicAPI, model, ['scalarRange'], 2);\n  if (!model.viewSpecificProperties) {\n    model.viewSpecificProperties = {};\n  }\n\n  // Object methods\n  vtkMapper2D(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkMapper2D');\n\n// ----------------------------------------------------------------------------\n\nvar vtkMapper2D$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkMapper2D$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}