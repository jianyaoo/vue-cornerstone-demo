{"ast":null,"code":"import { n as newInstance$1, g as get, e as setGet, i as moveToProtected, c as macro } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nconst {\n  vtkDebugMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLRenderer methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-bitwise */\n\nfunction vtkOpenGLRenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderer');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getActiveCamera());\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.updateLights = () => {\n    let count = 0;\n    const lights = model.renderable.getLightsByReference();\n    for (let index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n    return count;\n  };\n  publicAPI.zBufferPass = prepass => {\n    if (prepass) {\n      let clearMask = 0;\n      const gl = model.context;\n      if (!model.renderable.getTransparent()) {\n        model.context.clearColor(1.0, 0.0, 0.0, 1.0);\n        clearMask |= gl.COLOR_BUFFER_BIT;\n      }\n      if (!model.renderable.getPreserveDepthBuffer()) {\n        gl.clearDepth(1.0);\n        clearMask |= gl.DEPTH_BUFFER_BIT;\n        model.context.depthMask(true);\n      }\n      const ts = publicAPI.getTiledSizeAndOrigin();\n      gl.enable(gl.SCISSOR_TEST);\n      gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.colorMask(true, true, true, true);\n      if (clearMask) {\n        gl.clear(clearMask);\n      }\n      gl.enable(gl.DEPTH_TEST);\n    }\n  };\n  publicAPI.opaqueZBufferPass = prepass => publicAPI.zBufferPass(prepass);\n\n  // Renders myself\n  publicAPI.cameraPass = prepass => {\n    if (prepass) {\n      publicAPI.clear();\n    }\n  };\n  publicAPI.getAspectRatio = () => {\n    const size = model._parent.getSizeByReference();\n    const viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n  publicAPI.getTiledSizeAndOrigin = () => {\n    const vport = model.renderable.getViewportByReference();\n\n    // if there is no window assume 0 1\n    const tileViewPort = [0.0, 0.0, 1.0, 1.0];\n\n    // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu = vport[0] - tileViewPort[0];\n    const vpv = vport[1] - tileViewPort[1];\n\n    // store the result as a pixel value\n    const ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n    const lowerLeftU = Math.round(ndvp[0]);\n    const lowerLeftV = Math.round(ndvp[1]);\n\n    // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu2 = vport[2] - tileViewPort[0];\n    const vpv2 = vport[3] - tileViewPort[1];\n    const ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2);\n\n    // now compute the size of the intersection of the viewport with the\n    // current tile\n    let usize = Math.round(ndvp2[0]) - lowerLeftU;\n    let vsize = Math.round(ndvp2[1]) - lowerLeftV;\n    if (usize < 0) {\n      usize = 0;\n    }\n    if (vsize < 0) {\n      vsize = 0;\n    }\n    return {\n      usize,\n      vsize,\n      lowerLeftU,\n      lowerLeftV\n    };\n  };\n  publicAPI.clear = () => {\n    let clearMask = 0;\n    const gl = model.context;\n    if (!model.renderable.getTransparent()) {\n      const background = model.renderable.getBackgroundByReference();\n      // renderable ensures that background has 4 entries.\n      model.context.clearColor(background[0], background[1], background[2], background[3]);\n      clearMask |= gl.COLOR_BUFFER_BIT;\n    }\n    if (!model.renderable.getPreserveDepthBuffer()) {\n      gl.clearDepth(1.0);\n      clearMask |= gl.DEPTH_BUFFER_BIT;\n      model.context.depthMask(true);\n    }\n    gl.colorMask(true, true, true, true);\n    const ts = publicAPI.getTiledSizeAndOrigin();\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    if (clearMask) {\n      gl.clear(clearMask);\n    }\n    gl.enable(gl.DEPTH_TEST);\n    /* eslint-enable no-bitwise */\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n    // Releasing resources means that the next render should re-create resources\n    if (model.renderable) {\n      model.renderable.getViewProps().forEach(prop => {\n        prop.modified();\n      });\n    }\n  };\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  _openGLRenderWindow: null,\n  selector: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Build VTK API\n  get(publicAPI, model, ['shaderCache']);\n  setGet(publicAPI, model, ['selector']);\n  moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n\n  // Object methods\n  vtkOpenGLRenderer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLRenderer');\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderer = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkRenderer', newInstance);\nexport { vtkRenderer as default, extend, newInstance };","map":{"version":3,"names":["n","newInstance$1","g","get","e","setGet","i","moveToProtected","c","macro","vtkViewNode","registerOverride","vtkDebugMacro","vtkOpenGLRenderer","publicAPI","model","classHierarchy","push","buildPass","prepass","renderable","updateLights","prepareNodes","addMissingNode","getActiveCamera","addMissingNodes","getViewPropsWithNestedProps","removeUnusedNodes","count","lights","getLightsByReference","index","length","getSwitch","createLight","zBufferPass","clearMask","gl","context","getTransparent","clearColor","COLOR_BUFFER_BIT","getPreserveDepthBuffer","clearDepth","DEPTH_BUFFER_BIT","depthMask","ts","getTiledSizeAndOrigin","enable","SCISSOR_TEST","scissor","lowerLeftU","lowerLeftV","usize","vsize","viewport","colorMask","clear","DEPTH_TEST","opaqueZBufferPass","cameraPass","getAspectRatio","size","_parent","getSizeByReference","getViewportByReference","vport","tileViewPort","vpu","vpv","ndvp","normalizedDisplayToDisplay","Math","round","vpu2","vpv2","ndvp2","background","getBackgroundByReference","releaseGraphicsResources","selector","getViewProps","forEach","prop","modified","setOpenGLRenderWindow","rw","_openGLRenderWindow","getContext","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","newInstance","vtkRenderer","default"],"sources":["/root/vue-cornerstone-demo/node_modules/@kitware/vtk.js/Rendering/OpenGL/Renderer.js"],"sourcesContent":["import { n as newInstance$1, g as get, e as setGet, i as moveToProtected, c as macro } from '../../macros2.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nconst {\n  vtkDebugMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLRenderer methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-bitwise */\n\nfunction vtkOpenGLRenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderer');\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getActiveCamera());\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n  publicAPI.updateLights = () => {\n    let count = 0;\n    const lights = model.renderable.getLightsByReference();\n    for (let index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n    return count;\n  };\n  publicAPI.zBufferPass = prepass => {\n    if (prepass) {\n      let clearMask = 0;\n      const gl = model.context;\n      if (!model.renderable.getTransparent()) {\n        model.context.clearColor(1.0, 0.0, 0.0, 1.0);\n        clearMask |= gl.COLOR_BUFFER_BIT;\n      }\n      if (!model.renderable.getPreserveDepthBuffer()) {\n        gl.clearDepth(1.0);\n        clearMask |= gl.DEPTH_BUFFER_BIT;\n        model.context.depthMask(true);\n      }\n      const ts = publicAPI.getTiledSizeAndOrigin();\n      gl.enable(gl.SCISSOR_TEST);\n      gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.colorMask(true, true, true, true);\n      if (clearMask) {\n        gl.clear(clearMask);\n      }\n      gl.enable(gl.DEPTH_TEST);\n    }\n  };\n  publicAPI.opaqueZBufferPass = prepass => publicAPI.zBufferPass(prepass);\n\n  // Renders myself\n  publicAPI.cameraPass = prepass => {\n    if (prepass) {\n      publicAPI.clear();\n    }\n  };\n  publicAPI.getAspectRatio = () => {\n    const size = model._parent.getSizeByReference();\n    const viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n  publicAPI.getTiledSizeAndOrigin = () => {\n    const vport = model.renderable.getViewportByReference();\n\n    // if there is no window assume 0 1\n    const tileViewPort = [0.0, 0.0, 1.0, 1.0];\n\n    // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu = vport[0] - tileViewPort[0];\n    const vpv = vport[1] - tileViewPort[1];\n\n    // store the result as a pixel value\n    const ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n    const lowerLeftU = Math.round(ndvp[0]);\n    const lowerLeftV = Math.round(ndvp[1]);\n\n    // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu2 = vport[2] - tileViewPort[0];\n    const vpv2 = vport[3] - tileViewPort[1];\n    const ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2);\n\n    // now compute the size of the intersection of the viewport with the\n    // current tile\n    let usize = Math.round(ndvp2[0]) - lowerLeftU;\n    let vsize = Math.round(ndvp2[1]) - lowerLeftV;\n    if (usize < 0) {\n      usize = 0;\n    }\n    if (vsize < 0) {\n      vsize = 0;\n    }\n    return {\n      usize,\n      vsize,\n      lowerLeftU,\n      lowerLeftV\n    };\n  };\n  publicAPI.clear = () => {\n    let clearMask = 0;\n    const gl = model.context;\n    if (!model.renderable.getTransparent()) {\n      const background = model.renderable.getBackgroundByReference();\n      // renderable ensures that background has 4 entries.\n      model.context.clearColor(background[0], background[1], background[2], background[3]);\n      clearMask |= gl.COLOR_BUFFER_BIT;\n    }\n    if (!model.renderable.getPreserveDepthBuffer()) {\n      gl.clearDepth(1.0);\n      clearMask |= gl.DEPTH_BUFFER_BIT;\n      model.context.depthMask(true);\n    }\n    gl.colorMask(true, true, true, true);\n    const ts = publicAPI.getTiledSizeAndOrigin();\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    if (clearMask) {\n      gl.clear(clearMask);\n    }\n    gl.enable(gl.DEPTH_TEST);\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n    // Releasing resources means that the next render should re-create resources\n    if (model.renderable) {\n      model.renderable.getViewProps().forEach(prop => {\n        prop.modified();\n      });\n    }\n  };\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  _openGLRenderWindow: null,\n  selector: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Build VTK API\n  get(publicAPI, model, ['shaderCache']);\n  setGet(publicAPI, model, ['selector']);\n  moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n\n  // Object methods\n  vtkOpenGLRenderer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkOpenGLRenderer');\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderer = {\n  newInstance,\n  extend\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkRenderer', newInstance);\n\nexport { vtkRenderer as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}