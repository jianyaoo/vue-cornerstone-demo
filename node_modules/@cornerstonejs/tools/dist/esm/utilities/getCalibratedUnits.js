import { Enums, utilities } from '@cornerstonejs/core';
const { CalibrationTypes } = Enums;
const PIXEL_UNITS = 'px';
const SUPPORTED_REGION_DATA_TYPES = [
    1,
];
const SUPPORTED_LENGTH_VARIANT = [
    '3,3',
];
const SUPPORTED_PROBE_VARIANT = [
    '4,3',
];
const UNIT_MAPPING = {
    3: 'cm',
    4: 'seconds',
};
const EPS = 1e-3;
const getCalibratedLengthUnits = (handles, image) => {
    const { calibration, hasPixelSpacing } = image;
    const units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;
    if (!calibration ||
        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {
        return units;
    }
    if (calibration.type === CalibrationTypes.UNCALIBRATED) {
        return PIXEL_UNITS;
    }
    if (calibration.sequenceOfUltrasoundRegions) {
        return 'US Region';
    }
    return `${units} ${calibration.type}`;
};
const SQUARE = '\xb2';
const getCalibratedAreaUnits = (handles, image) => {
    const { calibration, hasPixelSpacing } = image;
    const units = (hasPixelSpacing ? 'mm' : PIXEL_UNITS) + SQUARE;
    if (!calibration || !calibration.type) {
        return units;
    }
    if (calibration.sequenceOfUltrasoundRegions) {
        return 'US Region';
    }
    return `${units} ${calibration.type}`;
};
const getCalibratedScale = (image, handles = []) => {
    if (image.calibration?.sequenceOfUltrasoundRegions) {
    }
    else if (image.calibration?.scale) {
        return image.calibration.scale;
    }
    else {
        return 1;
    }
};
const getCalibratedLengthUnitsAndScale = (image, handles) => {
    const [imageIndex1, imageIndex2] = handles;
    const { calibration, hasPixelSpacing } = image;
    let units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;
    const areaUnits = units + SQUARE;
    let scale = 1;
    let calibrationType = '';
    if (!calibration ||
        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {
        return { units, areaUnits, scale };
    }
    if (calibration.type === CalibrationTypes.UNCALIBRATED) {
        return { units: PIXEL_UNITS, areaUnits: PIXEL_UNITS + SQUARE, scale };
    }
    if (calibration.sequenceOfUltrasoundRegions) {
        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&
            imageIndex1[0] <= region.regionLocationMaxX1 &&
            imageIndex1[1] >= region.regionLocationMinY0 &&
            imageIndex1[1] <= region.regionLocationMaxY1 &&
            imageIndex2[0] >= region.regionLocationMinX0 &&
            imageIndex2[0] <= region.regionLocationMaxX1 &&
            imageIndex2[1] >= region.regionLocationMinY0 &&
            imageIndex2[1] <= region.regionLocationMaxY1);
        if (!regions?.length) {
            return { units, areaUnits, scale };
        }
        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&
            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitXDirection},${region.physicalUnitYDirection}`));
        if (!regions.length) {
            return { units: PIXEL_UNITS, areaUnits: PIXEL_UNITS + SQUARE, scale };
        }
        const region = regions[0];
        const physicalDeltaX = Math.abs(region.physicalDeltaX);
        const physicalDeltaY = Math.abs(region.physicalDeltaY);
        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);
        if (isSamePhysicalDelta) {
            scale = 1 / (physicalDeltaX * physicalDeltaY * 100);
            calibrationType = 'US Region';
            units = 'mm';
        }
        else {
            return { units: PIXEL_UNITS, areaUnits: PIXEL_UNITS + SQUARE, scale };
        }
    }
    else if (calibration.scale) {
        scale = calibration.scale;
    }
    const types = [CalibrationTypes.ERMF, CalibrationTypes.USER, CalibrationTypes.ERROR, CalibrationTypes.PROJECTION];
    if (types.includes(calibration?.type)) {
        calibrationType = calibration.type;
    }
    return {
        units: units + (calibrationType ? ` ${calibrationType}` : ''),
        areaUnits: areaUnits + (calibrationType ? ` ${calibrationType}` : ''),
        scale,
    };
};
const getCalibratedProbeUnitsAndValue = (image, handles) => {
    const [imageIndex] = handles;
    const { calibration } = image;
    let units = ['raw'];
    let values = [null];
    let calibrationType = '';
    if (!calibration ||
        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {
        return { units, values };
    }
    if (calibration.sequenceOfUltrasoundRegions) {
        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&
            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitXDirection},${region.physicalUnitYDirection}`));
        if (!supportedRegionsMetadata?.length) {
            return { units, values };
        }
        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&
            imageIndex[0] <= region.regionLocationMaxX1 &&
            imageIndex[1] >= region.regionLocationMinY0 &&
            imageIndex[1] <= region.regionLocationMaxY1);
        if (!region) {
            return { units, values };
        }
        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;
        const { physicalDeltaX, physicalDeltaY } = region;
        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *
            physicalDeltaY;
        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *
            physicalDeltaX;
        calibrationType = 'US Region';
        values = [xValue, yValue];
        units = [
            UNIT_MAPPING[region.physicalUnitXDirection],
            UNIT_MAPPING[region.physicalUnitYDirection],
        ];
    }
    return {
        units,
        values,
        calibrationType,
    };
};
const getCalibratedAspect = (image) => image.calibration?.aspect || 1;
export default getCalibratedLengthUnits;
export { getCalibratedAreaUnits, getCalibratedLengthUnits, getCalibratedLengthUnitsAndScale, getCalibratedScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };
//# sourceMappingURL=getCalibratedUnits.js.map