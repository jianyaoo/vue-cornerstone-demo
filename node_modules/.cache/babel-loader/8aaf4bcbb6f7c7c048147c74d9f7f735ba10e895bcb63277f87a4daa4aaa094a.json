{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n    i = arguments.length;\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n  return Math.sqrt(y);\n};","map":{"version":3,"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","hypot","y","i","arguments","length","sqrt"],"sources":["/root/vue-cornerstone-demo/node_modules/gl-matrix/esm/common.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,OAAO,GAAG,QAAQ;AAC7B,OAAO,IAAIC,UAAU,GAAG,OAAOC,YAAY,KAAK,WAAW,GAAGA,YAAY,GAAGC,KAAK;AAClF,OAAO,IAAIC,MAAM,GAAGC,IAAI,CAACC,MAAM;AAC/B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EACvCP,UAAU,GAAGO,IAAI;AACnB;AACA,IAAIC,MAAM,GAAGJ,IAAI,CAACK,EAAE,GAAG,GAAG;AAC1B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAQA,CAACC,CAAC,EAAE;EAC1B,OAAOA,CAAC,GAAGH,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,MAAMA,CAACD,CAAC,EAAEE,CAAC,EAAE;EAC3B,OAAOT,IAAI,CAACU,GAAG,CAACH,CAAC,GAAGE,CAAC,CAAC,IAAId,OAAO,GAAGK,IAAI,CAACW,GAAG,CAAC,GAAG,EAAEX,IAAI,CAACU,GAAG,CAACH,CAAC,CAAC,EAAEP,IAAI,CAACU,GAAG,CAACD,CAAC,CAAC,CAAC;AAC7E;AACA,IAAI,CAACT,IAAI,CAACY,KAAK,EAAEZ,IAAI,CAACY,KAAK,GAAG,YAAY;EACxC,IAAIC,CAAC,GAAG,CAAC;IACLC,CAAC,GAAGC,SAAS,CAACC,MAAM;EAExB,OAAOF,CAAC,EAAE,EAAE;IACVD,CAAC,IAAIE,SAAS,CAACD,CAAC,CAAC,GAAGC,SAAS,CAACD,CAAC,CAAC;EAClC;EAEA,OAAOd,IAAI,CAACiB,IAAI,CAACJ,CAAC,CAAC;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}