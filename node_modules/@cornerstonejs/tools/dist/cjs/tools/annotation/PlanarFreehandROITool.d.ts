import type { Types } from '@cornerstonejs/core';
import type { EventTypes, ToolHandle, Annotation, Annotations, PublicToolProps, ToolProps, AnnotationRenderContext } from '../../types';
import { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';
import ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';
declare class PlanarFreehandROITool extends ContourSegmentationBaseTool {
    static toolName: any;
    touchDragCallback: any;
    mouseDragCallback: any;
    _throttledCalculateCachedStats: any;
    private commonData?;
    isDrawing: boolean;
    isEditingClosed: boolean;
    isEditingOpen: boolean;
    protected activateDraw: (evt: EventTypes.InteractionEventType, annotation: PlanarFreehandROIAnnotation, viewportIdsToRender: string[]) => void;
    private activateClosedContourEdit;
    private activateOpenContourEdit;
    private activateOpenContourEndEdit;
    private cancelDrawing;
    private cancelClosedContourEdit;
    private cancelOpenContourEdit;
    private renderContour;
    private renderContourBeingDrawn;
    private renderClosedContourBeingEdited;
    private renderOpenContourBeingEdited;
    constructor(toolProps?: PublicToolProps, defaultToolProps?: ToolProps);
    addNewAnnotation: (evt: EventTypes.InteractionEventType) => PlanarFreehandROIAnnotation;
    handleSelectedCallback: (evt: EventTypes.InteractionEventType, annotation: PlanarFreehandROIAnnotation, handle: ToolHandle) => void;
    toolSelectedCallback: (evt: EventTypes.InteractionEventType, annotation: PlanarFreehandROIAnnotation) => void;
    isPointNearTool: (element: HTMLDivElement, annotation: PlanarFreehandROIAnnotation, canvasCoords: Types.Point2, proximity: number) => boolean;
    cancel: (element: HTMLDivElement) => void;
    filterInteractableAnnotationsForElement(element: HTMLDivElement, annotations: Annotations): Annotations | undefined;
    private filterAnnotationsWithinSlice;
    protected isContourSegmentationTool(): boolean;
    protected createAnnotation(evt: EventTypes.InteractionEventType): Annotation;
    protected getAnnotationStyle(context: any): any;
    protected renderAnnotationInstance(renderContext: AnnotationRenderContext): boolean;
    _calculateStatsIfActive(annotation: PlanarFreehandROIAnnotation, targetId: string, viewport: any, renderingEngine: any, enabledElement: any): void;
    private _calculateCachedStats;
    private _renderStats;
}
export default PlanarFreehandROITool;
