{"ast":null,"code":"import { getEnabledElementByIds, utilities as csUtils } from '@cornerstonejs/core';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { setSegmentationVisibility } from '../../stateManagement/segmentation/config/segmentationVisibility';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport { BaseTool } from '../base';\nimport { surfaceDisplay } from './Surface';\nimport { contourDisplay } from './Contour';\nimport { labelmapDisplay } from './Labelmap';\nclass SegmentationDisplayTool extends BaseTool {\n  constructor(toolProps = {}, defaultToolProps = {\n    configuration: {}\n  }) {\n    super(toolProps, defaultToolProps);\n    this.renderSegmentation = toolGroupId => {\n      const toolGroup = getToolGroup(toolGroupId);\n      if (!toolGroup) {\n        return;\n      }\n      const toolGroupSegmentationRepresentations = getSegmentationRepresentations(toolGroupId);\n      if (!toolGroupSegmentationRepresentations || toolGroupSegmentationRepresentations.length === 0) {\n        return;\n      }\n      const toolGroupViewports = toolGroup.viewportsInfo.map(({\n        renderingEngineId,\n        viewportId\n      }) => {\n        const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n        if (enabledElement) {\n          return enabledElement.viewport;\n        }\n      });\n      const segmentationRenderList = toolGroupSegmentationRepresentations.map(representation => {\n        const config = this._getMergedRepresentationsConfig(toolGroupId);\n        const viewportsRenderList = [];\n        const renderers = {\n          [Representations.Labelmap]: labelmapDisplay,\n          [Representations.Contour]: contourDisplay,\n          [Representations.Surface]: surfaceDisplay\n        };\n        const display = renderers[representation.type];\n        for (const viewport of toolGroupViewports) {\n          const renderedViewport = display.render(viewport, representation, config);\n          viewportsRenderList.push(renderedViewport);\n        }\n        return viewportsRenderList;\n      });\n      Promise.allSettled(segmentationRenderList).then(() => {\n        toolGroupViewports.forEach(viewport => {\n          viewport.render();\n        });\n      });\n    };\n  }\n  onSetToolEnabled() {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations = getSegmentationRepresentations(toolGroupId);\n    if (!toolGroupSegmentationRepresentations || toolGroupSegmentationRepresentations.length === 0) {\n      return;\n    }\n    toolGroupSegmentationRepresentations.forEach(segmentationRepresentation => {\n      setSegmentationVisibility(toolGroupId, segmentationRepresentation.segmentationRepresentationUID, true);\n    });\n  }\n  onSetToolDisabled() {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations = getSegmentationRepresentations(toolGroupId);\n    if (!toolGroupSegmentationRepresentations || toolGroupSegmentationRepresentations.length === 0) {\n      return;\n    }\n    toolGroupSegmentationRepresentations.forEach(segmentationRepresentation => {\n      setSegmentationVisibility(toolGroupId, segmentationRepresentation.segmentationRepresentationUID, false);\n    });\n  }\n  _getMergedRepresentationsConfig(toolGroupId) {\n    const toolGroupConfig = segmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const globalConfig = segmentationConfig.getGlobalConfig();\n    const mergedConfig = csUtils.deepMerge(globalConfig, toolGroupConfig);\n    return mergedConfig;\n  }\n}\nSegmentationDisplayTool.toolName = 'SegmentationDisplay';\nexport default SegmentationDisplayTool;","map":{"version":3,"names":["getEnabledElementByIds","utilities","csUtils","Representations","config","segmentationConfig","setSegmentationVisibility","getSegmentationRepresentations","getToolGroup","BaseTool","surfaceDisplay","contourDisplay","labelmapDisplay","SegmentationDisplayTool","constructor","toolProps","defaultToolProps","configuration","renderSegmentation","toolGroupId","toolGroup","toolGroupSegmentationRepresentations","length","toolGroupViewports","viewportsInfo","map","renderingEngineId","viewportId","enabledElement","viewport","segmentationRenderList","representation","_getMergedRepresentationsConfig","viewportsRenderList","renderers","Labelmap","Contour","Surface","display","type","renderedViewport","render","push","Promise","allSettled","then","forEach","onSetToolEnabled","segmentationRepresentation","segmentationRepresentationUID","onSetToolDisabled","toolGroupConfig","getToolGroupSpecificConfig","globalConfig","getGlobalConfig","mergedConfig","deepMerge","toolName"],"sources":["../../../../src/tools/displayTools/SegmentationDisplayTool.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}