{"ast":null,"code":"import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport isEqual from './isEqual';\nimport isOpposite from './isOpposite';\nimport createUint8SharedArray from './createUint8SharedArray';\nimport createFloat32SharedArray from './createFloat32SharedArray';\nimport createUint16SharedArray from './createUInt16SharedArray';\nimport createInt16SharedArray from './createInt16SharedArray';\nimport getViewportModality from './getViewportModality';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport getScalarDataType from './getScalarDataType';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as cacheUtils from './cacheUtils';\nexport { eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, planar, getMinMax, getRuntimeId, isEqual, isOpposite, createFloat32SharedArray, createUint8SharedArray, createUint16SharedArray, createInt16SharedArray, getViewportModality, windowLevel, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, getScalingParameters, getScalarDataType, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, getBufferConfiguration, VoxelManager, generateVolumePropsFromImageIds, convertStackToVolumeViewport, convertVolumeToStackViewport, cacheUtils, roundNumber, roundToPrecision };","map":{"version":3,"names":["eventListener","csUtils","createSigmoidRGBTransferFunction","getVoiFromSigmoidRGBTransferFunction","createLinearRGBTransferFunction","scaleRgbTransferFunction","triggerEvent","uuidv4","getMinMax","getRuntimeId","imageIdToURI","calibratedPixelSpacingMetadataProvider","clamp","isEqual","isOpposite","createUint8SharedArray","createFloat32SharedArray","createUint16SharedArray","createInt16SharedArray","getViewportModality","getClosestImageId","getSpacingInNormalDirection","getTargetVolumeAndSpacingInNormalDir","getVolumeActorCorners","indexWithinDimensions","getVolumeViewportsContainingSameVolumes","getViewportsWithVolumeId","transformWorldToIndex","transformIndexToWorld","loadImageToCanvas","renderToCanvasCPU","renderToCanvasGPU","worldToImageCoords","imageToWorldCoords","getVolumeSliceRangeInfo","getVolumeViewportScrollInfo","getSliceRange","snapFocalPointToSlice","getImageSliceDataForVolumeViewport","isImageActor","actorIsA","getViewportsWithImageURI","getClosestStackImageIndexForPoint","getCurrentVolumeViewportSlice","calculateViewportsSpatialRegistration","spatialRegistrationMetadataProvider","getViewportImageCornersInWorld","hasNaNValues","applyPreset","deepMerge","getScalingParameters","getScalarDataType","isPTPrescaledWithSUV","getImageLegacy","sortImageIdsAndGetSpacing","makeVolumeMetadata","genericMetadataProvider","isValidVolume","updateVTKImageDataWithCornerstoneImage","ProgressiveIterator","decimate","imageRetrieveMetadataProvider","isVideoTransferSyntax","getBufferConfiguration","generateVolumePropsFromImageIds","convertStackToVolumeViewport","convertVolumeToStackViewport","VoxelManager","roundNumber","roundToPrecision","planar","windowLevel","colormap","transferFunctionUtils","cacheUtils","invertRgbTransferFunction"],"sources":["../../../src/utilities/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}