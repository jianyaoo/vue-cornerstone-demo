{"ast":null,"code":"import { cache, getEnabledElementByIds, utilities as csUtils } from '@cornerstonejs/core';\nimport triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { isVolumeSegmentation } from '../../tools/segmentation/strategies/utils/stackVolumeCheck';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nconst onSegmentationDataModified = function (evt) {\n  const {\n    segmentationId,\n    modifiedSlicesToUse\n  } = evt.detail;\n  const {\n    representationData,\n    type\n  } = SegmentationState.getSegmentation(segmentationId);\n  const toolGroupIds = SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);\n  if (type !== SegmentationRepresentations.Labelmap) {\n    throw new Error(`onSegmentationDataModified: representationType ${type} not supported yet`);\n  }\n  if (isVolumeSegmentation(representationData[type])) {\n    const segmentationVolume = cache.getVolume(representationData[type].volumeId);\n    if (!segmentationVolume) {\n      console.warn('segmentation not found in cache');\n      return;\n    }\n    const {\n      imageData,\n      vtkOpenGLTexture\n    } = segmentationVolume;\n    let slicesToUpdate;\n    if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {\n      slicesToUpdate = modifiedSlicesToUse;\n    } else {\n      const numSlices = imageData.getDimensions()[2];\n      slicesToUpdate = [...Array(numSlices).keys()];\n    }\n    slicesToUpdate.forEach(i => {\n      vtkOpenGLTexture.setUpdatedFrame(i);\n    });\n    imageData.modified();\n  } else {\n    toolGroupIds.forEach(toolGroupId => {\n      const toolGroupSegmentationRepresentations = SegmentationState.getSegmentationRepresentations(toolGroupId);\n      const toolGroup = getToolGroup(toolGroupId);\n      const viewportsInfo = toolGroup.getViewportsInfo();\n      toolGroupSegmentationRepresentations.forEach(representation => {\n        if (representation.segmentationId !== segmentationId) {\n          return;\n        }\n        viewportsInfo.forEach(({\n          viewportId,\n          renderingEngineId\n        }) => {\n          const viewport = getEnabledElementByIds(viewportId, renderingEngineId).viewport;\n          const actorEntry = viewport.getActor(representation.segmentationRepresentationUID);\n          if (!actorEntry) {\n            return;\n          }\n          const currentImageId = viewport.getCurrentImageId();\n          const segImageData = actorEntry.actor.getMapper().getInputData();\n          const {\n            imageIdReferenceMap\n          } = representationData[type];\n          const currentSegmentationImageId = imageIdReferenceMap.get(currentImageId);\n          const segmentationImage = cache.getImage(currentSegmentationImageId);\n          segImageData.modified();\n          csUtils.updateVTKImageDataWithCornerstoneImage(segImageData, segmentationImage);\n        });\n      });\n    });\n  }\n  toolGroupIds.forEach(toolGroupId => {\n    triggerSegmentationRender(toolGroupId);\n  });\n};\nexport default onSegmentationDataModified;","map":{"version":3,"names":["cache","getEnabledElementByIds","utilities","csUtils","triggerSegmentationRender","SegmentationRepresentations","SegmentationState","isVolumeSegmentation","getToolGroup","onSegmentationDataModified","evt","segmentationId","modifiedSlicesToUse","detail","representationData","type","getSegmentation","toolGroupIds","getToolGroupIdsWithSegmentation","Labelmap","Error","segmentationVolume","getVolume","volumeId","console","warn","imageData","vtkOpenGLTexture","slicesToUpdate","Array","isArray","numSlices","getDimensions","keys","forEach","i","setUpdatedFrame","modified","toolGroupId","toolGroupSegmentationRepresentations","getSegmentationRepresentations","toolGroup","viewportsInfo","getViewportsInfo","representation","viewportId","renderingEngineId","viewport","actorEntry","getActor","segmentationRepresentationUID","currentImageId","getCurrentImageId","segImageData","actor","getMapper","getInputData","imageIdReferenceMap","currentSegmentationImageId","get","segmentationImage","getImage","updateVTKImageDataWithCornerstoneImage"],"sources":["../../../../src/eventListeners/segmentation/segmentationDataModifiedEventListener.ts"],"sourcesContent":[null],"mappings":"AAAA,SACEA,KAAK,EACLC,sBAAsB,EACtBC,SAAS,IAAIC,OAAO,QACf,qBAAqB;AAE5B,OAAOC,yBAAyB,MAAM,wDAAwD;AAC9F,OAAOC,2BAA2B,MAAM,yCAAyC;AACjF,OAAO,KAAKC,iBAAiB,MAAM,sDAAsD;AAMzF,SAASC,oBAAoB,QAAQ,4DAA4D;AACjG,SAASC,YAAY,QAAQ,8BAA8B;AAK3D,MAAMC,0BAA0B,GAAG,SAAAA,CACjCC,GAAsC;EAEtC,MAAM;IAAEC,cAAc;IAAEC;EAAmB,CAAE,GAAGF,GAAG,CAACG,MAAM;EAE1D,MAAM;IAAEC,kBAAkB;IAAEC;EAAI,CAAE,GAChCT,iBAAiB,CAACU,eAAe,CAACL,cAAc,CAAC;EAEnD,MAAMM,YAAY,GAChBX,iBAAiB,CAACY,+BAA+B,CAACP,cAAc,CAAC;EAEnE,IAAII,IAAI,KAAKV,2BAA2B,CAACc,QAAQ,EAAE;IACjD,MAAM,IAAIC,KAAK,CACb,kDAAkDL,IAAI,oBAAoB,CAC3E;;EAGH,IAAIR,oBAAoB,CAACO,kBAAkB,CAACC,IAAI,CAAC,CAAC,EAAE;IAElD,MAAMM,kBAAkB,GAAGrB,KAAK,CAACsB,SAAS,CACvCR,kBAAkB,CAACC,IAAI,CAAoC,CAACQ,QAAQ,CACtE;IAED,IAAI,CAACF,kBAAkB,EAAE;MACvBG,OAAO,CAACC,IAAI,CAAC,iCAAiC,CAAC;MAC/C;;IAGF,MAAM;MAAEC,SAAS;MAAEC;IAAgB,CAAE,GAAGN,kBAAkB;IAG1D,IAAIO,cAAc;IAClB,IAAIhB,mBAAmB,IAAIiB,KAAK,CAACC,OAAO,CAAClB,mBAAmB,CAAC,EAAE;MAC7DgB,cAAc,GAAGhB,mBAAmB;KACrC,MAAM;MACL,MAAMmB,SAAS,GAAGL,SAAS,CAACM,aAAa,EAAE,CAAC,CAAC,CAAC;MAC9CJ,cAAc,GAAG,CAAC,GAAGC,KAAK,CAACE,SAAS,CAAC,CAACE,IAAI,EAAE,CAAC;;IAG/CL,cAAc,CAACM,OAAO,CAAEC,CAAC,IAAI;MAC3BR,gBAAgB,CAACS,eAAe,CAACD,CAAC,CAAC;IACrC,CAAC,CAAC;IAGFT,SAAS,CAACW,QAAQ,EAAE;GACrB,MAAM;IACLpB,YAAY,CAACiB,OAAO,CAAEI,WAAW,IAAI;MACnC,MAAMC,oCAAoC,GACxCjC,iBAAiB,CAACkC,8BAA8B,CAACF,WAAW,CAAC;MAE/D,MAAMG,SAAS,GAAGjC,YAAY,CAAC8B,WAAW,CAAC;MAC3C,MAAMI,aAAa,GAAGD,SAAS,CAACE,gBAAgB,EAAE;MAElDJ,oCAAoC,CAACL,OAAO,CAAEU,cAAc,IAAI;QAC9D,IAAIA,cAAc,CAACjC,cAAc,KAAKA,cAAc,EAAE;UACpD;;QAGF+B,aAAa,CAACR,OAAO,CAAC,CAAC;UAAEW,UAAU;UAAEC;QAAiB,CAAE,KAAI;UAC1D,MAAMC,QAAQ,GAAG9C,sBAAsB,CACrC4C,UAAU,EACVC,iBAAiB,CAClB,CAACC,QAAQ;UAEV,MAAMC,UAAU,GAAGD,QAAQ,CAACE,QAAQ,CAClCL,cAAc,CAACM,6BAA6B,CAC7C;UAED,IAAI,CAACF,UAAU,EAAE;YACf;;UAGF,MAAMG,cAAc,GAAGJ,QAAQ,CAACK,iBAAiB,EAAE;UAEnD,MAAMC,YAAY,GAAGL,UAAU,CAACM,KAAK,CAACC,SAAS,EAAE,CAACC,YAAY,EAAE;UAEhE,MAAM;YAAEC;UAAmB,CAAE,GAAG3C,kBAAkB,CAChDC,IAAI,CAC4B;UAElC,MAAM2C,0BAA0B,GAC9BD,mBAAmB,CAACE,GAAG,CAACR,cAAc,CAAC;UAEzC,MAAMS,iBAAiB,GAAG5D,KAAK,CAAC6D,QAAQ,CAACH,0BAA0B,CAAC;UACpEL,YAAY,CAAChB,QAAQ,EAAE;UAGvBlC,OAAO,CAAC2D,sCAAsC,CAC5CT,YAAY,EACZO,iBAAiB,CAClB;QACH,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;;EAGJ3C,YAAY,CAACiB,OAAO,CAAEI,WAAW,IAAI;IACnClC,yBAAyB,CAACkC,WAAW,CAAC;EACxC,CAAC,CAAC;AACJ,CAAC;AAED,eAAe7B,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}