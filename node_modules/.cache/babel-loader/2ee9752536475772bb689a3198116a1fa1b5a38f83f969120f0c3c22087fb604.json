{"ast":null,"code":"import vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport { vec3 } from 'gl-matrix';\nimport cache from '../cache';\nimport { MPR_CAMERA_VALUES, RENDERING_DEFAULTS } from '../constants';\nimport { OrientationAxis, Events } from '../enums';\nimport { actorIsA, getClosestImageId, getSpacingInNormalDirection, isImageActor, triggerEvent } from '../utilities';\nimport BaseVolumeViewport from './BaseVolumeViewport';\nimport setDefaultVolumeVOI from './helpers/setDefaultVolumeVOI';\nimport { setTransferFunctionNodes } from '../utilities/transferFunctionUtils';\nimport getImageSliceDataForVolumeViewport from '../utilities/getImageSliceDataForVolumeViewport';\nclass VolumeViewport extends BaseVolumeViewport {\n  constructor(props) {\n    super(props);\n    this._useAcquisitionPlaneForViewPlane = false;\n    this.getNumberOfSlices = () => {\n      const {\n        numberOfSlices\n      } = getImageSliceDataForVolumeViewport(this);\n      return numberOfSlices;\n    };\n    this.getCurrentImageIdIndex = volumeId => {\n      const {\n        viewPlaneNormal,\n        focalPoint\n      } = this.getCamera();\n      const {\n        origin,\n        direction,\n        spacing\n      } = this.getImageData(volumeId);\n      const spacingInNormal = getSpacingInNormalDirection({\n        direction,\n        spacing\n      }, viewPlaneNormal);\n      const sub = vec3.create();\n      vec3.sub(sub, focalPoint, origin);\n      const distance = vec3.dot(sub, viewPlaneNormal);\n      return Math.round(Math.abs(distance) / spacingInNormal);\n    };\n    this.getCurrentImageId = () => {\n      if (this.getActors().length > 1) {\n        console.warn(`Using the first/default actor of ${this.getActors().length} actors for getCurrentImageId.`);\n      }\n      const actorEntry = this.getDefaultActor();\n      if (!actorEntry || !actorIsA(actorEntry, 'vtkVolume')) {\n        return;\n      }\n      const {\n        uid\n      } = actorEntry;\n      const volume = cache.getVolume(uid);\n      if (!volume) {\n        return;\n      }\n      const {\n        viewPlaneNormal,\n        focalPoint\n      } = this.getCamera();\n      return getClosestImageId(volume, focalPoint, viewPlaneNormal);\n    };\n    const {\n      orientation\n    } = this.options;\n    if (orientation && orientation !== OrientationAxis.ACQUISITION) {\n      this.applyViewOrientation(orientation);\n      return;\n    }\n    this._useAcquisitionPlaneForViewPlane = true;\n  }\n  async setVolumes(volumeInputArray, immediate = false, suppressEvents = false) {\n    const firstImageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n    if (!firstImageVolume) {\n      throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist`);\n    }\n    if (this._useAcquisitionPlaneForViewPlane) {\n      this._setViewPlaneToAcquisitionPlane(firstImageVolume);\n      this._useAcquisitionPlaneForViewPlane = false;\n    }\n    return super.setVolumes(volumeInputArray, immediate, suppressEvents);\n  }\n  async addVolumes(volumeInputArray, immediate = false, suppressEvents = false) {\n    const firstImageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n    if (!firstImageVolume) {\n      throw new Error(`imageVolume with id: ${firstImageVolume.volumeId} does not exist`);\n    }\n    if (this._useAcquisitionPlaneForViewPlane) {\n      this._setViewPlaneToAcquisitionPlane(firstImageVolume);\n      this._useAcquisitionPlaneForViewPlane = false;\n    }\n    return super.addVolumes(volumeInputArray, immediate, suppressEvents);\n  }\n  setOrientation(orientation, immediate = true) {\n    let viewPlaneNormal, viewUp;\n    if (MPR_CAMERA_VALUES[orientation]) {\n      ({\n        viewPlaneNormal,\n        viewUp\n      } = MPR_CAMERA_VALUES[orientation]);\n    } else if (orientation === 'acquisition') {\n      ({\n        viewPlaneNormal,\n        viewUp\n      } = this._getAcquisitionPlaneOrientation());\n    } else {\n      throw new Error(`Invalid orientation: ${orientation}. Use Enums.OrientationAxis instead.`);\n    }\n    this.setCamera({\n      viewPlaneNormal,\n      viewUp\n    });\n    this.viewportProperties.orientation = orientation;\n    this.resetCamera();\n    if (immediate) {\n      this.render();\n    }\n  }\n  _getAcquisitionPlaneOrientation() {\n    const actorEntry = this.getDefaultActor();\n    if (!actorEntry) {\n      return;\n    }\n    const volumeId = actorEntry.uid;\n    const imageVolume = cache.getVolume(volumeId);\n    if (!imageVolume) {\n      throw new Error(`imageVolume with id: ${volumeId} does not exist in cache`);\n    }\n    const {\n      direction\n    } = imageVolume;\n    const viewPlaneNormal = direction.slice(6, 9).map(x => -x);\n    const viewUp = direction.slice(3, 6).map(x => -x);\n    return {\n      viewPlaneNormal,\n      viewUp\n    };\n  }\n  _setViewPlaneToAcquisitionPlane(imageVolume) {\n    let viewPlaneNormal, viewUp;\n    if (imageVolume) {\n      const {\n        direction\n      } = imageVolume;\n      viewPlaneNormal = direction.slice(6, 9).map(x => -x);\n      viewUp = direction.slice(3, 6).map(x => -x);\n    } else {\n      ({\n        viewPlaneNormal,\n        viewUp\n      } = this._getAcquisitionPlaneOrientation());\n    }\n    this.setCamera({\n      viewPlaneNormal,\n      viewUp\n    });\n    this.initialViewUp = viewUp;\n    this.resetCamera();\n  }\n  setBlendMode(blendMode, filterActorUIDs = [], immediate = false) {\n    let actorEntries = this.getActors();\n    if (filterActorUIDs && filterActorUIDs.length > 0) {\n      actorEntries = actorEntries.filter(actorEntry => {\n        return filterActorUIDs.includes(actorEntry.uid);\n      });\n    }\n    actorEntries.forEach(actorEntry => {\n      const {\n        actor\n      } = actorEntry;\n      const mapper = actor.getMapper();\n      mapper.setBlendMode(blendMode);\n    });\n    if (immediate) {\n      this.render();\n    }\n  }\n  resetCamera(resetPan = true, resetZoom = true, resetToCenter = true, resetRotation = false) {\n    super.resetCamera(resetPan, resetZoom, resetToCenter);\n    this.resetVolumeViewportClippingRange();\n    const activeCamera = this.getVtkActiveCamera();\n    const viewPlaneNormal = activeCamera.getViewPlaneNormal();\n    const viewUp = activeCamera.getViewUp();\n    const focalPoint = activeCamera.getFocalPoint();\n    const actorEntries = this.getActors();\n    actorEntries.forEach(actorEntry => {\n      if (!actorEntry.actor) {\n        return;\n      }\n      const mapper = actorEntry.actor.getMapper();\n      const vtkPlanes = mapper.getClippingPlanes();\n      if (vtkPlanes.length === 0 && !actorEntry?.clippingFilter) {\n        const clipPlane1 = vtkPlane.newInstance();\n        const clipPlane2 = vtkPlane.newInstance();\n        const newVtkPlanes = [clipPlane1, clipPlane2];\n        let slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n        if (actorEntry.slabThickness) {\n          slabThickness = actorEntry.slabThickness;\n        }\n        this.setOrientationOfClippingPlanes(newVtkPlanes, slabThickness, viewPlaneNormal, focalPoint);\n        mapper.addClippingPlane(clipPlane1);\n        mapper.addClippingPlane(clipPlane2);\n      }\n    });\n    if (resetRotation && MPR_CAMERA_VALUES[this.viewportProperties.orientation] !== undefined) {\n      const viewToReset = MPR_CAMERA_VALUES[this.viewportProperties.orientation];\n      this.setCameraNoEvent({\n        viewUp: viewToReset.viewUp,\n        viewPlaneNormal: viewToReset.viewPlaneNormal\n      });\n    }\n    return true;\n  }\n  setSlabThickness(slabThickness, filterActorUIDs = []) {\n    if (slabThickness < 0.1) {\n      slabThickness = 0.1;\n    }\n    let actorEntries = this.getActors();\n    if (filterActorUIDs && filterActorUIDs.length > 0) {\n      actorEntries = actorEntries.filter(actorEntry => {\n        return filterActorUIDs.includes(actorEntry.uid);\n      });\n    }\n    actorEntries.forEach(actorEntry => {\n      if (actorIsA(actorEntry, 'vtkVolume')) {\n        actorEntry.slabThickness = slabThickness;\n      }\n    });\n    const currentCamera = this.getCamera();\n    this.updateClippingPlanesForActors(currentCamera);\n    this.triggerCameraModifiedEventIfNecessary(currentCamera, currentCamera);\n    this.viewportProperties.slabThickness = slabThickness;\n  }\n  resetProperties(volumeId) {\n    this._resetProperties(volumeId);\n  }\n  _resetProperties(volumeId) {\n    const volumeActor = volumeId ? this.getActor(volumeId) : this.getDefaultActor();\n    if (!volumeActor) {\n      throw new Error(`No actor found for the given volumeId: ${volumeId}`);\n    }\n    if (volumeActor.slabThickness) {\n      volumeActor.slabThickness = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n      this.viewportProperties.slabThickness = undefined;\n      this.updateClippingPlanesForActors(this.getCamera());\n    }\n    const imageVolume = cache.getVolume(volumeActor.uid);\n    if (!imageVolume) {\n      throw new Error(`imageVolume with id: ${volumeActor.uid} does not exist in cache`);\n    }\n    setDefaultVolumeVOI(volumeActor.actor, imageVolume, false);\n    if (isImageActor(volumeActor)) {\n      setTransferFunctionNodes(volumeActor.actor.getProperty().getRGBTransferFunction(0), this.initialTransferFunctionNodes);\n    }\n    const range = volumeActor.actor.getProperty().getRGBTransferFunction(0).getMappingRange();\n    const eventDetails = {\n      viewportId: volumeActor.uid,\n      range: {\n        lower: range[0],\n        upper: range[1]\n      },\n      volumeId: volumeActor.uid\n    };\n    const resetPan = true;\n    const resetZoom = true;\n    const resetToCenter = true;\n    const resetCameraRotation = true;\n    this.resetCamera(resetPan, resetZoom, resetToCenter, resetCameraRotation);\n    triggerEvent(this.element, Events.VOI_MODIFIED, eventDetails);\n  }\n}\nexport default VolumeViewport;","map":{"version":3,"names":["vtkPlane","vec3","cache","MPR_CAMERA_VALUES","RENDERING_DEFAULTS","OrientationAxis","Events","actorIsA","getClosestImageId","getSpacingInNormalDirection","isImageActor","triggerEvent","BaseVolumeViewport","setDefaultVolumeVOI","setTransferFunctionNodes","getImageSliceDataForVolumeViewport","VolumeViewport","constructor","props","_useAcquisitionPlaneForViewPlane","getNumberOfSlices","numberOfSlices","getCurrentImageIdIndex","volumeId","viewPlaneNormal","focalPoint","getCamera","origin","direction","spacing","getImageData","spacingInNormal","sub","create","distance","dot","Math","round","abs","getCurrentImageId","getActors","length","console","warn","actorEntry","getDefaultActor","uid","volume","getVolume","orientation","options","ACQUISITION","applyViewOrientation","setVolumes","volumeInputArray","immediate","suppressEvents","firstImageVolume","Error","_setViewPlaneToAcquisitionPlane","addVolumes","setOrientation","viewUp","_getAcquisitionPlaneOrientation","setCamera","viewportProperties","resetCamera","render","imageVolume","slice","map","x","initialViewUp","setBlendMode","blendMode","filterActorUIDs","actorEntries","filter","includes","forEach","actor","mapper","getMapper","resetPan","resetZoom","resetToCenter","resetRotation","resetVolumeViewportClippingRange","activeCamera","getVtkActiveCamera","getViewPlaneNormal","getViewUp","getFocalPoint","vtkPlanes","getClippingPlanes","clippingFilter","clipPlane1","newInstance","clipPlane2","newVtkPlanes","slabThickness","MINIMUM_SLAB_THICKNESS","setOrientationOfClippingPlanes","addClippingPlane","undefined","viewToReset","setCameraNoEvent","setSlabThickness","currentCamera","updateClippingPlanesForActors","triggerCameraModifiedEventIfNecessary","resetProperties","_resetProperties","volumeActor","getActor","getProperty","getRGBTransferFunction","initialTransferFunctionNodes","range","getMappingRange","eventDetails","viewportId","lower","upper","resetCameraRotation","element","VOI_MODIFIED"],"sources":["../../../src/RenderingEngine/VolumeViewport.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}