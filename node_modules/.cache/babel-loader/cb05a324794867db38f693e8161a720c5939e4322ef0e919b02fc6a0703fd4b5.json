{"ast":null,"code":"import { triggerEvent, imageIdToURI } from '../utilities';\nimport eventTarget from '../eventTarget';\nimport Events from '../enums/Events';\nimport { ImageVolume } from './classes/ImageVolume';\nconst ONE_GB = 1073741824;\nclass Cache {\n  constructor() {\n    this._imageCache = new Map();\n    this._volumeCache = new Map();\n    this._imageCacheSize = 0;\n    this._volumeCacheSize = 0;\n    this._maxCacheSize = 3 * ONE_GB;\n    this._maxInstanceSize = 2 * ONE_GB - 8;\n    this.setMaxCacheSize = newMaxCacheSize => {\n      if (!newMaxCacheSize || typeof newMaxCacheSize !== 'number') {\n        const errorMessage = `New max cacheSize ${this._maxCacheSize} should be defined and should be a number.`;\n        throw new Error(errorMessage);\n      }\n      this._maxCacheSize = newMaxCacheSize;\n    };\n    this.isCacheable = byteLength => {\n      if (byteLength > this._maxInstanceSize) {\n        return false;\n      }\n      const unallocatedSpace = this.getBytesAvailable();\n      const imageCacheSize = this._imageCacheSize;\n      const availableSpace = unallocatedSpace + imageCacheSize;\n      return availableSpace > byteLength;\n    };\n    this.getMaxCacheSize = () => this._maxCacheSize;\n    this.getMaxInstanceSize = () => this._maxInstanceSize;\n    this.getCacheSize = () => this._imageCacheSize + this._volumeCacheSize;\n    this._decacheImage = imageId => {\n      const {\n        imageLoadObject\n      } = this._imageCache.get(imageId);\n      if (imageLoadObject.cancelFn) {\n        imageLoadObject.cancelFn();\n      }\n      if (imageLoadObject.decache) {\n        imageLoadObject.decache();\n      }\n      this._imageCache.delete(imageId);\n    };\n    this._decacheVolume = volumeId => {\n      const cachedVolume = this._volumeCache.get(volumeId);\n      const {\n        volumeLoadObject,\n        volume\n      } = cachedVolume;\n      if (volume.cancelLoading) {\n        volume.cancelLoading();\n      }\n      if (volume.imageData) {\n        volume.imageData.delete();\n      }\n      this._restoreImagesFromBuffer(volume);\n      if (volumeLoadObject.cancelFn) {\n        volumeLoadObject.cancelFn();\n      }\n      if (volumeLoadObject.decache) {\n        volumeLoadObject.decache();\n      }\n      this._volumeCache.delete(volumeId);\n    };\n    this.purgeCache = () => {\n      const imageIterator = this._imageCache.keys();\n      while (true) {\n        const {\n          value: imageId,\n          done\n        } = imageIterator.next();\n        if (done) {\n          break;\n        }\n        this.removeImageLoadObject(imageId);\n        triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_REMOVED, {\n          imageId\n        });\n      }\n      this.purgeVolumeCache();\n    };\n    this.purgeVolumeCache = () => {\n      const volumeIterator = this._volumeCache.keys();\n      while (true) {\n        const {\n          value: volumeId,\n          done\n        } = volumeIterator.next();\n        if (done) {\n          break;\n        }\n        this.removeVolumeLoadObject(volumeId);\n        triggerEvent(eventTarget, Events.VOLUME_CACHE_VOLUME_REMOVED, {\n          volumeId\n        });\n      }\n    };\n    this.getVolumeLoadObject = volumeId => {\n      if (volumeId === undefined) {\n        throw new Error('getVolumeLoadObject: volumeId must not be undefined');\n      }\n      const cachedVolume = this._volumeCache.get(volumeId);\n      if (cachedVolume === undefined) {\n        return;\n      }\n      cachedVolume.timeStamp = Date.now();\n      return cachedVolume.volumeLoadObject;\n    };\n    this.getGeometry = geometryId => {\n      if (geometryId == null) {\n        throw new Error('getGeometry: geometryId must not be undefined');\n      }\n      const cachedGeometry = this._geometryCache.get(geometryId);\n      if (cachedGeometry === undefined) {\n        return;\n      }\n      cachedGeometry.timeStamp = Date.now();\n      return cachedGeometry.geometry;\n    };\n    this.getImage = imageId => {\n      if (imageId === undefined) {\n        throw new Error('getImage: imageId must not be undefined');\n      }\n      const cachedImage = this._imageCache.get(imageId);\n      if (cachedImage === undefined) {\n        return;\n      }\n      cachedImage.timeStamp = Date.now();\n      return cachedImage.image;\n    };\n    this.getVolume = volumeId => {\n      if (volumeId === undefined) {\n        throw new Error('getVolume: volumeId must not be undefined');\n      }\n      const cachedVolume = this._volumeCache.get(volumeId);\n      if (cachedVolume === undefined) {\n        return;\n      }\n      cachedVolume.timeStamp = Date.now();\n      return cachedVolume.volume;\n    };\n    this.removeImageLoadObject = imageId => {\n      if (imageId === undefined) {\n        throw new Error('removeImageLoadObject: imageId must not be undefined');\n      }\n      const cachedImage = this._imageCache.get(imageId);\n      if (cachedImage === undefined) {\n        throw new Error('removeImageLoadObject: imageId was not present in imageCache');\n      }\n      this.incrementImageCacheSize(-cachedImage.sizeInBytes);\n      const eventDetails = {\n        imageId\n      };\n      triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_REMOVED, eventDetails);\n      this._decacheImage(imageId);\n    };\n    this.removeVolumeLoadObject = volumeId => {\n      if (volumeId === undefined) {\n        throw new Error('removeVolumeLoadObject: volumeId must not be undefined');\n      }\n      const cachedVolume = this._volumeCache.get(volumeId);\n      if (cachedVolume === undefined) {\n        throw new Error('removeVolumeLoadObject: volumeId was not present in volumeCache');\n      }\n      this.incrementVolumeCacheSize(-cachedVolume.sizeInBytes);\n      const eventDetails = {\n        volume: cachedVolume,\n        volumeId\n      };\n      triggerEvent(eventTarget, Events.VOLUME_CACHE_VOLUME_REMOVED, eventDetails);\n      this._decacheVolume(volumeId);\n    };\n    this.putGeometryLoadObject = (geometryId, geometryLoadObject) => {\n      if (geometryId == undefined) {\n        throw new Error('putGeometryLoadObject: geometryId must not be undefined');\n      }\n      if (this._geometryCache.has(geometryId)) {\n        throw new Error('putGeometryLoadObject: geometryId already present in geometryCache');\n      }\n      const cachedGeometry = {\n        geometryId,\n        geometryLoadObject,\n        loaded: false,\n        timeStamp: Date.now(),\n        sizeInBytes: 0\n      };\n      this._geometryCache.set(geometryId, cachedGeometry);\n      return geometryLoadObject.promise.then(geometry => {\n        if (!this._geometryCache.has(geometryId)) {\n          console.warn('putGeometryLoadObject: geometryId was removed from geometryCache');\n          return;\n        }\n        if (Number.isNaN(geometry.sizeInBytes)) {\n          throw new Error('putGeometryLoadObject: geometry.sizeInBytes is not a number');\n        }\n        cachedGeometry.loaded = true;\n        cachedGeometry.geometry = geometry;\n        cachedGeometry.sizeInBytes = geometry.sizeInBytes;\n        const eventDetails = {\n          geometry,\n          geometryId\n        };\n        triggerEvent(eventTarget, Events.GEOMETRY_CACHE_GEOMETRY_ADDED, eventDetails);\n        return;\n      }).catch(error => {\n        this._geometryCache.delete(geometryId);\n        throw error;\n      });\n    };\n    this.incrementImageCacheSize = increment => {\n      this._imageCacheSize += increment;\n    };\n    this.incrementVolumeCacheSize = increment => {\n      this._volumeCacheSize += increment;\n    };\n    this.decrementImageCacheSize = decrement => {\n      this._imageCacheSize -= decrement;\n    };\n    this.decrementVolumeCacheSize = decrement => {\n      this._volumeCacheSize -= decrement;\n    };\n    this._geometryCache = new Map();\n  }\n  getBytesAvailable() {\n    return this.getMaxCacheSize() - this.getCacheSize();\n  }\n  decacheIfNecessaryUntilBytesAvailable(numBytes, volumeImageIds) {\n    let bytesAvailable = this.getBytesAvailable();\n    if (bytesAvailable >= numBytes) {\n      return bytesAvailable;\n    }\n    let cachedImages = Array.from(this._imageCache.values());\n    function compare(a, b) {\n      if (a.timeStamp > b.timeStamp) {\n        return 1;\n      }\n      if (a.timeStamp < b.timeStamp) {\n        return -1;\n      }\n      return 0;\n    }\n    cachedImages.sort(compare);\n    let cachedImageIds = cachedImages.map(im => im.imageId);\n    let imageIdsToPurge = cachedImageIds;\n    if (volumeImageIds) {\n      imageIdsToPurge = cachedImageIds.filter(id => !volumeImageIds.includes(id));\n    }\n    for (const imageId of imageIdsToPurge) {\n      this.removeImageLoadObject(imageId);\n      triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_REMOVED, {\n        imageId\n      });\n      bytesAvailable = this.getBytesAvailable();\n      if (bytesAvailable >= numBytes) {\n        return bytesAvailable;\n      }\n    }\n    cachedImages = Array.from(this._imageCache.values());\n    cachedImageIds = cachedImages.map(im => im.imageId);\n    for (const imageId of cachedImageIds) {\n      this.removeImageLoadObject(imageId);\n      triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_REMOVED, {\n        imageId\n      });\n      bytesAvailable = this.getBytesAvailable();\n      if (bytesAvailable >= numBytes) {\n        return bytesAvailable;\n      }\n    }\n  }\n  putImageLoadObject(imageId, imageLoadObject) {\n    if (imageId === undefined) {\n      throw new Error('putImageLoadObject: imageId must not be undefined');\n    }\n    if (imageLoadObject.promise === undefined) {\n      throw new Error('putImageLoadObject: imageLoadObject.promise must not be undefined');\n    }\n    if (this._imageCache.has(imageId)) {\n      throw new Error('putImageLoadObject: imageId already in cache');\n    }\n    if (imageLoadObject.cancelFn && typeof imageLoadObject.cancelFn !== 'function') {\n      throw new Error('putImageLoadObject: imageLoadObject.cancel must be a function');\n    }\n    const cachedImage = {\n      loaded: false,\n      imageId,\n      sharedCacheKey: undefined,\n      imageLoadObject,\n      timeStamp: Date.now(),\n      sizeInBytes: 0\n    };\n    this._imageCache.set(imageId, cachedImage);\n    return imageLoadObject.promise.then(image => {\n      if (!this._imageCache.get(imageId)) {\n        console.warn('The image was purged from the cache before it completed loading.');\n        return;\n      }\n      if (image.sizeInBytes === undefined || Number.isNaN(image.sizeInBytes)) {\n        throw new Error('putImageLoadObject: image.sizeInBytes must not be undefined');\n      }\n      if (image.sizeInBytes.toFixed === undefined) {\n        throw new Error('putImageLoadObject: image.sizeInBytes is not a number');\n      }\n      if (!this.isCacheable(image.sizeInBytes)) {\n        throw new Error(Events.CACHE_SIZE_EXCEEDED);\n      }\n      this.decacheIfNecessaryUntilBytesAvailable(image.sizeInBytes);\n      cachedImage.loaded = true;\n      cachedImage.image = image;\n      cachedImage.sizeInBytes = image.sizeInBytes;\n      this.incrementImageCacheSize(cachedImage.sizeInBytes);\n      const eventDetails = {\n        image: cachedImage\n      };\n      triggerEvent(eventTarget, Events.IMAGE_CACHE_IMAGE_ADDED, eventDetails);\n      cachedImage.sharedCacheKey = image.sharedCacheKey;\n    }).catch(error => {\n      this._imageCache.delete(imageId);\n      throw error;\n    });\n  }\n  getImageLoadObject(imageId) {\n    if (imageId === undefined) {\n      throw new Error('getImageLoadObject: imageId must not be undefined');\n    }\n    const cachedImage = this._imageCache.get(imageId);\n    if (cachedImage === undefined) {\n      return;\n    }\n    cachedImage.timeStamp = Date.now();\n    return cachedImage.imageLoadObject;\n  }\n  isLoaded(imageId) {\n    const cachedImage = this._imageCache.get(imageId);\n    if (!cachedImage) {\n      return false;\n    }\n    return cachedImage.loaded;\n  }\n  getVolumeContainingImageId(imageId) {\n    const volumeIds = Array.from(this._volumeCache.keys());\n    const imageIdToUse = imageIdToURI(imageId);\n    for (const volumeId of volumeIds) {\n      const cachedVolume = this._volumeCache.get(volumeId);\n      const {\n        volume\n      } = cachedVolume;\n      if (!volume?.imageIds?.length) {\n        return;\n      }\n      const imageIdIndex = volume.getImageURIIndex(imageIdToUse);\n      if (imageIdIndex > -1) {\n        return {\n          volume,\n          imageIdIndex\n        };\n      }\n    }\n  }\n  getCachedImageBasedOnImageURI(imageId) {\n    const imageURIToUse = imageIdToURI(imageId);\n    const cachedImageIds = Array.from(this._imageCache.keys());\n    const foundImageId = cachedImageIds.find(imageId => {\n      return imageIdToURI(imageId) === imageURIToUse;\n    });\n    if (!foundImageId) {\n      return;\n    }\n    return this._imageCache.get(foundImageId);\n  }\n  putVolumeLoadObject(volumeId, volumeLoadObject) {\n    if (volumeId === undefined) {\n      throw new Error('putVolumeLoadObject: volumeId must not be undefined');\n    }\n    if (volumeLoadObject.promise === undefined) {\n      throw new Error('putVolumeLoadObject: volumeLoadObject.promise must not be undefined');\n    }\n    if (this._volumeCache.has(volumeId)) {\n      throw new Error(`putVolumeLoadObject: volumeId:${volumeId} already in cache`);\n    }\n    if (volumeLoadObject.cancelFn && typeof volumeLoadObject.cancelFn !== 'function') {\n      throw new Error('putVolumeLoadObject: volumeLoadObject.cancel must be a function');\n    }\n    const cachedVolume = {\n      loaded: false,\n      volumeId,\n      volumeLoadObject,\n      timeStamp: Date.now(),\n      sizeInBytes: 0\n    };\n    this._volumeCache.set(volumeId, cachedVolume);\n    return volumeLoadObject.promise.then(volume => {\n      if (!this._volumeCache.get(volumeId)) {\n        console.warn('The image was purged from the cache before it completed loading.');\n        return;\n      }\n      if (Number.isNaN(volume.sizeInBytes)) {\n        throw new Error('putVolumeLoadObject: volume.sizeInBytes must not be undefined');\n      }\n      if (volume.sizeInBytes.toFixed === undefined) {\n        throw new Error('putVolumeLoadObject: volume.sizeInBytes is not a number');\n      }\n      this.decacheIfNecessaryUntilBytesAvailable(volume.sizeInBytes, volume.imageIds);\n      cachedVolume.volume = volume;\n      cachedVolume.sizeInBytes = volume.sizeInBytes;\n      this.incrementVolumeCacheSize(cachedVolume.sizeInBytes);\n      const eventDetails = {\n        volume: cachedVolume\n      };\n      triggerEvent(eventTarget, Events.VOLUME_CACHE_VOLUME_ADDED, eventDetails);\n    }).catch(error => {\n      this._volumeCache.delete(volumeId);\n      throw error;\n    });\n  }\n  _restoreImagesFromBuffer(volume) {\n    if (!(volume instanceof ImageVolume)) {\n      console.warn('Volume is not an ImageVolume. Cannot restore images from buffer.');\n      return;\n    }\n    const scalarData = volume.getScalarData();\n    const imageCacheOffsetMap = volume.imageCacheOffsetMap;\n    if (imageCacheOffsetMap.size === 0) {\n      console.warn('No cached images to restore for this volume.');\n      return;\n    }\n    for (const [imageId, {\n      offset\n    }] of imageCacheOffsetMap) {\n      const image = this.getImage(imageId);\n      if (!image) {\n        console.warn(`Image with id ${imageId} not found in cache.`);\n        continue;\n      }\n      const viewPixelData = image.getPixelData();\n      const length = viewPixelData.length;\n      const pixelData = new viewPixelData.constructor(scalarData.buffer, offset, length);\n      image.getPixelData = () => pixelData;\n      if (image.imageFrame) {\n        image.imageFrame.pixelData = pixelData;\n      }\n      delete image.bufferView;\n      this.incrementImageCacheSize(image.sizeInBytes);\n    }\n    console.log(`Images restored from buffer for volume ${volume.volumeId}.`);\n  }\n}\nconst cache = new Cache();\nexport default cache;\nexport { Cache };","map":{"version":3,"names":["triggerEvent","imageIdToURI","eventTarget","Events","ImageVolume","ONE_GB","Cache","constructor","_imageCache","Map","_volumeCache","_imageCacheSize","_volumeCacheSize","_maxCacheSize","_maxInstanceSize","setMaxCacheSize","newMaxCacheSize","errorMessage","Error","isCacheable","byteLength","unallocatedSpace","getBytesAvailable","imageCacheSize","availableSpace","getMaxCacheSize","getMaxInstanceSize","getCacheSize","_decacheImage","imageId","imageLoadObject","get","cancelFn","decache","delete","_decacheVolume","volumeId","cachedVolume","volumeLoadObject","volume","cancelLoading","imageData","_restoreImagesFromBuffer","purgeCache","imageIterator","keys","value","done","next","removeImageLoadObject","IMAGE_CACHE_IMAGE_REMOVED","purgeVolumeCache","volumeIterator","removeVolumeLoadObject","VOLUME_CACHE_VOLUME_REMOVED","getVolumeLoadObject","undefined","timeStamp","Date","now","getGeometry","geometryId","cachedGeometry","_geometryCache","geometry","getImage","cachedImage","image","getVolume","incrementImageCacheSize","sizeInBytes","eventDetails","incrementVolumeCacheSize","putGeometryLoadObject","geometryLoadObject","has","loaded","set","promise","then","console","warn","Number","isNaN","GEOMETRY_CACHE_GEOMETRY_ADDED","catch","error","increment","decrementImageCacheSize","decrement","decrementVolumeCacheSize","decacheIfNecessaryUntilBytesAvailable","numBytes","volumeImageIds","bytesAvailable","cachedImages","Array","from","values","compare","a","b","sort","cachedImageIds","map","im","imageIdsToPurge","filter","id","includes","putImageLoadObject","sharedCacheKey","toFixed","CACHE_SIZE_EXCEEDED","IMAGE_CACHE_IMAGE_ADDED","getImageLoadObject","isLoaded","getVolumeContainingImageId","volumeIds","imageIdToUse","imageIds","length","imageIdIndex","getImageURIIndex","getCachedImageBasedOnImageURI","imageURIToUse","foundImageId","find","putVolumeLoadObject","VOLUME_CACHE_VOLUME_ADDED","scalarData","getScalarData","imageCacheOffsetMap","size","offset","viewPixelData","getPixelData","pixelData","buffer","imageFrame","bufferView","log","cache"],"sources":["../../../src/cache/cache.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}