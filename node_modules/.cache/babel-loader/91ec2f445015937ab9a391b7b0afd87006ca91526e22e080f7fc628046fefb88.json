{"ast":null,"code":"import { loadAndCacheImage } from '../../loaders/imageLoader';\nimport * as metaData from '../../metaData';\nimport { getMinMax, windowLevel } from '../../utilities';\nimport { RequestType } from '../../enums';\nconst PRIORITY = 0;\nconst REQUEST_TYPE = RequestType.Prefetch;\nasync function setDefaultVolumeVOI(volumeActor, imageVolume, useNativeDataType) {\n  let voi = getVOIFromMetadata(imageVolume);\n  if (!voi) {\n    voi = await getVOIFromMinMax(imageVolume, useNativeDataType);\n  }\n  if (!voi || voi.lower === undefined || voi.upper === undefined) {\n    throw new Error('Could not get VOI from metadata, nor from the min max of the image middle slice');\n  }\n  voi = handlePreScaledVolume(imageVolume, voi);\n  const {\n    lower,\n    upper\n  } = voi;\n  volumeActor.getProperty().getRGBTransferFunction(0).setMappingRange(lower, upper);\n}\nfunction handlePreScaledVolume(imageVolume, voi) {\n  const imageIds = imageVolume.imageIds;\n  const imageIdIndex = Math.floor(imageIds.length / 2);\n  const imageId = imageIds[imageIdIndex];\n  const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n  if (_isCurrentImagePTPrescaled(generalSeriesModule.modality, imageVolume)) {\n    return {\n      lower: 0,\n      upper: 5\n    };\n  }\n  return voi;\n}\nfunction getVOIFromMetadata(imageVolume) {\n  const {\n    imageIds\n  } = imageVolume;\n  const imageIdIndex = Math.floor(imageIds.length / 2);\n  const imageId = imageIds[imageIdIndex];\n  const voiLutModule = metaData.get('voiLutModule', imageId);\n  if (voiLutModule && voiLutModule.windowWidth && voiLutModule.windowCenter) {\n    const {\n      windowWidth,\n      windowCenter\n    } = voiLutModule;\n    const voi = {\n      windowWidth: Array.isArray(windowWidth) ? windowWidth[0] : windowWidth,\n      windowCenter: Array.isArray(windowCenter) ? windowCenter[0] : windowCenter\n    };\n    const {\n      lower,\n      upper\n    } = windowLevel.toLowHighRange(Number(voi.windowWidth), Number(voi.windowCenter));\n    return {\n      lower,\n      upper\n    };\n  }\n}\nasync function getVOIFromMinMax(imageVolume, useNativeDataType) {\n  const {\n    imageIds\n  } = imageVolume;\n  const scalarData = imageVolume.getScalarData();\n  const imageIdIndex = Math.floor(imageIds.length / 2);\n  const imageId = imageVolume.imageIds[imageIdIndex];\n  const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n  const {\n    modality\n  } = generalSeriesModule;\n  const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n  const numImages = imageIds.length;\n  const bytesPerImage = scalarData.byteLength / numImages;\n  const voxelsPerImage = scalarData.length / numImages;\n  const bytePerPixel = scalarData.BYTES_PER_ELEMENT;\n  const scalingParameters = {\n    rescaleSlope: modalityLutModule.rescaleSlope,\n    rescaleIntercept: modalityLutModule.rescaleIntercept,\n    modality\n  };\n  let scalingParametersToUse;\n  if (modality === 'PT') {\n    const suvFactor = metaData.get('scalingModule', imageId);\n    if (suvFactor) {\n      scalingParametersToUse = {\n        ...scalingParameters,\n        suvbw: suvFactor.suvbw\n      };\n    }\n  }\n  const byteOffset = imageIdIndex * bytesPerImage;\n  const options = {\n    targetBuffer: {\n      type: useNativeDataType ? undefined : 'Float32Array'\n    },\n    priority: PRIORITY,\n    requestType: REQUEST_TYPE,\n    preScale: {\n      enabled: true,\n      scalingParameters: scalingParametersToUse\n    }\n  };\n  const image = await loadAndCacheImage(imageId, options);\n  let imageScalarData;\n  if (!image) {\n    imageScalarData = _getImageScalarDataFromImageVolume(imageVolume, byteOffset, bytePerPixel, voxelsPerImage);\n  } else {\n    imageScalarData = image.getPixelData();\n  }\n  const {\n    min,\n    max\n  } = getMinMax(imageScalarData);\n  return {\n    lower: min,\n    upper: max\n  };\n}\nfunction _getImageScalarDataFromImageVolume(imageVolume, byteOffset, bytePerPixel, voxelsPerImage) {\n  const {\n    scalarData\n  } = imageVolume;\n  const {\n    volumeBuffer\n  } = scalarData;\n  if (scalarData.BYTES_PER_ELEMENT !== bytePerPixel) {\n    byteOffset *= scalarData.BYTES_PER_ELEMENT / bytePerPixel;\n  }\n  const TypedArray = scalarData.constructor;\n  const imageScalarData = new TypedArray(voxelsPerImage);\n  const volumeBufferView = new TypedArray(volumeBuffer, byteOffset, voxelsPerImage);\n  imageScalarData.set(volumeBufferView);\n  return imageScalarData;\n}\nfunction _isCurrentImagePTPrescaled(modality, imageVolume) {\n  if (modality !== 'PT' || !imageVolume.isPreScaled) {\n    return false;\n  }\n  if (!imageVolume.scaling?.PT.suvbw) {\n    return false;\n  }\n  return true;\n}\nexport default setDefaultVolumeVOI;","map":{"version":3,"names":["loadAndCacheImage","metaData","getMinMax","windowLevel","RequestType","PRIORITY","REQUEST_TYPE","Prefetch","setDefaultVolumeVOI","volumeActor","imageVolume","useNativeDataType","voi","getVOIFromMetadata","getVOIFromMinMax","lower","undefined","upper","Error","handlePreScaledVolume","getProperty","getRGBTransferFunction","setMappingRange","imageIds","imageIdIndex","Math","floor","length","imageId","generalSeriesModule","get","_isCurrentImagePTPrescaled","modality","voiLutModule","windowWidth","windowCenter","Array","isArray","toLowHighRange","Number","scalarData","getScalarData","modalityLutModule","numImages","bytesPerImage","byteLength","voxelsPerImage","bytePerPixel","BYTES_PER_ELEMENT","scalingParameters","rescaleSlope","rescaleIntercept","scalingParametersToUse","suvFactor","suvbw","byteOffset","options","targetBuffer","type","priority","requestType","preScale","enabled","image","imageScalarData","_getImageScalarDataFromImageVolume","getPixelData","min","max","volumeBuffer","TypedArray","constructor","volumeBufferView","set","isPreScaled","scaling","PT"],"sources":["../../../../src/RenderingEngine/helpers/setDefaultVolumeVOI.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}