{"ast":null,"code":"import { vec3 } from 'gl-matrix';\nimport { metaData, getConfiguration } from '../';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n  const {\n    imagePositionPatient: referenceImagePositionPatient,\n    imageOrientationPatient\n  } = metaData.get('imagePlaneModule', imageIds[0]);\n  if (!scanAxisNormal) {\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n  }\n  const refIppVec = vec3.create();\n  const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n  vec3.set(refIppVec, referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n  let sortedImageIds;\n  let zSpacing;\n  function getDistance(imageId) {\n    const {\n      imagePositionPatient\n    } = metaData.get('imagePlaneModule', imageId);\n    const positionVector = vec3.create();\n    vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n    return vec3.dot(positionVector, scanAxisNormal);\n  }\n  if (!usingWadoUri) {\n    const distanceImagePairs = imageIds.map(imageId => {\n      const distance = getDistance(imageId);\n      return {\n        distance,\n        imageId\n      };\n    });\n    distanceImagePairs.sort((a, b) => b.distance - a.distance);\n    sortedImageIds = distanceImagePairs.map(a => a.imageId);\n    const numImages = distanceImagePairs.length;\n    zSpacing = Math.abs(distanceImagePairs[numImages - 1].distance - distanceImagePairs[0].distance) / (numImages - 1);\n  } else {\n    const prefetchedImageIds = [imageIds[0], imageIds[Math.floor(imageIds.length / 2)]];\n    sortedImageIds = imageIds;\n    const firstImageDistance = getDistance(prefetchedImageIds[0]);\n    const middleImageDistance = getDistance(prefetchedImageIds[1]);\n    if (firstImageDistance - middleImageDistance < 0) {\n      sortedImageIds.reverse();\n    }\n    const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n    if (!metadataForMiddleImage) {\n      throw new Error('Incomplete metadata required for volume construction.');\n    }\n    const positionVector = vec3.create();\n    vec3.sub(positionVector, referenceImagePositionPatient, metadataForMiddleImage.imagePositionPatient);\n    const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n    zSpacing = Math.abs(distanceBetweenFirstAndMiddleImages) / Math.floor(imageIds.length / 2);\n  }\n  const {\n    imagePositionPatient: origin,\n    sliceThickness\n  } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n  const {\n    strictZSpacingForVolumeViewport\n  } = getConfiguration().rendering;\n  if (zSpacing === 0 && !strictZSpacingForVolumeViewport) {\n    if (sliceThickness) {\n      console.log('Could not calculate zSpacing. Using sliceThickness');\n      zSpacing = sliceThickness;\n    } else {\n      console.log('Could not calculate zSpacing. The VolumeViewport visualization is compromised. Setting zSpacing to 1 to render');\n      zSpacing = 1;\n    }\n  }\n  const result = {\n    zSpacing,\n    origin,\n    sortedImageIds\n  };\n  return result;\n}","map":{"version":3,"names":["vec3","metaData","getConfiguration","sortImageIdsAndGetSpacing","imageIds","scanAxisNormal","imagePositionPatient","referenceImagePositionPatient","imageOrientationPatient","get","rowCosineVec","fromValues","colCosineVec","create","cross","refIppVec","usingWadoUri","split","set","sortedImageIds","zSpacing","getDistance","imageId","positionVector","sub","dot","distanceImagePairs","map","distance","sort","a","b","numImages","length","Math","abs","prefetchedImageIds","floor","firstImageDistance","middleImageDistance","reverse","metadataForMiddleImage","Error","distanceBetweenFirstAndMiddleImages","origin","sliceThickness","strictZSpacingForVolumeViewport","rendering","console","log","result"],"sources":["../../../src/utilities/sortImageIdsAndGetSpacing.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}