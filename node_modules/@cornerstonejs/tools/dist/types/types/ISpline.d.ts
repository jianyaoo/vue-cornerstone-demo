import { Types } from '@cornerstonejs/core';
import type { ClosestPoint, ClosestControlPoint, ClosestSplinePoint, ControlPointInfo } from './';
export interface ISpline {
    get numControlPoints(): number;
    get resolution(): number;
    set resolution(resolution: number);
    get fixedResolution(): boolean;
    get closed(): boolean;
    set closed(closed: boolean);
    get aabb(): Types.AABB2;
    get length(): number;
    get invalidated(): boolean;
    hasTangentPoints(): boolean;
    addControlPoint(point: Types.Point2): void;
    addControlPoints(points: Types.Point2[]): void;
    addControlPointAtU(u: number): ControlPointInfo;
    deleteControlPointByIndex(index: number): boolean;
    clearControlPoints(): void;
    setControlPoints(points: Types.Point2[]): void;
    updateControlPoint(index: number, newControlPoint: Types.Point2): void;
    getControlPoints(): Types.Point2[];
    getClosestControlPoint(point: Types.Point2): ClosestControlPoint;
    getClosestControlPointWithinDistance(point: Types.Point2, range: number): ClosestControlPoint;
    getClosestPoint(point: Types.Point2): ClosestSplinePoint;
    getClosestPointOnControlPointLines(point: Types.Point2): ClosestPoint;
    getPolylinePoints(): Types.Point2[];
    getPreviewPolylinePoints(controlPointPreview: Types.Point2, closeDistance: number): Types.Point2[];
    isPointNearCurve(point: Types.Point2, maxDist: number): boolean;
    containsPoint(point: Types.Point2): boolean;
}
//# sourceMappingURL=ISpline.d.ts.map