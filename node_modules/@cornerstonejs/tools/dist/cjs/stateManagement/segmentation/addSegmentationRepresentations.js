"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ToolGroupManager_1 = require("../../store/ToolGroupManager");
const addSegmentationRepresentation_1 = require("./addSegmentationRepresentation");
function addSegmentationRepresentations(toolGroupId, representationInputArray, toolGroupSpecificRepresentationConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const toolGroup = (0, ToolGroupManager_1.getToolGroup)(toolGroupId);
        if (!toolGroup) {
            throw new Error(`No tool group found for toolGroupId: ${toolGroupId}`);
        }
        const promises = representationInputArray.map((representationInput) => {
            return (0, addSegmentationRepresentation_1.addSegmentationRepresentation)(toolGroupId, representationInput, toolGroupSpecificRepresentationConfig);
        });
        const segmentationRepresentationUIDs = yield Promise.all(promises);
        return segmentationRepresentationUIDs;
    });
}
exports.default = addSegmentationRepresentations;
//# sourceMappingURL=addSegmentationRepresentations.js.map